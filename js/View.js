// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils'], function() {
    var View;
    View = {};
    View.moveTo = function(pos, delay, addCommand) {
      var initialPosition, somethingToLoad, tween;
      if (addCommand == null) {
        addCommand = true;
      }
      if (delay == null) {
        somethingToLoad = View.moveBy(pos.subtract(P.view.center), addCommand);
      } else {
        initialPosition = P.view.center;
        tween = new TWEEN.Tween(initialPosition).to(pos, delay).easing(TWEEN.Easing.Exponential.InOut).onUpdate(function() {
          View.moveTo(this, addCommand);
        }).start();
      }
      return somethingToLoad;
    };
    View.moveBy = function(delta, addCommand) {
      var addMoveCommand, area, div, newEntireArea, newView, restrictedAreaShrinked, somethingToLoad, _i, _j, _len, _len1, _ref, _ref1;
      if (addCommand == null) {
        addCommand = true;
      }
      if (R.restrictedArea != null) {
        if (!R.restrictedArea.contains(P.view.center)) {
          delta = R.restrictedArea.center.subtract(P.view.center);
        } else {
          newView = P.view.bounds.clone();
          newView.center.x += delta.x;
          newView.center.y += delta.y;
          if (!R.restrictedArea.contains(newView)) {
            restrictedAreaShrinked = R.restrictedArea.expand(P.view.size.multiply(-1));
            if (restrictedAreaShrinked.width < 0) {
              restrictedAreaShrinked.left = restrictedAreaShrinked.right = R.restrictedArea.center.x;
            }
            if (restrictedAreaShrinked.height < 0) {
              restrictedAreaShrinked.top = restrictedAreaShrinked.bottom = R.restrictedArea.center.y;
            }
            newView.center.x = Utils.clamp(restrictedAreaShrinked.left, newView.center.x, restrictedAreaShrinked.right);
            newView.center.y = Utils.clamp(restrictedAreaShrinked.top, newView.center.y, restrictedAreaShrinked.bottom);
            delta = newView.center.subtract(P.view.center);
          }
        }
      }
      if (R.previousViewPosition == null) {
        R.previousViewPosition = P.view.center;
      }
      P.project.P.view.scrollBy(new P.Point(delta.x, delta.y));
      _ref = R.divs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        div = _ref[_i];
        div.updateTransform();
      }
      R.rasterizer.move();
      Grid.updateGrid();
      newEntireArea = null;
      _ref1 = R.entireAreas;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        area = _ref1[_j];
        if (area.getBounds().contains(P.project.P.view.center)) {
          newEntireArea = area;
          break;
        }
      }
      if ((R.entireArea == null) && (newEntireArea != null)) {
        R.entireArea = newEntireArea.getBounds();
      } else if ((R.entireArea != null) && (newEntireArea == null)) {
        R.entireArea = null;
      }
      somethingToLoad = newEntireArea != null ? R.load(R.entireArea) : R.load();
      R.updateRoom();
      Utils.deferredExecution(View.updateHash, 'updateHash', 500);
      if (addCommand) {
        addMoveCommand = function() {
          R.commandManager.add(new R.MoveViewCommand(R.previousViewPosition, P.view.center));
          R.previousViewPosition = null;
        };
        Utils.deferredExecution(addMoveCommand, 'add move command');
      }
      R.controllerManager.folders['General'].controllers['location'].setValue('' + P.view.center.x.toFixed(2) + ',' + P.view.center.y.toFixed(2));
      return somethingToLoad;
    };
    View.updateHash = function() {
      var prefix;
      R.ignoreHashChange = true;
      prefix = '';
      if ((R.city.owner != null) && (R.city.name != null) && R.city.owner !== 'RomanescoOrg' && R.city.name !== 'Romanesco') {
        prefix = R.city.owner + '/' + R.city.name + '/';
      }
      location.hash = prefix + P.view.center.x.toFixed(2) + ',' + P.view.center.y.toFixed(2);
    };
    window.onhashchange = function(event) {
      var fields, name, owner, p, pos;
      if (R.ignoreHashChange) {
        R.ignoreHashChange = false;
        return;
      }
      p = new P.Point();
      fields = location.hash.substr(1).split('/');
      if (fields.length >= 3) {
        owner = fields[0];
        name = fields[1];
        if (R.city.name !== name || R.city.owner !== owner) {
          R.loadCity(name, owner);
        }
      }
      pos = _.last(fields).split(',');
      p.x = parseFloat(pos[0]);
      p.y = parseFloat(pos[1]);
      if (!_.isFinite(p.x)) {
        p.x = 0;
      }
      if (!_.isFinite(p.y)) {
        p.y = 0;
      }
      View.moveTo(p);
    };
    return View;
  });

}).call(this);

//# sourceMappingURL=View.map
