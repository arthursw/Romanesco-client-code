// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Tools/Tool'], function(Tool) {
    var GradientTool;
    GradientTool = (function(_super) {
      __extends(GradientTool, _super);

      GradientTool.label = 'Gradient';

      GradientTool.description = '';

      GradientTool.favorite = true;

      GradientTool.category = '';

      GradientTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'default'
      };

      GradientTool.handleSize = 5;

      function GradientTool() {
        GradientTool.__super__.constructor.call(this, false);
        this.handles = [];
        this.radial = false;
        return;
      }

      GradientTool.prototype.getDefaultGradient = function(color) {
        var bounds, firstColor, gradient, secondColor;
        if (R.selectedItems.length === 1) {
          bounds = R.selectedItems[0].getBounds();
        } else {
          bounds = P.view.bounds.scale(0.25);
        }
        color = color != null ? new Color(color) : Utils.Array.random(R.defaultColor);
        firstColor = color.clone();
        firstColor.alpha = 0.2;
        secondColor = color.clone();
        secondColor.alpha = 0.8;
        gradient = {
          origin: bounds.topLeft,
          destination: bounds.bottomRight,
          gradient: {
            stops: [
              {
                color: 'red',
                rampPoint: 0
              }, {
                color: 'blue',
                rampPoint: 1
              }
            ],
            radial: false
          }
        };
        return gradient;
      };

      GradientTool.prototype.initialize = function(updateGradient, updateParameters) {
        var color, delta, destination, handle, location, origin, position, stop, value, _i, _len, _ref, _ref1, _ref2;
        if (updateGradient == null) {
          updateGradient = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        value = this.controller.getValue();
        if ((value != null ? value.gradient : void 0) == null) {
          value = this.getDefaultGradient(value);
        }
        if ((_ref = this.group) != null) {
          _ref.remove();
        }
        this.handles = [];
        this.radial = (_ref1 = value.gradient) != null ? _ref1.radial : void 0;
        this.group = new P.Group();
        origin = new P.Point(value.origin);
        destination = new P.Point(value.destination);
        delta = destination.subtract(origin);
        _ref2 = value.gradient.stops;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          stop = _ref2[_i];
          color = new Color(stop.color != null ? stop.color : stop[0]);
          location = parseFloat(stop.rampPoint != null ? stop.rampPoint : stop[1]);
          position = origin.add(delta.multiply(location));
          handle = this.createHandle(position, location, color, true);
          if (location === 0) {
            this.startHandle = handle;
          }
          if (location === 1) {
            this.endHandle = handle;
          }
        }
        if (this.startHandle == null) {
          this.startHandle = this.createHandle(origin, 0, 'red');
        }
        if (this.endHandle == null) {
          this.endHandle = this.createHandle(destination, 1, 'blue');
        }
        this.line = new P.Path();
        this.line.add(this.startHandle.position);
        this.line.add(this.endHandle.position);
        this.group.addChild(this.line);
        this.line.sendToBack();
        this.line.strokeColor = R.selectionBlue;
        this.line.strokeWidth = 1;
        R.selectionLayer.addChild(this.group);
        this.selectHandle(this.startHandle);
        if (updateGradient) {
          this.updateGradient(updateParameters);
        }
      };

      GradientTool.prototype.select = function(deselectItems, updateParameters) {
        var _ref;
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        if (R.selectedTool === this) {
          return;
        }
        R.previousTool = R.selectedTool;
        if ((_ref = R.selectedTool) != null) {
          _ref.deselect();
        }
        R.selectedTool = this;
        this.initialize(true, updateParameters);
      };

      GradientTool.prototype.remove = function() {
        var _ref;
        if ((_ref = this.group) != null) {
          _ref.remove();
        }
        this.handles = [];
        this.startHandle = null;
        this.endHandle = null;
        this.line = null;
        this.controller = null;
      };

      GradientTool.prototype.deselect = function() {
        this.remove();
      };

      GradientTool.prototype.selectHandle = function(handle) {
        var _ref;
        if ((_ref = this.selectedHandle) != null) {
          _ref.selected = false;
        }
        handle.selected = true;
        this.selectedHandle = handle;
        this.controller.setColor(handle.fillColor.toCSS());
      };

      GradientTool.prototype.colorChange = function(color) {
        this.selectedHandle.fillColor = color;
        this.updateGradient();
      };

      GradientTool.prototype.setRadial = function(value) {
        this.select();
        this.radial = value;
        this.updateGradient();
      };

      GradientTool.prototype.updateGradient = function(updateParameters) {
        var gradient, handle, stops, _i, _len, _ref;
        if (updateParameters == null) {
          updateParameters = true;
        }
        if ((this.startHandle == null) || (this.endHandle == null)) {
          return;
        }
        stops = [];
        _ref = this.handles;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handle = _ref[_i];
          stops.push([handle.fillColor, handle.location]);
        }
        gradient = {
          origin: this.startHandle.position,
          destination: this.endHandle.position,
          gradient: {
            stops: stops,
            radial: this.radial
          }
        };
        console.log(JSON.stringify(gradient));
        if (updateParameters) {
          this.controller.onChange(gradient);
        }
      };

      GradientTool.prototype.createHandle = function(position, location, color, initialization) {
        var handle;
        if (initialization == null) {
          initialization = false;
        }
        handle = new P.Path.Circle(position, this.constructor.handleSize);
        handle.name = 'handle';
        this.group.addChild(handle);
        handle.strokeColor = R.selectionBlue;
        handle.strokeWidth = 1;
        handle.fillColor = color;
        handle.location = location;
        this.handles.push(handle);
        if (!initialization) {
          this.selectHandle(handle);
          this.updateGradient();
        }
        return handle;
      };

      GradientTool.prototype.addHandle = function(event, hitResult) {
        var offset, point;
        offset = hitResult.location.offset;
        point = this.line.getPointAt(offset);
        this.createHandle(point, offset / this.line.length, this.controller.colorInputJ.val());
      };

      GradientTool.prototype.removeHandle = function(handle) {
        if (handle === this.startHandle || handle === this.endHandle) {
          return;
        }
        Utils.Array.remove(this.handles, handle);
        handle.remove();
        this.updateGradient();
      };

      GradientTool.prototype.doubleClick = function(event) {
        var hitResult, point;
        point = P.view.viewToProject(new P.Point(event.pageX, event.pageY));
        hitResult = this.group.hitTest(point);
        if (hitResult) {
          if (hitResult.item === this.line) {
            this.addHandle(event, hitResult);
          } else if (hitResult.item.name === 'handle') {
            this.removeHandle(hitResult.item);
          }
        }
      };

      GradientTool.prototype.begin = function(event) {
        var hitResult;
        hitResult = this.group.hitTest(event.point);
        if (hitResult) {
          if (hitResult.item.name === 'handle') {
            this.selectHandle(hitResult.item);
            this.dragging = true;
          }
        }
      };

      GradientTool.prototype.update = function(event) {
        var handle, lineLength, _i, _len, _ref;
        if (this.dragging) {
          if (this.selectedHandle === this.startHandle || this.selectedHandle === this.endHandle) {
            this.selectedHandle.position.x += event.delta.x;
            this.selectedHandle.position.y += event.delta.y;
            this.line.firstSegment.point = this.startHandle.position;
            this.line.lastSegment.point = this.endHandle.position;
            lineLength = this.line.length;
            _ref = this.handles;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              handle = _ref[_i];
              handle.position = this.line.getPointAt(handle.location * lineLength);
            }
          } else {
            this.selectedHandle.position = this.line.getNearestPoint(event.point);
            this.selectedHandle.location = this.line.getOffsetOf(this.selectedHandle.position) / this.line.length;
          }
          this.updateGradient();
        }
      };

      GradientTool.prototype.end = function(event) {
        this.dragging = false;
      };

      return GradientTool;

    })(Tool);
    Tool.Gradient = GradientTool;
    return GradientTool;
  });

}).call(this);

//# sourceMappingURL=GradientTool.map
