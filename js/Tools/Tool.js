// Generated by CoffeeScript 1.7.1
(function() {
  define(['Sidebar'], function(Sidebar) {
    var Tool;
    Tool = (function() {
      Tool.label = Tool.name;

      Tool.description = null;

      Tool.iconURL = null;

      Tool.favorite = true;

      Tool.category = null;

      Tool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'default'
      };

      Tool.drawItems = false;


      /*
      		parameters =
      			'First folder':
      				firstParameter:
      					type: 'slider' 									# type is only required when adding a color (then it must be 'color') or a string input (then it must be 'string')
      																	 * if type is 'string' and there is no onChange nor onFinishChange callback:
      																	 * the default onChange callback will be called on onFinishChange since we often want to update only when the change is finished
      																	 * to override this behaviour, define both onChange and onFinishChange methods
      					label: 'Name of the parameter'					# label of the controller (name displayed in the gui)
      					default: 0 										# default value
      					step: 5 										# values will be incremented/decremented by step
      					min: 0 											# minimum value
      					max: 100 										# maximum value
      					simplified: 0 									# value during the simplified mode (useful to quickly draw an RPath, for example when modifying a curve)
      					defaultFunction: () -> 							# called to get a default value
      					onChange: (value)->  							# called when controller changes
      					onFinishChange: (value)-> 						# called when controller finishes change
      					setValue: (value)-> 							# called on set value of controller
      					defaultCheck: true 								# checked/activated by default or not
      					initializeController: (controller)->			# called just after controller is added to dat.gui, enables to customize the gui and add functionalities
      				secondParameter:
      					type: 'slider'
      					label: 'Second parameter'
      					value: 1
      					min: 0
      					max: 10
      			'Second folder':
      				thirdParameter:
      					type: 'slider'
      					label: 'Third parameter'
      					value: 1
      					min: 0
      					max: 10
       */

      Tool.initializeParameters = function() {
        return {};
      };

      Tool.parameters = Tool.initializeParameters();

      function Tool(createButton) {
        if (createButton) {
          this.createButton();
        }
        return;
      }

      Tool.prototype.createButton = function() {
        var popoverOptions;
        this.btn = new Sidebar.Button(this.constructor.label, this.constructor.iconURL, this.constructor.favorite, this.constructor.category);
        this.btn.btnJ.click((function(_this) {
          return function() {
            return _this.select();
          };
        })(this));
        popoverOptions = {
          placement: 'right',
          container: 'body',
          trigger: 'hover',
          delay: {
            show: 500,
            hide: 100
          }
        };
        if (this.constructor.description == null) {
          popoverOptions.content = this.constructor.label;
        } else {
          popoverOptions.title = this.constructor.label;
          popoverOptions.content = this.constructor.description;
        }
        this.btnJ.popover(popoverOptions);
      };

      Tool.prototype.select = function(deselectItems, updateParameters) {
        var _ref;
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        if (R.selectedTool === this) {
          return;
        }
        R.previousTool = R.selectedTool;
        if ((_ref = R.selectedTool) != null) {
          _ref.deselect();
        }
        R.selectedTool = this;
        this.updateCursor();
        if (deselectItems) {
          Tool.Select.deselectAll();
        }
        if (updateParameters) {
          this.updateParameters();
        }
      };

      Tool.prototype.updateParameters = function() {
        R.controllerManager.setSelectedTool(this.constructor);
      };

      Tool.prototype.updateCursor = function() {
        if (this.constructor.cursor.icon != null) {
          R.stageJ.css('cursor', 'url(static/images/cursors/' + this.constructor.cursor.icon + '.png) ' + this.cursor.position.x + ' ' + this.constructor.cursor.position.y + ',' + this.constructor.cursor.name);
        } else {
          R.stageJ.css('cursor', this.constructor.cursor.name);
        }
      };

      Tool.prototype.deselect = function() {};

      Tool.prototype.begin = function(event) {};

      Tool.prototype.update = function(event) {};

      Tool.prototype.move = function(event) {};

      Tool.prototype.end = function(event) {};

      Tool.prototype.keyUp = function(event) {};

      Tool.prototype.disableSnap = function() {
        return false;
      };

      return Tool;

    })();
    return Tool;
  });

}).call(this);

//# sourceMappingURL=Tool.map
