// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Tools/Tool'], function(Tool) {
    var CarTool;
    CarTool = (function(_super) {
      __extends(CarTool, _super);

      CarTool.label = 'Car';

      CarTool.description = '';

      CarTool.iconURL = 'car.png';

      CarTool.favorite = true;

      CarTool.category = '';

      CarTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'default'
      };

      CarTool.initializeParameters = function() {
        var parameters;
        parameters = {
          'Car': {
            speed: {
              type: 'string',
              label: 'Speed',
              "default": '0',
              addController: true,
              onChange: function() {}
            },
            volume: {
              type: 'slider',
              label: 'Volume',
              "default": 1,
              min: 0,
              max: 10,
              onChange: function(value) {
                var sound;
                if (R.selectedTool.constructor.name === "CarTool") {
                  sound = R.Tools.car.sound;
                  if ((sound != null) && value > 0) {
                    if (!sound.isPlaying) {
                      sound.play();
                      sound.setLoopStart(3.26);
                      sound.setLoopEnd(5.22);
                    }
                    sound.setVolume(0.1 * value);
                  } else {
                    sound.stop();
                  }
                }
              }
            }
          }
        };
        return parameters;
      };

      CarTool.parameters = CarTool.initializeParameters();

      function CarTool() {
        CarTool.__super__.constructor.call(this, true);
        this.constructor.car = this;
        return;
      }

      CarTool.prototype.select = function(deselectItems, updateParameters) {
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        CarTool.__super__.select.apply(this, arguments);
        this.car = new P.Raster("/static/images/car.png");
        R.view.carLayer.addChild(this.car);
        this.car.position = P.view.center;
        this.car.speed = 0;
        this.car.direction = new P.Point(0, -1);
        this.car.onLoad = function() {
          console.log('car loaded');
        };
        this.car.previousSpeed = 0;
        this.sound = new Sound(['/static/sounds/viper.ogg']);
        this.sound.setVolume(0.1);
        this.sound.play(0);
        this.sound.setLoopStart(3.26);
        this.sound.setLoopEnd(5.22);
        this.lastUpdate = Date.now();
      };

      CarTool.prototype.deselect = function() {
        CarTool.__super__.deselect.call(this);
        this.car.remove();
        this.car = null;
        this.sound.stop();
      };

      CarTool.prototype.onFrame = function() {
        var maxRate, maxSpeed, minRate, minSpeed, rate;
        if (this.car == null) {
          return;
        }
        minSpeed = 0.05;
        maxSpeed = 100;
        if (Key.isDown('right')) {
          this.car.direction.angle += 5;
        }
        if (Key.isDown('left')) {
          this.car.direction.angle -= 5;
        }
        if (Key.isDown('up')) {
          if (this.car.speed < maxSpeed) {
            this.car.speed++;
          }
        } else if (Key.isDown('down')) {
          if (this.car.speed > -maxSpeed) {
            this.car.speed--;
          }
        } else {
          this.car.speed *= 0.9;
          if (Math.abs(this.car.speed) < minSpeed) {
            this.car.speed = 0;
          }
        }
        minRate = 0.25;
        maxRate = 3;
        rate = minRate + Math.abs(this.car.speed) / maxSpeed * (maxRate - minRate);
        this.sound.setRate(rate);
        this.car.previousSpeed = this.car.speed;
        this.constructor.parameters['Car'].speed.controller.setValue(this.car.speed.toFixed(2), false);
        this.car.rotation = this.car.direction.angle + 90;
        if (Math.abs(this.car.speed) > minSpeed) {
          this.car.position = this.car.position.add(this.car.direction.multiply(this.car.speed));
          View.moveTo(this.car.position);
        }
        if (Date.now() - this.lastUpdate > 150) {
          if (R.me != null) {
            R.socket.emit("car move", R.me, this.car.position, this.car.rotation, this.car.speed);
          }
          this.lastUpdate = Date.now();
        }
      };

      CarTool.prototype.keyUp = function(event) {
        switch (event.key) {
          case 'escape':
            R.Tools.move.select();
        }
      };

      return CarTool;

    })(Tool);
    R.Tools.Car = CarTool;
    return CarTool;
  });

}).call(this);
