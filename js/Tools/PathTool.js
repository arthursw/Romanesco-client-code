// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['utils', 'RTool'], function(utils, RTool) {
    var PathTool;
    PathTool = (function(_super) {
      __extends(PathTool, _super);

      PathTool.rname = '';

      PathTool.description = '';

      PathTool.iconURL = '';

      PathTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'crosshair'
      };

      function PathTool(RPath, justCreated) {
        var favorite, _ref;
        this.RPath = RPath;
        if (justCreated == null) {
          justCreated = false;
        }
        this.name = this.RPath.rname;
        this.constructor.description = this.RPath.rdescription;
        this.constructor.iconURL = this.RPath.iconURL;
        this.constructor.category = this.RPath.category;
        if (justCreated && (g.tools[this.name] != null)) {
          g[this.RPath.constructor.name] = this.RPath;
          g.tools[this.name].remove();
          delete g.tools[this.name];
          g.lastPathCreated = this.RPath;
        }
        this.btnJ = g.allToolsJ.find('li[data-name="' + this.name + '"]');
        if (this.btnJ.length === 0) {
          favorite = justCreated || ((_ref = g.favoriteTools) != null ? _ref.indexOf(this.name) : void 0) >= 0;
          this.btnJ = new Sidebar.Button(this.name, this.RPath.iconURL, favorite, this.RPath.category);
        } else {
          this.btnJ.off("click");
        }
        if (this.name === 'Precise path') {
          this.RPath.iconURL = null;
        }
        this.cursor = this.RPath.cursor;
        PathTool.__super__.constructor.call(this, this.RPath.rname, false);
        if (justCreated) {
          this.select();
        }
        return;
      }

      PathTool.prototype.remove = function() {
        this.btnJ.remove();
      };

      PathTool.prototype.select = function(deselectItems, updateParameters) {
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        g.rasterizer.drawItems();
        PathTool.__super__.select.apply(this, arguments);
        g.tool.onMouseMove = this.move;
      };

      PathTool.prototype.updateParameters = function() {
        g.controllerManager.setSelectedTool(this.RPath);
      };

      PathTool.prototype.deselect = function() {
        PathTool.__super__.deselect.call(this);
        this.finish();
        g.tool.onMouseMove = null;
      };

      PathTool.prototype.begin = function(event, from, data) {
        var _ref;
        if (from == null) {
          from = g.me;
        }
        if (data == null) {
          data = null;
        }
        if (event.event.which === 2) {
          return;
        }
        if (100 * view.zoom < 10) {
          g.romanesco_alert("You can not draw path at a zoom smaller than 10.", "Info");
          return;
        }
        if (!((g.currentPaths[from] != null) && ((_ref = g.currentPaths[from].data) != null ? _ref.polygonMode : void 0))) {
          g.deselectAll();
          g.currentPaths[from] = new this.RPath(Date.now(), data);
        }
        g.currentPaths[from].beginCreate(event.point, event, false);
        if ((g.me != null) && from === g.me) {
          data = g.currentPaths[from].data;
          data.id = g.currentPaths[from].id;
          g.chatSocket.emit("bounce", {
            tool: this.name,
            "function": "begin",
            "arguments": [event, g.me, data]
          });
        }
      };

      PathTool.prototype.update = function(event, from) {
        if (from == null) {
          from = g.me;
        }
        g.currentPaths[from].updateCreate(event.point, event, false);
        if ((g.me != null) && from === g.me) {
          g.chatSocket.emit("bounce", {
            tool: this.name,
            "function": "update",
            "arguments": [event, g.me]
          });
        }
      };

      PathTool.prototype.move = function(event) {
        var _base, _ref, _ref1;
        if ((_ref = g.currentPaths[g.me]) != null ? (_ref1 = _ref.data) != null ? _ref1.polygonMode : void 0 : void 0) {
          if (typeof (_base = g.currentPaths[g.me]).createMove === "function") {
            _base.createMove(event);
          }
        }
      };

      PathTool.prototype.createPath = function(event, from) {
        var path;
        path = g.currentPaths[from];
        if (!path.group) {
          return;
        }
        if ((g.me != null) && from === g.me) {
          if ((g.me != null) && from === g.me) {
            g.chatSocket.emit("bounce", {
              tool: this.name,
              "function": "createPath",
              "arguments": [event, g.me]
            });
          }
          path.save(true);
          path.select(false);
        } else {
          path.endCreate(event.point, event);
        }
        delete g.currentPaths[from];
      };

      PathTool.prototype.end = function(event, from) {
        var path, _ref;
        if (from == null) {
          from = g.me;
        }
        path = g.currentPaths[from];
        path.endCreate(event.point, event, false);
        if (!((_ref = path.data) != null ? _ref.polygonMode : void 0)) {
          this.createPath(event, from);
        }
      };

      PathTool.prototype.finish = function(from) {
        var _ref, _ref1;
        if (from == null) {
          from = g.me;
        }
        if (!((_ref = g.currentPaths[g.me]) != null ? (_ref1 = _ref.data) != null ? _ref1.polygonMode : void 0 : void 0)) {
          return false;
        }
        g.currentPaths[from].finish();
        this.createPath(event, from);
        return true;
      };

      PathTool.prototype.keyUp = function(event) {
        var finishingPath;
        switch (event.key) {
          case 'enter':
            if (typeof this.finish === "function") {
              this.finish();
            }
            break;
          case 'escape':
            finishingPath = typeof this.finish === "function" ? this.finish() : void 0;
            if (!finishingPath) {
              g.deselectAll();
            }
        }
      };

      return PathTool;

    })(RTool);
    return PathTool;
  });

}).call(this);

//# sourceMappingURL=PathTool.map
