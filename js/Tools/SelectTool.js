// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['utils', 'RTool'], function(utils, RTool) {
    var SelectTool;
    SelectTool = (function(_super) {
      __extends(SelectTool, _super);

      SelectTool.rname = 'Select';

      SelectTool.description = '';

      SelectTool.iconURL = 'cursor.png';

      SelectTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'crosshair',
        icon: 'cursor'
      };

      SelectTool.hitOptions = {
        stroke: true,
        fill: true,
        handles: true,
        segments: true,
        curves: true,
        selected: true,
        tolerance: 5
      };

      function SelectTool() {
        SelectTool.__super__.constructor.call(this, true);
        this.selectedItem = null;
        return;
      }

      SelectTool.prototype.select = function(deselectItems, updateParameters) {
        if (deselectItems == null) {
          deselectItems = false;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        SelectTool.__super__.select.call(this, false, updateParameters);
      };

      SelectTool.prototype.updateParameters = function() {
        g.controllerManager.updateParametersForSelectedItems();
      };

      SelectTool.prototype.createSelectionRectangle = function(event) {
        var bounds, item, itemsToHighlight, name, rectangle, rectanglePath, _ref;
        rectangle = new Rectangle(event.downPoint, event.point);
        if (g.currentPaths[g.me] != null) {
          g.updatePathRectangle(g.currentPaths[g.me], rectangle);
        } else {
          rectanglePath = new Path.Rectangle(rectangle);
          rectanglePath.name = 'select tool selection rectangle';
          rectanglePath.strokeColor = g.selectionBlue;
          rectanglePath.strokeScaling = false;
          rectanglePath.dashArray = [10, 4];
          g.selectionLayer.addChild(rectanglePath);
          g.currentPaths[g.me] = rectanglePath;
        }
        itemsToHighlight = [];
        _ref = g.items;
        for (name in _ref) {
          item = _ref[name];
          item.unhighlight();
          bounds = item.getBounds();
          if (bounds.intersects(rectangle)) {
            item.highlight();
            console.log(item.highlightRectangle.index);
          }
          if (rectangle.area === 0) {
            break;
          }
        }
      };

      SelectTool.prototype.begin = function(event) {
        var hitResult, name, path, _base, _ref, _ref1, _ref2;
        if (event.event.which === 2) {
          return;
        }
        console.log('begin select');
        g.logElapsedTime();
        _ref = g.paths;
        for (name in _ref) {
          path = _ref[name];
          path.prepareHitTest();
        }
        hitResult = g.project.hitTest(event.point, this.constructor.hitOptions);
        _ref1 = g.paths;
        for (name in _ref1) {
          path = _ref1[name];
          path.finishHitTest();
        }
        if (hitResult && (hitResult.item.controller != null)) {
          this.selectedItem = hitResult.item.controller;
          if (!event.modifiers.shift) {
            if (g.selectedItems.length > 0) {
              if (g.selectedItems.indexOf((_ref2 = hitResult.item) != null ? _ref2.controller : void 0) < 0) {
                g.commandManager.add(new g.DeselectCommand(), true);
              }
            }
          } else {
            g.tools['Screenshot'].checkRemoveScreenshotRectangle(hitResult.item.controller);
          }
          if (typeof (_base = hitResult.item.controller).beginSelect === "function") {
            _base.beginSelect(event);
          }
        } else {
          g.deselectAll();
          this.createSelectionRectangle(event);
        }
        g.logElapsedTime();
      };

      SelectTool.prototype.update = function(event) {
        if (!g.currentPaths[g.me] && (this.selectedItem != null)) {
          this.selectedItem.updateSelect(event);
        } else {
          this.createSelectionRectangle(event);
        }
      };

      SelectTool.prototype.end = function(event) {
        var child, i, item, itemsAreSiblings, itemsToSelect, lock, locksToSelect, name, parent, rectangle, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        if (!g.currentPaths[g.me]) {
          this.selectedItem.endSelect(event);
          this.selectedItem = null;
        } else {
          rectangle = new Rectangle(event.downPoint, event.point);
          itemsToSelect = [];
          locksToSelect = [];
          _ref = g.items;
          for (name in _ref) {
            item = _ref[name];
            if (item.getBounds().intersects(rectangle)) {
              if (g.RLock.prototype.isPrototypeOf(item)) {
                locksToSelect.push(item);
              } else {
                itemsToSelect.push(item);
              }
            }
          }
          if (itemsToSelect.length === 0) {
            itemsToSelect = locksToSelect;
          }
          if (itemsToSelect.length > 0) {
            itemsAreSiblings = true;
            parent = itemsToSelect.first().group.parent;
            for (_i = 0, _len = itemsToSelect.length; _i < _len; _i++) {
              item = itemsToSelect[_i];
              if (item.group.parent !== parent) {
                itemsAreSiblings = false;
                break;
              }
            }
            if (!itemsAreSiblings) {
              for (_j = 0, _len1 = locksToSelect.length; _j < _len1; _j++) {
                lock = locksToSelect[_j];
                _ref1 = lock.children();
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  child = _ref1[_k];
                  itemsToSelect.remove(child);
                }
              }
              itemsToSelect = itemsToSelect.concat(locksToSelect);
            }
            if (rectangle.area === 0) {
              itemsToSelect = [itemsToSelect.first()];
            }
            g.commandManager.add(new g.SelectCommand(itemsToSelect), true);
            i = itemsToSelect.length - 1;
            while (i >= 0) {
              item = itemsToSelect[i];
              if (!item.isSelected()) {
                itemsToSelect.remove(item);
              }
              i--;
            }
          }
          g.currentPaths[g.me].remove();
          delete g.currentPaths[g.me];
          _ref2 = g.items;
          for (name in _ref2) {
            item = _ref2[name];
            item.unhighlight();
          }
        }
        console.log('end select');
        g.logElapsedTime();
      };

      SelectTool.prototype.doubleClick = function(event) {
        var item, _i, _len, _ref;
        _ref = g.selectedItems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (typeof item.doubleClick === "function") {
            item.doubleClick(event);
          }
        }
      };

      SelectTool.prototype.disableSnap = function() {
        return g.currentPaths[g.me] != null;
      };

      SelectTool.prototype.keyUp = function(event) {
        var delta, item, selectedItems, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        if ((_ref = event.key) === 'left' || _ref === 'right' || _ref === 'up' || _ref === 'down') {
          delta = event.modifiers.shift ? 50 : event.modifiers.option ? 5 : 1;
        }
        switch (event.key) {
          case 'right':
            _ref1 = g.selectedItems;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              item = _ref1[_i];
              item.moveBy(new Point(delta, 0), true);
            }
            break;
          case 'left':
            _ref2 = g.selectedItems;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              item = _ref2[_j];
              item.moveBy(new Point(-delta, 0), true);
            }
            break;
          case 'up':
            _ref3 = g.selectedItems;
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              item = _ref3[_k];
              item.moveBy(new Point(0, -delta), true);
            }
            break;
          case 'down':
            _ref4 = g.selectedItems;
            for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
              item = _ref4[_l];
              item.moveBy(new Point(0, delta), true);
            }
            break;
          case 'escape':
            g.deselectAll();
            break;
          case 'delete':
          case 'backspace':
            selectedItems = g.selectedItems.slice();
            for (_m = 0, _len4 = selectedItems.length; _m < _len4; _m++) {
              item = selectedItems[_m];
              if (((_ref5 = item.selectionState) != null ? _ref5.segment : void 0) != null) {
                item.deletePointCommand();
              } else {
                item.deleteCommand();
              }
            }
        }
      };

      return SelectTool;

    })(RTool);
    return SelectTool;
  });

}).call(this);

//# sourceMappingURL=SelectTool.map
