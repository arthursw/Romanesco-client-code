// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['utils', 'zeroClipboard', 'Item/item', 'Item/lock', 'Item/div', 'Item/path', 'jquery', 'paper', 'bootstrap'], function(utils, ZeroClipboard) {
    var CodeTool, RTool, g;
    g = utils.g();
    RTool = (function() {
      RTool.rname = RTool.name;

      RTool.description = null;

      RTool.iconURL = null;

      RTool.favorite = true;

      RTool.category = null;

      RTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'default'
      };


      /*
      		parameters =
      			'First folder':
      				firstParameter:
      					type: 'slider' 									# type is only required when adding a color (then it must be 'color') or a string input (then it must be 'string')
      																	 * if type is 'string' and there is no onChange nor onFinishChange callback:
      																	 * the default onChange callback will be called on onFinishChange since we often want to update only when the change is finished
      																	 * to override this behaviour, define both onChange and onFinishChange methods
      					label: 'Name of the parameter'					# label of the controller (name displayed in the gui)
      					default: 0 										# default value
      					step: 5 										# values will be incremented/decremented by step
      					min: 0 											# minimum value
      					max: 100 										# maximum value
      					simplified: 0 									# value during the simplified mode (useful to quickly draw an RPath, for example when modifying a curve)
      					defaultFunction: () -> 							# called to get a default value
      					onChange: (value)->  							# called when controller changes
      					onFinishChange: (value)-> 						# called when controller finishes change
      					setValue: (value)-> 							# called on set value of controller
      					defaultCheck: true 								# checked/activated by default or not
      					initializeController: (controller)->			# called just after controller is added to dat.gui, enables to customize the gui and add functionalities
      				secondParameter:
      					type: 'slider'
      					label: 'Second parameter'
      					value: 1
      					min: 0
      					max: 10
      			'Second folder':
      				thirdParameter:
      					type: 'slider'
      					label: 'Third parameter'
      					value: 1
      					min: 0
      					max: 10
       */

      RTool.initializeParameters = function() {
        return {};
      };

      RTool.parameters = RTool.initializeParameters();

      function RTool(createButton) {
        g.tools[this.constructor.rname] = this;
        if (createButton) {
          this.createButton();
        }
        return;
      }

      RTool.prototype.createButton = function() {
        var popoverOptions;
        this.btn = new Sidebar.Button(this.constructor.rname, this.constructor.iconURL, this.constructor.favorite, this.constructor.category);
        this.btn.btnJ.click((function(_this) {
          return function() {
            return _this.select();
          };
        })(this));
        popoverOptions = {
          placement: 'right',
          container: 'body',
          trigger: 'hover',
          delay: {
            show: 500,
            hide: 100
          }
        };
        if (this.constructor.description == null) {
          popoverOptions.content = this.constructor.rname;
        } else {
          popoverOptions.title = this.constructor.rname;
          popoverOptions.content = this.constructor.description;
        }
        this.btnJ.popover(popoverOptions);
      };

      RTool.prototype.select = function(deselectItems, updateParameters) {
        var _ref;
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        if (g.selectedTool === this) {
          return;
        }
        g.previousTool = g.selectedTool;
        if ((_ref = g.selectedTool) != null) {
          _ref.deselect();
        }
        g.selectedTool = this;
        this.updateCursor();
        if (deselectItems) {
          g.deselectAll();
        }
        if (updateParameters) {
          this.updateParameters();
        }
      };

      RTool.prototype.updateParameters = function() {
        g.controllerManager.setSelectedTool(this.constructor);
      };

      RTool.prototype.updateCursor = function() {
        if (this.constructor.cursor.icon != null) {
          g.stageJ.css('cursor', 'url(static/images/cursors/' + this.constructor.cursor.icon + '.png) ' + this.cursor.position.x + ' ' + this.constructor.cursor.position.y + ',' + this.constructor.cursor.name);
        } else {
          g.stageJ.css('cursor', this.constructor.cursor.name);
        }
      };

      RTool.prototype.deselect = function() {};

      RTool.prototype.begin = function(event) {};

      RTool.prototype.update = function(event) {};

      RTool.prototype.move = function(event) {};

      RTool.prototype.end = function(event) {};

      RTool.prototype.keyUp = function(event) {};

      RTool.prototype.disableSnap = function() {
        return false;
      };

      return RTool;

    })();
    g.RTool = RTool;
    CodeTool = (function(_super) {
      __extends(CodeTool, _super);

      function CodeTool() {
        CodeTool.__super__.constructor.call(this, "Script");
        return;
      }

      CodeTool.prototype.select = function(deselectItems, updateParameters) {
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        CodeTool.__super__.select.apply(this, arguments);
        g.showEditor();
      };

      return CodeTool;

    })(RTool);
    g.CodeTool = CodeTool;
    g.initTools = function() {
      var defaultFavoriteTools, error, pathClass, pathTool, _i, _len, _ref;
      g.toolsJ = $(".tool-list");
      g.favoriteToolsJ = $("#FavoriteTools .tool-list");
      g.allToolsContainerJ = $("#AllTools");
      g.allToolsJ = g.allToolsContainerJ.find(".all-tool-list");
      g.favoriteTools = [];
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        try {
          g.favoriteTools = JSON.parse(localStorage.favorites);
        } catch (_error) {
          error = _error;
          console.log(error);
        }
      }
      defaultFavoriteTools = [g.PrecisePath, g.ThicknessPath, g.Meander, g.GeometricLines, g.RectangleShape, g.EllipseShape, g.StarShape, g.SpiralShape];
      while (g.favoriteTools.length < 8) {
        g.pushIfAbsent(g.favoriteTools, defaultFavoriteTools.pop().rname);
      }
      g.tools = {};
      new g.MoveTool();
      new g.CarTool();
      new g.SelectTool();
      new g.CodeTool();
      new g.LockTool(g.RLock);
      new g.TextTool(g.RText);
      new g.MediaTool(g.RMedia);
      new g.ScreenshotTool();
      new g.GradientTool();
      _ref = g.pathClasses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pathClass = _ref[_i];
        pathTool = new g.PathTool(pathClass);
      }
      g.tools['Move'].select();
      g.wacomPlugin = document.getElementById('wacomPlugin');
      if (g.wacomPlugin != null) {
        g.wacomPenAPI = wacomPlugin.penAPI;
        g.wacomTouchAPI = wacomPlugin.touchAPI;
        g.wacomPointerType = {
          0: 'Mouse',
          1: 'Pen',
          2: 'Puck',
          3: 'Eraser'
        };
      }
    };
  });

}).call(this);

//# sourceMappingURL=Tools.map
