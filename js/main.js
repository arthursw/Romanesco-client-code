// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils', 'paper', 'coffee', 'mainRasterizer', 'coordinateSystems', 'global', 'ajax', 'options', 'socket', 'command', 'item', 'div', 'lock', 'path', 'tools', 'mod', 'rasterizer', 'editor', 'sound', 'modal', 'jquery', 'jqueryUi', 'mousewheel', 'scrollbar', 'tween', 'typeahead', 'modal', 'ace', 'jqtree'], function(utils, paper, CoffeeScript) {
    var g, init, initPosition, initTools;
    g = utils.g();
    g.rasterizerMode = window.rasterizerMode;
    if (g.rasterizerMode) {
      g.initializeRasterizerMode();
    }

    /*
    	 * Romanesco documentation #
    
    	Romanesco is an experiment about freedom, creativity and collaboration.
    
    	tododoc
    	tododoc: define RItems
    
    	The source code is divided in files:
    	 - [main.coffee](http://main.html) which is where the initialization
    	 - [path.coffee](http://path.html)
    	 - etc
    
    	Notations:
    	 - override means that the method extends functionnalities of the inherited method (super is called at some point)
    	 - redefine means that it totally replace the method (super is never called)
     */
    g.modifyCity = function(event) {
      var buttonJ, isPublic, modal, name, parentJ, pk, updateCity;
      event.stopPropagation();
      buttonJ = $(this);
      parentJ = buttonJ.parents('tr:first');
      name = parentJ.attr('data-name');
      isPublic = parseInt(parentJ.attr('data-public'));
      pk = parentJ.attr('data-pk');
      updateCity = function(data) {
        var callback;
        callback = function(result) {
          var city, modal, modalBodyJ, rowJ;
          modal = g.RModal.getModalByTitle('Modify city');
          modal.hide();
          if (!g.checkError(result)) {
            return;
          }
          city = JSON.parse(result.city);
          g.romanesco_alert("City successfully renamed to: " + city.name, "info");
          modalBodyJ = g.RModal.getModalByTitle('Open city').modalBodyJ;
          rowJ = modalBodyJ.find('[data-pk="' + city._id.$oid + '"]');
          rowJ.attr('data-name', city.name);
          rowJ.attr('data-public', Number(city["public"] || 0));
          rowJ.find('.name').text(city.name);
          rowJ.find('.public').text(city["public"] ? 'Public' : 'Private');
        };
        Dajaxice.draw.updateCity(callback, {
          pk: data.data.pk,
          name: data.name,
          "public": data["public"]
        });
      };
      modal = g.RModal.createModal({
        title: 'Modify city',
        submit: updateCity,
        data: {
          pk: pk
        },
        postSubmit: 'load'
      });
      modal.addTextInput({
        name: 'name',
        label: 'Name',
        defaultValue: name,
        required: true,
        submitShortcut: true
      });
      modal.addCheckbox({
        name: 'public',
        label: 'Public',
        helpMessage: "Public cities will be accessible by anyone.",
        defaultValue: isPublic
      });
      modal.show();
    };
    g.loadCities = function(result) {
      var citiesList, city, deleteButtonJ, i, loadButtonJ, modal, modalBodyJ, modifyButtonJ, nameJ, publicCities, publicJ, rowJ, tableJ, tbodyJ, td1J, td2J, td3J, titleJ, userCities, _i, _j, _len, _len1, _ref;
      if (!g.checkError(result)) {
        return;
      }
      userCities = JSON.parse(result.userCities);
      publicCities = JSON.parse(result.publicCities);
      modal = g.RModal.getModalByTitle('Open city');
      modal.removeProgressBar();
      modalBodyJ = modal.modalBodyJ;
      _ref = [userCities, publicCities];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        citiesList = _ref[i];
        if (i === 0 && userCities.length > 0) {
          titleJ = $('<h3>').text('Your cities');
          modalBodyJ.append(titleJ);
        } else {
          titleJ = $('<h3>').text('Public cities');
          modalBodyJ.append(titleJ);
        }
        tableJ = $('<table>').addClass("table table-hover").css({
          width: "100%"
        });
        tbodyJ = $('<tbody>');
        for (_j = 0, _len1 = citiesList.length; _j < _len1; _j++) {
          city = citiesList[_j];
          rowJ = $("<tr>").attr('data-name', city.name).attr('data-owner', city.owner).attr('data-pk', city._id.$oid).attr('data-public', Number(city["public"] || 0));
          td1J = $('<td>');
          td2J = $('<td>');
          td3J = $('<td>');
          nameJ = $("<span class='name'>").text(city.name);
          td1J.append(nameJ);
          if (i === 0) {
            publicJ = $("<span class='public'>").text(city["public"] ? 'Public' : 'Private');
            td2J.append(publicJ);
            modifyButtonJ = $('<button class="btn btn-default">').text('Modify');
            modifyButtonJ.click(g.modifyCity);
            deleteButtonJ = $('<button class="btn  btn-default">').text('Delete');
            deleteButtonJ.click(function(event) {
              var name;
              event.stopPropagation();
              name = $(this).parents('tr:first').attr('data-name');
              Dajaxice.draw.deleteCity(g.checkError, {
                name: name
              });
            });
            td3J.append(modifyButtonJ);
            td3J.append(deleteButtonJ);
          }
          loadButtonJ = $('<button class="btn  btn-primary">').text('Load');
          loadButtonJ.click(function() {
            var name, owner;
            name = $(this).parents('tr:first').attr('data-name');
            owner = $(this).parents('tr:first').attr('data-owner');
            g.loadCity(name, owner);
          });
          td3J.append(loadButtonJ);
          rowJ.append(td1J, td2J, td3J);
          tbodyJ.append(rowJ);
          tableJ.append(tbodyJ);
          modalBodyJ.append(tableJ);
        }
      }
    };
    g.loadCityFromServer = function(result) {
      var city, _ref;
      if ((_ref = g.RModal.getModalByTitle('Create city')) != null) {
        _ref.hide();
      }
      if (!g.checkError(result)) {
        return;
      }
      city = JSON.parse(result.city);
      g.loadCity(city.name, city.owner);
    };
    g.loadCity = function(name, owner) {
      var _ref;
      if ((_ref = g.RModal.getModalByTitle('Open city')) != null) {
        _ref.hide();
      }
      g.unload();
      g.city = {
        owner: owner,
        name: name,
        site: null
      };
      g.load();
      g.updateHash();
    };
    initTools = function() {
      var defaultFavoriteTools, error, pathClass, pathTool, _i, _len, _ref;
      g.toolsJ = $(".tool-list");
      g.toolsJ.find("[data-name='Create']").click(function() {
        var modal, submit;
        submit = function(data) {
          Dajaxice.draw.createCity(g.loadCityFromServer, {
            name: data.name,
            "public": data["public"]
          });
        };
        modal = g.RModal.createModal({
          title: 'Create city',
          submit: submit,
          postSubmit: 'load'
        });
        modal.addTextInput({
          label: "City name",
          name: 'name',
          required: true,
          submitShortcut: true,
          placeholder: 'Paris'
        });
        modal.addCheckbox({
          label: "Public",
          name: 'public',
          helpMessage: "Public cities will be accessible by anyone.",
          defaultValue: true
        });
        modal.show();
      });
      g.toolsJ.find("[data-name='Open']").click(function() {
        var modal;
        modal = g.RModal.createModal({
          title: 'Open city',
          name: 'open-city'
        });
        modal.modalBodyJ.find('.modal-footer').hide();
        modal.addProgressBar();
        modal.show();
        Dajaxice.draw.loadCities(g.loadCities);
      });
      g.favoriteToolsJ = $("#FavoriteTools .tool-list");
      g.allToolsContainerJ = $("#AllTools");
      g.allToolsJ = g.allToolsContainerJ.find(".all-tool-list");
      g.favoriteTools = [];
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        try {
          g.favoriteTools = JSON.parse(localStorage.favorites);
        } catch (_error) {
          error = _error;
          console.log(error);
        }
      }
      defaultFavoriteTools = [g.PrecisePath, g.ThicknessPath, g.Meander, g.GeometricLines, g.RectangleShape, g.EllipseShape, g.StarShape, g.SpiralShape];
      while (g.favoriteTools.length < 8) {
        g.pushIfAbsent(g.favoriteTools, defaultFavoriteTools.pop().rname);
      }
      g.tools = {};
      new g.MoveTool();
      new g.CarTool();
      new g.SelectTool();
      new g.CodeTool();
      new g.LockTool(g.RLock);
      new g.TextTool(g.RText);
      new g.MediaTool(g.RMedia);
      new g.ScreenshotTool();
      new g.GradientTool();
      g.modules = {};
      _ref = g.pathClasses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pathClass = _ref[_i];
        pathTool = new g.PathTool(pathClass);
        g.modules[pathTool.name] = {
          name: pathTool.name,
          iconURL: pathTool.RPath.iconURL,
          source: pathTool.RPath.source,
          description: pathTool.RPath.description,
          owner: 'Romanesco',
          thumbnailURL: pathTool.RPath.thumbnailURL,
          accepted: true,
          coreModule: true,
          category: pathTool.RPath.category
        };
      }
      g.initializeModules();
      g.tools['Move'].select();
      g.wacomPlugin = document.getElementById('wacomPlugin');
      if (g.wacomPlugin != null) {
        g.wacomPenAPI = wacomPlugin.penAPI;
        g.wacomTouchAPI = wacomPlugin.touchAPI;
        g.wacomPointerType = {
          0: 'Mouse',
          1: 'Pen',
          2: 'Puck',
          3: 'Eraser'
        };
      }
    };
    initPosition = function() {
      var box, boxRectangle, boxString, br, controller, folder, folderName, loadEntireArea, planet, pos, site, siteString, tl, _i, _len, _ref, _ref1;
      if (g.rasterizerMode) {
        return;
      }
      g.city = {
        owner: g.canvasJ.attr("data-owner"),
        city: g.canvasJ.attr("data-city"),
        site: g.canvasJ.attr("data-site")
      };
      boxString = g.canvasJ.attr("data-box");
      if (!boxString || boxString.length === 0) {
        window.onhashchange();
        return;
      }
      box = JSON.parse(boxString);
      planet = new Point(box.planetX, box.planetY);
      tl = g.posOnPlanetToProject(box.box.coordinates[0][0], planet);
      br = g.posOnPlanetToProject(box.box.coordinates[0][2], planet);
      boxRectangle = new Rectangle(tl, br);
      pos = boxRectangle.center;
      g.RMoveTo(pos);
      loadEntireArea = g.canvasJ.attr("data-load-entire-area");
      if (loadEntireArea) {
        g.entireArea = boxRectangle;
        g.load(boxRectangle);
      }
      siteString = g.canvasJ.attr("data-site");
      site = JSON.parse(siteString);
      if (site.restrictedArea) {
        g.restrictedArea = boxRectangle;
      }
      g.tools['Select'].select();
      if (site.disableToolbar) {
        g.sidebarJ.hide();
      } else {
        g.sidebarJ.find("div.panel.panel-default:not(:last)").hide();
        _ref = g.gui.__folders;
        for (folderName in _ref) {
          folder = _ref[folderName];
          _ref1 = folder.__controllers;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            controller = _ref1[_i];
            if (controller.name !== 'Zoom') {
              folder.remove(controller);
              folder.__controllers.remove(controller);
            }
          }
          if (folder.__controllers.length === 0) {
            g.gui.removeFolder(folderName);
          }
        }
        g.sidebarHandleJ.click();
      }
    };
    init = function() {
      var url, xmlhttp;
      g.romanescoURL = 'http://localhost:8000/';
      g.stageJ = $("#stage");
      g.sidebarJ = $("#sidebar");
      g.canvasJ = g.stageJ.find("#canvas");
      g.canvas = g.canvasJ[0];
      g.canvas.width = window.innerWidth;
      g.canvas.height = window.innerHeight;
      g.context = g.canvas.getContext('2d');
      g.me = null;
      g.selectionLayer = null;
      g.updateTimeout = {};
      g.requestedCallbacks = {};
      g.restrictedArea = null;
      g.OSName = "Unknown OS";
      g.currentPaths = {};
      g.loadingBarTimeout = null;
      g.entireArea = null;
      g.entireAreas = [];
      g.loadedAreas = [];
      g.paths = new Object();
      g.items = new Object();
      g.locks = [];
      g.divs = [];
      g.sortedPaths = [];
      g.sortedDivs = [];
      g.animatedItems = [];
      g.cars = {};
      g.alerts = null;
      g.scale = 1000.0;
      g.previousPoint = null;
      g.draggingEditor = false;
      g.areasToUpdate = {};
      g.rastersToUpload = [];
      g.areasToRasterize = [];
      g.isUpdatingRasters = false;
      g.viewUpdated = false;
      g.currentDiv = null;
      g.areasToUpdateRectangles = {};
      g.catchErrors = false;
      g.previousMousePosition = null;
      g.initialMousePosition = null;
      g.previousViewPosition = null;
      g.backgroundRectangle = null;
      g.limitPathV = null;
      g.limitPathH = null;
      g.selectedItems = [];
      g.ignoreSockets = false;
      g.mousePosition = new Point();
      g.hiddenDivs = [];
      g.DajaxiceXMLHttpRequest = window.XMLHttpRequest;
      window.XMLHttpRequest = window.RXMLHttpRequest;
      g.itemListsJ = $("#RItems .layers");
      g.pathList = g.itemListsJ.find(".rPath-list");
      g.pathList.sortable({
        stop: g.zIndexSortStop,
        delay: 250
      });
      g.pathList.disableSelection();
      g.divList = g.itemListsJ.find(".rDiv-list");
      g.divList.sortable({
        stop: g.zIndexSortStop,
        delay: 250
      });
      g.divList.disableSelection();
      g.itemListsJ.find('.title').click(function(event) {
        $(this).parent().toggleClass('closed');
      });
      g.commandManager = new g.CommandManager();
      Dajaxice.setup({
        'default_exception_callback': function(error) {
          console.log('Dajaxice error!');
          g.romanesco_alert("Connection error", "error");
        }
      });
      if (navigator.appVersion.indexOf("Win") !== -1) {
        g.OSName = "Windows";
      }
      if (navigator.appVersion.indexOf("Mac") !== -1) {
        g.OSName = "MacOS";
      }
      if (navigator.appVersion.indexOf("X11") !== -1) {
        g.OSName = "UNIX";
      }
      if (navigator.appVersion.indexOf("Linux") !== -1) {
        g.OSName = "Linux";
      }
      paper.setup(g.canvas);
      g.project = project;
      g.mainLayer = project.activeLayer;
      g.mainLayer.name = 'main layer';
      g.debugLayer = new Layer();
      g.debugLayer.name = 'debug layer';
      g.carLayer = new Layer();
      g.carLayer.name = 'car layer';
      g.lockLayer = new Layer();
      g.lockLayer.name = 'lock layer';
      g.selectionLayer = new Layer();
      g.selectionLayer.name = 'selection layer';
      g.areasToUpdateLayer = new Layer();
      g.areasToUpdateLayer.name = 'areasToUpdateLayer';
      g.areasToUpdateLayer.visible = false;
      g.mainLayer.activate();
      paper.settings.hitTolerance = 5;
      g.grid = new Group();
      g.grid.name = 'grid group';
      view.zoom = 1;
      g.previousViewPosition = view.center;
      Point.prototype.toJSON = function() {
        return {
          x: this.x,
          y: this.y
        };
      };
      Point.prototype.exportJSON = function() {
        return JSON.stringify(this.toJSON());
      };
      Rectangle.prototype.toJSON = function() {
        return {
          x: this.x,
          y: this.y,
          width: this.width,
          height: this.height
        };
      };
      Rectangle.prototype.exportJSON = function() {
        return JSON.stringify(this.toJSON());
      };
      Rectangle.prototype.translate = function(point) {
        return new Rectangle(this.x + point.x, this.y + point.y, this.width, this.height);
      };
      Rectangle.prototype.moveSide = function(sideName, destination) {
        switch (sideName) {
          case 'left':
            this.x = destination;
            break;
          case 'right':
            this.x = destination - this.width;
            break;
          case 'top':
            this.y = destination;
            break;
          case 'bottom':
            this.y = destination - this.height;
        }
      };
      Rectangle.prototype.moveCorner = function(cornerName, destination) {
        switch (cornerName) {
          case 'topLeft':
            this.x = destination.x;
            this.y = destination.y;
            break;
          case 'topRight':
            this.x = destination.x - this.width;
            this.y = destination.y;
            break;
          case 'bottomRight':
            this.x = destination.x - this.width;
            this.y = destination.y - this.height;
            break;
          case 'bottomLeft':
            this.x = destination.x;
            this.y = destination.y - this.height;
        }
      };
      Rectangle.prototype.moveCenter = function(destination) {
        this.x = destination.x - this.width * 0.5;
        this.y = destination.y - this.height * 0.5;
      };
      Event.prototype.toJSON = function() {
        var event;
        event = {
          modifiers: this.modifiers,
          event: {
            which: this.event.which
          },
          point: this.point,
          downPoint: this.downPoint,
          delta: this.delta,
          middlePoint: this.middlePoint,
          type: this.type,
          count: this.count
        };
        return event;
      };
      Event.prototype.fromJSON = function(event) {
        if (event.point != null) {
          event.point = new Point(event.point);
        }
        if (event.downPoint != null) {
          event.downPoint = new Point(event.downPoint);
        }
        if (event.delta != null) {
          event.delta = new Point(event.delta);
        }
        if (event.middlePoint != null) {
          event.middlePoint = new Point(event.middlePoint);
        }
        return event;
      };
      g.alertsContainer = $("#Romanesco_alerts");
      g.alerts = [];
      g.currentAlert = -1;
      g.alertTimeOut = -1;
      g.alertsContainer.find(".btn-up").click(function() {
        return g.showAlert(g.currentAlert - 1);
      });
      g.alertsContainer.find(".btn-down").click(function() {
        return g.showAlert(g.currentAlert + 1);
      });
      g.sidebarHandleJ = g.sidebarJ.find(".sidebar-handle");
      g.sidebarHandleJ.click(function() {
        g.toggleSidebar();
      });
      g.sound = new g.RSound(['/static/sounds/viper.ogg']);
      xmlhttp = new RXMLHttpRequest();
      url = g.romanescoURL + "static/coffee/path.coffee";
      xmlhttp.onreadystatechange = function() {
        var classExpressions, classMap, className, end, expression, expressions, i, lines, pathClass, source, sources, start, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _ref3;
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
          sources = xmlhttp.responseText;
          lines = sources.split(/\n/);
          expressions = CoffeeScript.nodes(sources).expressions;
          classMap = {};
          _ref = g.pathClasses;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pathClass = _ref[_i];
            classMap[pathClass.name] = pathClass;
          }
          classExpressions = expressions[0].args[1].body.expressions;
          for (_j = 0, _len1 = classExpressions.length; _j < _len1; _j++) {
            expression = classExpressions[_j];
            className = (_ref1 = expression.variable) != null ? (_ref2 = _ref1.base) != null ? _ref2.value : void 0 : void 0;
            if ((className != null) && (classMap[className] != null) && (expression.locationData != null)) {
              start = expression.locationData.first_line;
              end = expression.locationData.last_line - 1;
              for (i = _k = start; start <= end ? _k <= end : _k >= end; i = start <= end ? ++_k : --_k) {
                lines[i] = lines[i].substring(1);
              }
              source = lines.slice(start, +end + 1 || 9e9).join("\n");
              source += "\ntool = new g.PathTool(" + className + ", true)";
              pathClass = classMap[className];
              pathClass.source = source;
              if ((_ref3 = g.modules[pathClass.rname]) != null) {
                _ref3.source = source;
              }
            }
          }
        }
      };
      xmlhttp.open("GET", url, true);
      xmlhttp.send();
      g.initializeRasterizers();
      if (!g.rasterizerMode) {
        g.initParameters();
        g.initCodeEditor();
        g.initSocket();
        initTools();
        $(".mCustomScrollbar").mCustomScrollbar({
          keyboard: false
        });
      } else {
        g.initToolsRasterizer();
      }
      initPosition();
      g.updateGrid();
      if (typeof window.setPageFullyLoaded === "function") {
        window.setPageFullyLoaded(true);
      }
    };
    $(document).ready(function() {
      var focusIsOnCanvas, mousedown, mousemove, mouseup;
      init();
      if (g.rasterizerMode) {
        return;
      }
      g.canvasJ.dblclick(function(event) {
        var _base;
        return typeof (_base = g.selectedTool).doubleClick === "function" ? _base.doubleClick(event) : void 0;
      });
      g.canvasJ.keydown(function(event) {
        if (event.key === 46) {
          event.preventDefault();
          return false;
        }
      });
      g.tool = new Tool();
      focusIsOnCanvas = function() {
        return $(document.activeElement).is("body");
      };
      g.tool.onMouseDown = function(event) {
        var _ref;
        if ((_ref = g.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          g.tool.onKeyUp({
            key: 'delete'
          });
          return;
        }
        $(document.activeElement).blur();
        g.selectedTool.begin(event);
      };
      g.tool.onMouseDrag = function(event) {
        var _ref;
        if ((_ref = g.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          return;
        }
        if (g.currentDiv != null) {
          return;
        }
        g.selectedTool.update(event);
      };
      g.tool.onMouseUp = function(event) {
        var _ref;
        if ((_ref = g.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          return;
        }
        if (g.currentDiv != null) {
          return;
        }
        g.selectedTool.end(event);
      };
      g.tool.onKeyDown = function(event) {
        if (!focusIsOnCanvas()) {
          return;
        }
        if (event.key === 'delete') {
          event.preventDefault();
          return false;
        }
        if (event.key === 'space' && g.selectedTool.name !== 'Move') {
          g.tools['Move'].select();
        }
      };
      g.tool.onKeyUp = function(event) {
        var _ref;
        if (!focusIsOnCanvas()) {
          return;
        }
        g.selectedTool.keyUp(event);
        switch (event.key) {
          case 'space':
            if ((_ref = g.previousTool) != null) {
              _ref.select();
            }
            break;
          case 'v':
            g.tools['Select'].select();
            break;
          case 't':
            g.showToolBox();
            break;
          case 'r':
            if (event.modifiers.shift) {
              g.rasterizer.rasterizeImmediately();
            }
        }
        event.preventDefault();
      };
      view.onFrame = function(event) {
        var car, direction, item, username, _base, _base1, _i, _len, _ref, _ref1;
        TWEEN.update(event.time);
        if (typeof (_base = g.rasterizer).updateLoadingBar === "function") {
          _base.updateLoadingBar(event.time);
        }
        if (typeof (_base1 = g.selectedTool).onFrame === "function") {
          _base1.onFrame(event);
        }
        _ref = g.animatedItems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.onFrame(event);
        }
        _ref1 = g.cars;
        for (username in _ref1) {
          car = _ref1[username];
          direction = new Point(1, 0);
          direction.angle = car.rotation - 90;
          car.position = car.position.add(direction.multiply(car.speed));
          if (Date.now() - car.rLastUpdate > 1000) {
            g.cars[username].remove();
            delete g.cars[username];
          }
        }
      };
      $(window).resize(function(event) {
        g.updateGrid();
        $(".mCustomScrollbar").mCustomScrollbar("update");
        view.update();
        g.canvasJ.width(window.innerWidth);
        g.canvasJ.height(window.innerHeight);
        view.viewSize = new Size(window.innerWidth, window.innerHeight);
      });
      mousedown = function(event) {
        var _base;
        switch (event.which) {
          case 2:
            g.tools['Move'].select();
            break;
          case 3:
            if (typeof (_base = g.selectedTool).finish === "function") {
              _base.finish();
            }
        }
        if (g.selectedTool.name === 'Move') {
          g.selectedTool.beginNative(event);
          return;
        }
        g.initialMousePosition = g.jEventToPoint(event);
        g.previousMousePosition = g.initialMousePosition.clone();
      };
      mousemove = function(event) {
        var paperEvent, _base;
        g.mousePosition.x = event.pageX;
        g.mousePosition.y = event.pageY;
        if (g.selectedTool.name === 'Move' && g.selectedTool.dragging) {
          g.selectedTool.updateNative(event);
          return;
        }
        g.RDiv.updateHiddenDivs(event);
        g.codeEditor.mousemove(event);
        if (g.currentDiv != null) {
          paperEvent = g.jEventToPaperEvent(event, g.previousMousePosition, g.initialMousePosition, 'mousemove');
          if (typeof (_base = g.currentDiv).updateSelect === "function") {
            _base.updateSelect(paperEvent);
          }
          g.previousMousePosition = paperEvent.point;
        }
      };
      mouseup = function(event) {
        var paperEvent, _base, _ref;
        if (g.stageJ.hasClass("has-tool-box") && !$(event.target).parents('.tool-box').length > 0) {
          g.hideToolBox();
        }
        g.codeEditor.mouseup(event);
        if (g.selectedTool.name === 'Move') {
          g.selectedTool.endNative(event);
          if (event.which === 2) {
            if ((_ref = g.previousTool) != null) {
              _ref.select();
            }
          }
          return;
        }
        if (g.currentDiv != null) {
          paperEvent = g.jEventToPaperEvent(event, g.previousMousePosition, g.initialMousePosition, 'mouseup');
          if (typeof (_base = g.currentDiv).endSelect === "function") {
            _base.endSelect(paperEvent);
          }
          g.previousMousePosition = paperEvent.point;
        }
      };
      g.stageJ.mousedown(mousedown);
      $(window).mousemove(mousemove);
      $(window).mouseup(mouseup);
      g.stageJ.mousewheel(function(event) {
        g.RMoveBy(new Point(-event.deltaX, event.deltaY));
      });
    });
  });

}).call(this);

//# sourceMappingURL=main.map
