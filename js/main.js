// Generated by CoffeeScript 1.7.1
(function() {
  define(['Tool', 'Path', 'Ajax', 'Options', 'Socket', 'Command', 'City', 'Code', 'Rasterizer', 'Grid', 'Sound', 'Modal'], function() {
    var g, init, initPosition, initTools;
    g = utils.g();
    R.rasterizerMode = window.rasterizerMode;
    if (R.rasterizerMode) {
      R.initializeRasterizerMode();
    }

    /*
    	 * Romanesco documentation #
    
    	Romanesco is an experiment about freedom, creativity and collaboration.
    
    	tododoc
    	tododoc: define RItems
    
    	The source code is divided in files:
    	 - [main.coffee](http://main.html) which is where the initialization
    	 - [path.coffee](http://path.html)
    	 - etc
    
    	Notations:
    	 - override means that the method extends functionnalities of the inherited method (super is called at some point)
    	 - redefine means that it totally replace the method (super is never called)
     */
    initTools = function() {
      var defaultFavoriteTools, error;
      R.toolsJ = $(".tool-list");
      R.toolsJ.find("[data-name='Create']").click(function() {
        var modal, submit;
        submit = function(data) {
          Dajaxice.draw.createCity(R.loadCityFromServer, {
            name: data.name,
            "public": data["public"]
          });
        };
        modal = R.RModal.createModal({
          title: 'Create city',
          submit: submit,
          postSubmit: 'load'
        });
        modal.addTextInput({
          label: "City name",
          name: 'name',
          required: true,
          submitShortcut: true,
          placeholder: 'Paris'
        });
        modal.addCheckbox({
          label: "Public",
          name: 'public',
          helpMessage: "Public cities will be accessible by anyone.",
          defaultValue: true
        });
        modal.show();
      });
      R.toolsJ.find("[data-name='Open']").click(function() {
        var modal;
        modal = R.RModal.createModal({
          title: 'Open city',
          name: 'open-city'
        });
        modal.modalBodyJ.find('.modal-footer').hide();
        modal.addProgressBar();
        modal.show();
        Dajaxice.draw.loadCities(R.loadCities);
      });
      R.favoriteToolsJ = $("#FavoriteTools .tool-list");
      R.allToolsContainerJ = $("#AllTools");
      R.allToolsJ = R.allToolsContainerJ.find(".all-tool-list");
      R.favoriteTools = [];
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        try {
          R.favoriteTools = JSON.parse(localStorage.favorites);
        } catch (_error) {
          error = _error;
          console.log(error);
        }
      }
      defaultFavoriteTools = [R.PrecisePath, R.ThicknessPath, R.Meander, R.GeometricLines, R.RectangleShape, R.EllipseShape, R.StarShape, R.SpiralShape];
      while (R.favoriteTools.length < 8) {
        Utils.Array.pushIfAbsent(R.favoriteTools, defaultFavoriteTools.pop().label);
      }
      R.tools['Move'].select();
      R.wacomPlugin = document.getElementById('wacomPlugin');
      if (R.wacomPlugin != null) {
        R.wacomPenAPI = wacomPlugin.penAPI;
        R.wacomTouchAPI = wacomPlugin.touchAPI;
        R.wacomPointerType = {
          0: 'Mouse',
          1: 'Pen',
          2: 'Puck',
          3: 'Eraser'
        };
      }
    };
    initPosition = function() {
      var box, boxRectangle, boxString, br, controller, folder, folderName, loadEntireArea, planet, pos, site, siteString, tl, _i, _len, _ref, _ref1;
      if (R.rasterizerMode) {
        return;
      }
      R.city = {
        owner: R.canvasJ.attr("data-owner"),
        city: R.canvasJ.attr("data-city"),
        site: R.canvasJ.attr("data-site")
      };
      boxString = R.canvasJ.attr("data-box");
      if (!boxString || boxString.length === 0) {
        window.onhashchange();
        return;
      }
      box = JSON.parse(boxString);
      planet = new P.Point(box.planetX, box.planetY);
      tl = R.posOnPlanetToProject(box.box.coordinates[0][0], planet);
      br = R.posOnPlanetToProject(box.box.coordinates[0][2], planet);
      boxRectangle = new P.Rectangle(tl, br);
      pos = boxRectangle.center;
      View.moveTo(pos);
      loadEntireArea = R.canvasJ.attr("data-load-entire-area");
      if (loadEntireArea) {
        R.entireArea = boxRectangle;
        R.load(boxRectangle);
      }
      siteString = R.canvasJ.attr("data-site");
      site = JSON.parse(siteString);
      if (site.restrictedArea) {
        R.restrictedArea = boxRectangle;
      }
      R.tools['Select'].select();
      if (site.disableToolbar) {
        R.sidebarJ.hide();
      } else {
        R.sidebarJ.find("div.panel.panel-default:not(:last)").hide();
        _ref = R.gui.__folders;
        for (folderName in _ref) {
          folder = _ref[folderName];
          _ref1 = folder.__controllers;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            controller = _ref1[_i];
            if (controller.name !== 'Zoom') {
              folder.remove(controller);
              folder.__controllers.remove(controller);
            }
          }
          if (folder.__controllers.length === 0) {
            R.gui.removeFolder(folderName);
          }
        }
        R.sidebarHandleJ.click();
      }
    };
    init = function() {
      R.romanescoURL = 'http://localhost:8000/';
      R.stageJ = $("#stage");
      R.sidebarJ = $("#sidebar");
      R.canvasJ = R.stageJ.find("#canvas");
      R.canvas = R.canvasJ[0];
      R.canvas.width = window.innerWidth;
      R.canvas.height = window.innerHeight;
      R.context = R.canvas.getContext('2d');
      R.me = null;
      R.selectionLayer = null;
      R.updateTimeout = {};
      R.requestedCallbacks = {};
      R.restrictedArea = null;
      R.OSName = "Unknown OS";
      R.currentPaths = {};
      R.loadingBarTimeout = null;
      R.entireArea = null;
      R.entireAreas = [];
      R.loadedAreas = [];
      R.paths = new Object();
      R.items = new Object();
      R.locks = [];
      R.divs = [];
      R.sortedPaths = [];
      R.sortedDivs = [];
      R.animatedItems = [];
      R.cars = {};
      R.alerts = null;
      R.scale = 1000.0;
      R.previousPoint = null;
      R.draggingEditor = false;
      R.areasToUpdate = {};
      R.rastersToUpload = [];
      R.areasToRasterize = [];
      R.isUpdatingRasters = false;
      R.viewUpdated = false;
      R.currentDiv = null;
      R.areasToUpdateRectangles = {};
      R.catchErrors = false;
      R.previousMousePosition = null;
      R.initialMousePosition = null;
      R.previousViewPosition = null;
      R.backgroundRectangle = null;
      R.limitPathV = null;
      R.limitPathH = null;
      R.selectedItems = [];
      R.ignoreSockets = false;
      R.mousePosition = new P.Point();
      R.hiddenDivs = [];
      R.itemListsJ = $("#RItems .layers");
      R.pathList = R.itemListsJ.find(".rPath-list");
      R.pathList.sortable({
        stop: Item.zIndexSortStop,
        delay: 250
      });
      R.pathList.disableSelection();
      R.divList = R.itemListsJ.find(".rDiv-list");
      R.divList.sortable({
        stop: Item.zIndexSortStop,
        delay: 250
      });
      R.divList.disableSelection();
      R.itemListsJ.find('.title').click(function(event) {
        $(this).parent().toggleClass('closed');
      });
      R.commandManager = new R.CommandManager();
      R.loader = new Loader();
      Dajaxice.setup({
        'default_exception_callback': function(error) {
          console.log('Dajaxice error!');
          R.alertManager.alert("Connection error", "error");
        }
      });
      if (navigator.appVersion.indexOf("Win") !== -1) {
        R.OSName = "Windows";
      }
      if (navigator.appVersion.indexOf("Mac") !== -1) {
        R.OSName = "MacOS";
      }
      if (navigator.appVersion.indexOf("X11") !== -1) {
        R.OSName = "UNIX";
      }
      if (navigator.appVersion.indexOf("Linux") !== -1) {
        R.OSName = "Linux";
      }
      paper.setup(R.canvas);
      R.project = project;
      R.mainLayer = P.project.activeLayer;
      R.mainLayer.name = 'main layer';
      R.debugLayer = new P.Layer();
      R.debugLayer.name = 'debug layer';
      R.carLayer = new P.Layer();
      R.carLayer.name = 'car layer';
      R.lockLayer = new P.Layer();
      R.lockLayer.name = 'lock layer';
      R.selectionLayer = new P.Layer();
      R.selectionLayer.name = 'selection layer';
      R.areasToUpdateLayer = new P.Layer();
      R.areasToUpdateLayer.name = 'areasToUpdateLayer';
      R.areasToUpdateLayer.visible = false;
      R.mainLayer.activate();
      paper.settings.hitTolerance = 5;
      R.grid = new P.Group();
      R.grid.name = 'grid group';
      P.view.zoom = 1;
      R.previousViewPosition = P.view.center;
      R.sidebarHandleJ = R.sidebarJ.find(".sidebar-handle");
      R.sidebarHandleJ.click(function() {
        R.toggleSidebar();
      });
      R.sound = new R.RSound(['/static/sounds/viper.ogg']);
      R.initializeRasterizers();
      if (!R.rasterizerMode) {
        R.initParameters();
        R.initSocket();
        initTools();
        $(".mCustomScrollbar").mCustomScrollbar({
          keyboard: false
        });
      } else {
        R.initToolsRasterizer();
      }
      initPosition();
      Grid.updateGrid();
      if (typeof window.setPageFullyLoaded === "function") {
        window.setPageFullyLoaded(true);
      }
    };
    $(document).ready(function() {
      var focusIsOnCanvas, mousedown, mousemove, mouseup;
      R.alertManager = new AlertManager();
      init();
      if (R.rasterizerMode) {
        return;
      }
      R.canvasJ.dblclick(function(event) {
        var _base;
        return typeof (_base = R.selectedTool).doubleClick === "function" ? _base.doubleClick(event) : void 0;
      });
      R.canvasJ.keydown(function(event) {
        if (event.key === 46) {
          event.preventDefault();
          return false;
        }
      });
      R.tool = new P.Tool();
      focusIsOnCanvas = function() {
        return $(document.activeElement).is("body");
      };
      R.tool.onMouseDown = function(event) {
        var _ref;
        if ((_ref = R.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          R.tool.onKeyUp({
            key: 'delete'
          });
          return;
        }
        $(document.activeElement).blur();
        R.selectedTool.begin(event);
      };
      R.tool.onMouseDrag = function(event) {
        var _ref;
        if ((_ref = R.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          return;
        }
        if (R.currentDiv != null) {
          return;
        }
        R.selectedTool.update(event);
      };
      R.tool.onMouseUp = function(event) {
        var _ref;
        if ((_ref = R.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          return;
        }
        if (R.currentDiv != null) {
          return;
        }
        R.selectedTool.end(event);
      };
      R.tool.onKeyDown = function(event) {
        if (!focusIsOnCanvas()) {
          return;
        }
        if (event.key === 'delete') {
          event.preventDefault();
          return false;
        }
        if (event.key === 'space' && R.selectedTool.name !== 'Move') {
          R.tools['Move'].select();
        }
      };
      R.tool.onKeyUp = function(event) {
        var _ref;
        if (!focusIsOnCanvas()) {
          return;
        }
        R.selectedTool.keyUp(event);
        switch (event.key) {
          case 'space':
            if ((_ref = R.previousTool) != null) {
              _ref.select();
            }
            break;
          case 'v':
            R.tools['Select'].select();
            break;
          case 't':
            R.showToolBox();
            break;
          case 'r':
            if (event.modifiers.shift) {
              R.rasterizer.rasterizeImmediately();
            }
        }
        event.preventDefault();
      };
      P.P.view.onFrame = function(event) {
        var car, direction, item, username, _base, _base1, _i, _len, _ref, _ref1;
        TWEEN.update(event.time);
        if (typeof (_base = R.rasterizer).updateLoadingBar === "function") {
          _base.updateLoadingBar(event.time);
        }
        if (typeof (_base1 = R.selectedTool).onFrame === "function") {
          _base1.onFrame(event);
        }
        _ref = R.animatedItems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.onFrame(event);
        }
        _ref1 = R.cars;
        for (username in _ref1) {
          car = _ref1[username];
          direction = new P.Point(1, 0);
          direction.angle = car.rotation - 90;
          car.position = car.position.add(direction.multiply(car.speed));
          if (Date.now() - car.rLastUpdate > 1000) {
            R.cars[username].remove();
            delete R.cars[username];
          }
        }
      };
      $(window).resize(function(event) {
        Grid.updateGrid();
        $(".mCustomScrollbar").mCustomScrollbar("update");
        P.view.update();
        R.canvasJ.width(window.innerWidth);
        R.canvasJ.height(window.innerHeight);
        P.view.viewSize = new P.Size(window.innerWidth, window.innerHeight);
      });
      mousedown = function(event) {
        var _base;
        switch (event.which) {
          case 2:
            R.tools['Move'].select();
            break;
          case 3:
            if (typeof (_base = R.selectedTool).finish === "function") {
              _base.finish();
            }
        }
        if (R.selectedTool.name === 'Move') {
          R.selectedTool.beginNative(event);
          return;
        }
        R.initialMousePosition = R.jEventToPoint(event);
        R.previousMousePosition = R.initialMousePosition.clone();
      };
      mousemove = function(event) {
        var paperEvent, _base, _ref;
        R.mousePosition.x = event.pageX;
        R.mousePosition.y = event.pageY;
        if (R.selectedTool.name === 'Move' && R.selectedTool.dragging) {
          R.selectedTool.updateNative(event);
          return;
        }
        R.RDiv.updateHiddenDivs(event);
        if ((_ref = R.codeEditor) != null) {
          _ref.onMouseMove(event);
        }
        if (R.currentDiv != null) {
          paperEvent = Utils.Event.jEventToPaperEvent(event, R.previousMousePosition, R.initialMousePosition, 'mousemove');
          if (typeof (_base = R.currentDiv).updateSelect === "function") {
            _base.updateSelect(paperEvent);
          }
          R.previousMousePosition = paperEvent.point;
        }
      };
      mouseup = function(event) {
        var paperEvent, _base, _ref, _ref1;
        if (R.stageJ.hasClass("has-tool-box") && !$(event.target).parents('.tool-box').length > 0) {
          R.hideToolBox();
        }
        if ((_ref = R.codeEditor) != null) {
          _ref.onMouseUp(event);
        }
        if (R.selectedTool.name === 'Move') {
          R.selectedTool.endNative(event);
          if (event.which === 2) {
            if ((_ref1 = R.previousTool) != null) {
              _ref1.select();
            }
          }
          return;
        }
        if (R.currentDiv != null) {
          paperEvent = Utils.Event.jEventToPaperEvent(event, R.previousMousePosition, R.initialMousePosition, 'mouseup');
          if (typeof (_base = R.currentDiv).endSelect === "function") {
            _base.endSelect(paperEvent);
          }
          R.previousMousePosition = paperEvent.point;
        }
      };
      R.stageJ.mousedown(mousedown);
      $(window).mousemove(mousemove);
      $(window).mouseup(mouseup);
      R.stageJ.mousewheel(function(event) {
        View.moveBy(new P.Point(-event.deltaX, event.deltaY));
      });
      R.fileManager = new R.FileManager();
    });
    R.showCodeEditor = function(source) {
      if (R.codeEditor == null) {
        require(['editor'], function(CodeEditor) {
          R.codeEditor = new CodeEditor();
          if (source) {
            R.codeEditor.setSource(source);
          }
          R.codeEditor.open();
        });
      } else {
        if (source) {
          R.codeEditor.setSource(source);
        }
        R.codeEditor.open();
      }
    };
  });

}).call(this);

//# sourceMappingURL=Main.map
 