// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils', 'jquery'], function(utils) {
    var g;
    g = utils.g();
    g.initializeCities = function() {
      g.toolsJ.find("[data-name='Create']").click(function() {
        var modal, submit;
        submit = function(data) {
          Dajaxice.draw.createCity(g.loadCityFromServer, {
            name: data.name,
            "public": data["public"]
          });
        };
        modal = g.RModal.createModal({
          title: 'Create city',
          submit: submit,
          postSubmit: 'load'
        });
        modal.addTextInput({
          label: "City name",
          name: 'name',
          required: true,
          submitShortcut: true,
          placeholder: 'Paris'
        });
        modal.addCheckbox({
          label: "Public",
          name: 'public',
          helpMessage: "Public cities will be accessible by anyone.",
          defaultValue: true
        });
        modal.show();
      });
      g.toolsJ.find("[data-name='Open']").click(function() {
        var modal;
        modal = g.RModal.createModal({
          title: 'Open city',
          name: 'open-city'
        });
        modal.modalBodyJ.find('.modal-footer').hide();
        modal.addProgressBar();
        modal.show();
        Dajaxice.draw.loadCities(g.loadCities);
      });
    };
    g.modifyCity = function(event) {
      var buttonJ, isPublic, modal, name, parentJ, pk, updateCity;
      event.stopPropagation();
      buttonJ = $(this);
      parentJ = buttonJ.parents('tr:first');
      name = parentJ.attr('data-name');
      isPublic = parseInt(parentJ.attr('data-public'));
      pk = parentJ.attr('data-pk');
      updateCity = function(data) {
        var callback;
        callback = function(result) {
          var city, modal, modalBodyJ, rowJ;
          modal = g.RModal.getModalByTitle('Modify city');
          modal.hide();
          if (!g.checkError(result)) {
            return;
          }
          city = JSON.parse(result.city);
          g.romanesco_alert("City successfully renamed to: " + city.name, "info");
          modalBodyJ = g.RModal.getModalByTitle('Open city').modalBodyJ;
          rowJ = modalBodyJ.find('[data-pk="' + city._id.$oid + '"]');
          rowJ.attr('data-name', city.name);
          rowJ.attr('data-public', Number(city["public"] || 0));
          rowJ.find('.name').text(city.name);
          rowJ.find('.public').text(city["public"] ? 'Public' : 'Private');
        };
        Dajaxice.draw.updateCity(callback, {
          pk: data.data.pk,
          name: data.name,
          "public": data["public"]
        });
      };
      modal = g.RModal.createModal({
        title: 'Modify city',
        submit: updateCity,
        data: {
          pk: pk
        },
        postSubmit: 'load'
      });
      modal.addTextInput({
        name: 'name',
        label: 'Name',
        defaultValue: name,
        required: true,
        submitShortcut: true
      });
      modal.addCheckbox({
        name: 'public',
        label: 'Public',
        helpMessage: "Public cities will be accessible by anyone.",
        defaultValue: isPublic
      });
      modal.show();
    };
    g.loadCities = function(result) {
      var citiesList, city, deleteButtonJ, i, loadButtonJ, modal, modalBodyJ, modifyButtonJ, nameJ, publicCities, publicJ, rowJ, tableJ, tbodyJ, td1J, td2J, td3J, titleJ, userCities, _i, _j, _len, _len1, _ref;
      if (!g.checkError(result)) {
        return;
      }
      userCities = JSON.parse(result.userCities);
      publicCities = JSON.parse(result.publicCities);
      modal = g.RModal.getModalByTitle('Open city');
      modal.removeProgressBar();
      modalBodyJ = modal.modalBodyJ;
      _ref = [userCities, publicCities];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        citiesList = _ref[i];
        if (i === 0 && userCities.length > 0) {
          titleJ = $('<h3>').text('Your cities');
          modalBodyJ.append(titleJ);
        } else {
          titleJ = $('<h3>').text('Public cities');
          modalBodyJ.append(titleJ);
        }
        tableJ = $('<table>').addClass("table table-hover").css({
          width: "100%"
        });
        tbodyJ = $('<tbody>');
        for (_j = 0, _len1 = citiesList.length; _j < _len1; _j++) {
          city = citiesList[_j];
          rowJ = $("<tr>").attr('data-name', city.name).attr('data-owner', city.owner).attr('data-pk', city._id.$oid).attr('data-public', Number(city["public"] || 0));
          td1J = $('<td>');
          td2J = $('<td>');
          td3J = $('<td>');
          nameJ = $("<span class='name'>").text(city.name);
          td1J.append(nameJ);
          if (i === 0) {
            publicJ = $("<span class='public'>").text(city["public"] ? 'Public' : 'Private');
            td2J.append(publicJ);
            modifyButtonJ = $('<button class="btn btn-default">').text('Modify');
            modifyButtonJ.click(g.modifyCity);
            deleteButtonJ = $('<button class="btn  btn-default">').text('Delete');
            deleteButtonJ.click(function(event) {
              var name;
              event.stopPropagation();
              name = $(this).parents('tr:first').attr('data-name');
              Dajaxice.draw.deleteCity(g.checkError, {
                name: name
              });
            });
            td3J.append(modifyButtonJ);
            td3J.append(deleteButtonJ);
          }
          loadButtonJ = $('<button class="btn  btn-primary">').text('Load');
          loadButtonJ.click(function() {
            var name, owner;
            name = $(this).parents('tr:first').attr('data-name');
            owner = $(this).parents('tr:first').attr('data-owner');
            g.loadCity(name, owner);
          });
          td3J.append(loadButtonJ);
          rowJ.append(td1J, td2J, td3J);
          tbodyJ.append(rowJ);
          tableJ.append(tbodyJ);
          modalBodyJ.append(tableJ);
        }
      }
    };
    g.loadCityFromServer = function(result) {
      var city, _ref;
      if ((_ref = g.RModal.getModalByTitle('Create city')) != null) {
        _ref.hide();
      }
      if (!g.checkError(result)) {
        return;
      }
      city = JSON.parse(result.city);
      g.loadCity(city.name, city.owner);
    };
    g.loadCity = function(name, owner) {
      var _ref;
      if ((_ref = g.RModal.getModalByTitle('Open city')) != null) {
        _ref.hide();
      }
      g.unload();
      g.city = {
        owner: owner,
        name: name,
        site: null
      };
      g.load();
      g.updateHash();
    };
  });

}).call(this);

//# sourceMappingURL=city.map
