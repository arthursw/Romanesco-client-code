// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['utils', 'socketio'], function(utils, ioo) {
    R.updateRoom = function() {
      var room;
      room = R.getChatRoom();
      if (R.room !== room) {
        R.chatRoomJ.empty().append("<span>Room: </span>" + room);
        R.chatSocket.emit("join", room);
        return R.room = room;
      }
    };
    R.startChatting = function(username, realUsername, focusOnChat) {
      if (realUsername == null) {
        realUsername = true;
      }
      if (focusOnChat == null) {
        focusOnChat = true;
      }
      return R.chatSocket.emit("nickname", username, function(set) {
        if (set) {
          window.clearTimeout(R.chatConnectionTimeout);
          R.chatMainJ.removeClass("hidden");
          R.chatMainJ.find("#chatConnectingMessage").addClass("hidden");
          if (realUsername) {
            R.chatJ.find("#chatLogin").addClass("hidden");
          } else {
            R.chatJ.find("#chatLogin p.default-username-message").html("You are logged as <strong>" + username + "</strong>");
          }
          R.chatJ.find("#chatUserNameError").addClass("hidden");
          if (focusOnChat) {
            return R.chatMessageJ.focus();
          }
        } else {
          return R.chatJ.find("#chatUserNameError").removeClass("hidden");
        }
      });
    };
    R.initSocket = function() {
      var addMessage, adjectives, connectionError, sendMessage, submitChatUserName, things, username, usernameJ;
      R.chatJ = R.sidebarJ.find("#chatContent");
      R.chatMainJ = R.chatJ.find("#chatMain");
      R.chatRoomJ = R.chatMainJ.find("#chatRoom");
      R.chatUsernamesJ = R.chatMainJ.find("#chatUserNames");
      R.chatMessagesJ = R.chatMainJ.find("#chatMessages");
      R.chatMessageJ = R.chatMainJ.find("#chatSendMessageInput");
      R.chatMessageJ.blur();
      addMessage = function(message, from) {
        var author;
        if (from == null) {
          from = null;
        }
        if (from != null) {
          author = from === R.me ? "me" : from;
          R.chatMessagesJ.append($("<p>").append($("<b>").text(author + ": "), message));
        } else {
          R.chatMessagesJ.append($("<p>").append(message));
        }
        R.chatMessageJ.val('');
        if (from === R.me) {
          $("#chatMessagesScroll").mCustomScrollbar("scrollTo", "bottom");
          $(".sidebar-scrollbar.chatMessagesScroll").mCustomScrollbar("scrollTo", "bottom");
        } else if ($(document.activeElement).parents("#Chat").length > 0) {
          $("#chatMessagesScroll").mCustomScrollbar("scrollTo", "bottom");
        }
      };
      R.chatSocket = io.connect("/chat");
      R.chatSocket.on("connect", function() {
        R.updateRoom();
      });
      R.chatSocket.on("announcement", function(msg) {
        addMessage(msg);
      });
      R.chatSocket.on("nicknames", function(nicknames) {
        var i;
        R.chatUsernamesJ.empty().append($("<span>Online: </span>"));
        for (i in nicknames) {
          R.chatUsernamesJ.append($("<b>").text(i > 0 ? ', ' + nicknames[i] : nicknames[i]));
        }
      });
      R.chatSocket.on("msg_to_room", function(from, msg) {
        addMessage(msg, from);
      });
      R.chatSocket.on("reconnect", function() {
        R.chatMessagesJ.remove();
        addMessage("Reconnected to the server", "System");
      });
      R.chatSocket.on("reconnecting", function() {
        addMessage("Attempting to re-connect to the server", "System");
      });
      R.chatSocket.on("error", function(e) {
        addMessage((e ? e : "A unknown error occurred"), "System");
      });
      sendMessage = function() {
        R.chatSocket.emit("user message", R.chatMessageJ.val());
        addMessage(R.chatMessageJ.val(), R.me);
      };
      R.chatMainJ.find("#chatSendMessageSubmit").submit(function() {
        return sendMessage();
      });
      R.chatMessageJ.keypress(function(event) {
        if (event.which === 13) {
          event.preventDefault();
          return sendMessage();
        }
      });
      connectionError = function() {
        return R.chatMainJ.find("#chatConnectingMessage").text("Impossible to connect to chat.");
      };
      R.chatConnectionTimeout = setTimeout(connectionError, 2000);
      if (R.chatJ.find("#chatUserNameInput").length > 0) {
        R.chatJ.find("a.sign-in").click(function(event) {
          $("#user-login-group > button").click();
          event.preventDefault();
          return false;
        });
        R.chatJ.find("a.change-username").click(function(event) {
          $("#chatUserName").show();
          $("#chatUserNameInput").focus();
          event.preventDefault();
          return false;
        });
        usernameJ = R.chatJ.find("#chatUserName");
        submitChatUserName = function(username, focusOnChat) {
          if (focusOnChat == null) {
            focusOnChat = true;
          }
          $("#chatUserName").hide();
          if (username == null) {
            username = usernameJ.find('#chatUserNameInput').val();
          }
          R.startChatting(username, false, focusOnChat);
        };
        usernameJ.find('#chatUserNameInput').keypress(function(event) {
          if (event.which === 13) {
            event.preventDefault();
            return submitChatUserName();
          }
        });
        usernameJ.find("#chatUserNameSubmit").submit(function(event) {
          return submitChatUserName();
        });
        adjectives = ["Cool", "Masked", "Bloody", "Super", "Mega", "Giga", "Ultra", "Big", "Blue", "Black", "White", "Red", "Purple", "Golden", "Silver", "Dangerous", "Crazy", "Fast", "Quick", "Little", "Funny", "Extreme", "Awsome", "Outstanding", "Crunchy", "Vicious", "Zombie", "Funky", "Sweet"];
        things = ["Hamster", "Moose", "Lama", "Duck", "Bear", "Eagle", "Tiger", "Rocket", "Bullet", "Knee", "Foot", "Hand", "Fox", "Lion", "King", "Queen", "Wizard", "Elephant", "Thunder", "Storm", "Lumberjack", "Pistol", "Banana", "Orange", "Pinapple", "Sugar", "Leek", "Blade"];
        username = Utils.Array.random(adjectives) + " " + Utils.Array.random(things);
        submitChatUserName(username, false);
      }
      R.chatSocket.on("car move", function(user, position, rotation, speed) {
        var _base;
        if (R.ignoreSockets) {
          return;
        }
        if ((_base = R.cars)[user] == null) {
          _base[user] = new Raster("/static/images/car.png");
        }
        R.cars[user].position = new P.Point(position);
        R.cars[user].rotation = rotation;
        R.cars[user].speed = speed;
        R.cars[user].rLastUpdate = Date.now();
      });
      return R.chatSocket.on("bounce", function(data) {
        var allowedFunctions, id, item, itemClass, itemMustBeRasterized, rFunction, rasterizeItem, tool, _ref, _ref1, _ref2, _ref3;
        if (R.ignoreSockets) {
          return;
        }
        if ((data["function"] != null) && (data["arguments"] != null)) {
          if (data.tool != null) {
            tool = R.tools[data.tool];
            if ((_ref = data["function"]) !== 'begin' && _ref !== 'update' && _ref !== 'end' && _ref !== 'createPath') {
              console.log('Error: not authorized to call' + data["function"]);
              return;
            }
            rFunction = tool != null ? tool[data["function"]] : void 0;
            if (rFunction != null) {
              data["arguments"][0] = Event.prototype.fromJSON(data["arguments"][0]);
              rFunction.apply(tool, data["arguments"]);
            }
          } else if (data.itemPk != null) {
            item = R.items[data.itemPk];
            if ((item != null) && (item.currentCommand == null)) {
              allowedFunctions = ['setRectangle', 'setRotation', 'moveTo', 'setParameter', 'modifyPoint', 'modifyPointType', 'modifySpeed', 'setPK', 'delete', 'create', 'addPoint', 'deletePoint', 'modifyControlPath', 'setText'];
              if (_ref1 = data["function"], __indexOf.call(allowedFunctions, _ref1) < 0) {
                console.log('Error: not authorized to call: ' + data["function"]);
                return;
              }
              rFunction = item[data["function"]];
              if (rFunction == null) {
                console.log('Error: function is not valid: ' + data["function"]);
                return;
              }
              id = 'rasterizeItem-' + item.pk;
              itemMustBeRasterized = ((_ref2 = data["function"]) !== 'setPK' && _ref2 !== 'create') && !item.drawing.visible;
              if ((R.updateTimeout[id] == null) && itemMustBeRasterized) {
                R.rasterizer.drawItems();
                R.rasterizer.rasterize(item, true);
              }
              item.drawing.visible = true;
              item.socketAction = true;
              rFunction.apply(item, data["arguments"]);
              delete item.socketAction;
              if (itemMustBeRasterized && ((_ref3 = data["function"]) !== 'delete')) {
                rasterizeItem = function() {
                  if (!item.currentCommand) {
                    R.rasterizer.rasterize(item);
                  }
                };
                Utils.deferredExecution(rasterizeItem, id, 1000);
              }
            }
          } else if (data.itemClass && data["function"] === 'create') {
            itemClass = g[data.itemClass];
            if (RItem.prototype.isPrototypeOf(itemClass)) {
              itemClass.socketAction = true;
              itemClass.create.apply(itemClass, data["arguments"]);
            }
          }
          P.view.update();
        }
      });
    };
  });

}).call(this);

//# sourceMappingURL=Socket.map
