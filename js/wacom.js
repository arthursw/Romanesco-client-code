// Generated by CoffeeScript 1.7.1
(function() {
  var addCombo, clearCombo, closeCurrentTouchDevice, createEmptyCombo, fingerStateDescription, getTouchDeviceID, isPluginLoaded, onLoad, openCurrentTouchDevice, rebuildTouchTable, touchDataEventHandler, touchDeviceAttachHandler, touchDeviceDetachHandler, updateCapsFromCurrentTouchDevice, updateTouchCapsTable, updateTouchDataTables, updateTouchDeviceIDList;

  touchDataEventHandler = function() {
    updateTouchDataTables();
  };

  touchDeviceAttachHandler = function() {
    alert('Detected touch device attached!');
    closeCurrentTouchDevice();
    updateTouchDeviceIDList();
    rebuildTouchTable(0);
  };

  touchDeviceDetachHandler = function() {
    alert('Detected touch device detached!');
    closeCurrentTouchDevice();
    updateTouchDeviceIDList();
    rebuildTouchTable(0);
  };

  getTouchDeviceID = function(index_I) {
    var devID;
    devID = -1;
    if (_numTouchDevices > 0 && index_I < _numTouchDevices) {
      devID = _touchDeviceIDList[index_I];
    } else {
      if (_numTouchDevices > 0) {
        alert('Could not get device for index: ' + index_I + '\nReturning index for first device found.');
        devID = 0;
      } else {
        alert('No touch devices found');
        devID = -1;
      }
    }
    return devID;
  };

  updateTouchDeviceIDList = function() {
    var idList, idListIdx, _numTouchDevices, _touchDeviceIDList;
    idListIdx = 0;
    idList = '';
    _touchDeviceIDList = getWacomPlugin().touchAPI.TouchDeviceIDList;
    _numTouchDevices = _touchDeviceIDList.length;
    _docIsTouchDeviceAttached.innerHTML = '#Devices: ' + String(_numTouchDevices);
    clearCombo();
    if (_numTouchDevices === 0) {
      createEmptyCombo();
    }
    idListIdx = 0;
    while (idListIdx < _numTouchDevices) {
      addCombo(idListIdx);
      idListIdx++;
    }
  };

  updateCapsFromCurrentTouchDevice = function() {
    var _touchCurrentDeviceID, _touchDeviceCaps;
    if (_touchCurrentDeviceIndex < 0) {
      alert('Bad _touchCurrentDeviceIndex: ' + _touchCurrentDeviceIndex);
      return;
    }
    _touchCurrentDeviceID = getTouchDeviceID(_touchCurrentDeviceIndex);
    if (_touchCurrentDeviceIndex >= 0) {
      _touchDeviceCaps = getWacomPlugin().touchAPI.TouchDeviceCapabilities(_touchCurrentDeviceID);
    }
  };

  openCurrentTouchDevice = function() {
    var passthru, theError;
    passthru = false;
    updateCapsFromCurrentTouchDevice();
    updateTouchCapsTable(1);
    theError = getWacomPlugin().touchAPI.Open(_touchCurrentDeviceID, passthru);
    if (theError !== 0) {
      alert('unable to establish connection to wacom plugin');
    }
  };

  closeCurrentTouchDevice = function() {
    getWacomPlugin().touchAPI.Close(_touchCurrentDeviceID);
    updateTouchCapsTable(0);
  };

  updateTouchCapsTable = function(useCaps) {
    if (_touchDeviceCaps.Version > 0) {
      _docMTAPIVersion.innerHTML = String(useCaps ? _touchDeviceCaps.Version : '0');
      _docDeviceID.innerHTML = String(useCaps ? _touchDeviceCaps.DeviceID : '0');
      _docDeviceType.innerHTML = String(useCaps ? _touchDeviceCaps.DeviceType : '0');
      _docMaxFingers.innerHTML = String(useCaps ? _touchDeviceCaps.MaxFingers : '0');
      _docReportedSizeX.innerHTML = String(useCaps ? _touchDeviceCaps.ReportedSizeX : '0');
      _docReportedSizeY.innerHTML = String(useCaps ? _touchDeviceCaps.ReportedSizeY : '0');
      _docPhysicalSizeX.innerHTML = String(useCaps ? Math.round(_touchDeviceCaps.PhysicalSizeX * 1000) / 1000 : '0');
      _docPhysicalSizeY.innerHTML = String(useCaps ? Math.round(_touchDeviceCaps.PhysicalSizeY * 1000) / 1000 : '0');
      _docLogicalOriginX.innerHTML = String(useCaps ? _touchDeviceCaps.LogicalOriginX : '0');
      _docLogicalOriginY.innerHTML = String(useCaps ? _touchDeviceCaps.LogicalOriginY : '0');
      _docLogicalWidth.innerHTML = String(useCaps ? _touchDeviceCaps.LogicalWidth : '0');
      _docLogicalHeight.innerHTML = String(useCaps ? _touchDeviceCaps.LogicalHeight : '0');
    }
  };

  fingerStateDescription = function(touchState) {
    switch (touchState) {
      case 0:
        return 'None';
      case 1:
        return 'Down';
      case 2:
        return 'Hold';
      case 3:
        return 'Up';
      default:
        return 'state invalid!';
    }
  };

  updateTouchDataTables = function() {
    var finger1, finger2, numFingers, _touchRawFingerData;
    finger1 = void 0;
    finger2 = void 0;
    numFingers = void 0;
    _touchRawFingerData = getWacomPlugin().touchAPI.TouchRawFingerData(_touchCurrentDeviceID);
    if (_touchRawFingerData.Status === -1) {
      return;
    }
    numFingers = _touchRawFingerData.NumFingers;
    _docNumFingersReported.innerHTML = _touchRawFingerData.NumFingers;
    finger1 = _touchRawFingerData.FingerList[0];
    _docFingerID1.innerHTML = String(finger1.FingerID);
    _docPosX1.innerHTML = String(Math.round(finger1.PosX * 1000) / 1000);
    _docPosY1.innerHTML = String(Math.round(finger1.PosY * 1000) / 1000);
    _docWidth1.innerHTML = String(Math.round(finger1.Width * 1000) / 1000);
    _docHeight1.innerHTML = String(Math.round(finger1.Height * 1000) / 1000);
    _docOrientation1.innerHTML = String(finger1.Orientation);
    _docConfidence1.innerHTML = String(finger1.Confidence);
    _docSensitivity1.innerHTML = String(finger1.Sensitivity);
    _docFingerState1.innerHTML = fingerStateDescription(finger1.TouchState);
    if (numFingers > 1) {
      finger2 = _touchRawFingerData.FingerList[1];
    }
    _docFingerID2.innerHTML = numFingers === 2 ? String(finger2.FingerID) : '*****';
    _docPosX2.innerHTML = numFingers === 2 ? String(Math.round(finger2.PosX * 1000) / 1000) : '*****';
    _docPosY2.innerHTML = numFingers === 2 ? String(Math.round(finger2.PosY * 1000) / 1000) : '*****';
    _docWidth2.innerHTML = numFingers === 2 ? String(Math.round(finger2.Width * 1000) / 1000) : '*****';
    _docHeight2.innerHTML = numFingers === 2 ? String(Math.round(finger2.Height * 1000) / 1000) : '*****';
    _docOrientation2.innerHTML = numFingers === 2 ? String(finger2.Orientation) : '*****';
    _docConfidence2.innerHTML = numFingers === 2 ? String(finger2.Confidence) : '*****';
    _docSensitivity2.innerHTML = numFingers === 2 ? String(finger2.Sensitivity) : '*****';
    _docFingerState2.innerHTML = fingerStateDescription(finger2.TouchState);
  };

  isPluginLoaded = function() {
    var pluginVersion, retVersion;
    retVersion = '';
    pluginVersion = getWacomPlugin().version;
    if (pluginVersion !== void 0) {
      retVersion = pluginVersion;
    }
    return retVersion;
  };

  onLoad = function() {
    var loadVersion, _docConfidence1, _docConfidence2, _docDeviceID, _docDeviceType, _docFingerID1, _docFingerID2, _docFingerState1, _docFingerState2, _docHeight1, _docHeight2, _docIsTouchDeviceAttached, _docLogicalHeight, _docLogicalOriginX, _docLogicalOriginY, _docLogicalWidth, _docMTAPIVersion, _docMaxFingers, _docNumFingersReported, _docOrientation1, _docOrientation2, _docPhysicalSizeX, _docPhysicalSizeY, _docPluginVersion, _docPosX1, _docPosX2, _docPosY1, _docPosY2, _docReportedSizeX, _docReportedSizeY, _docSensitivity1, _docSensitivity2, _docWidth1, _docWidth2;
    loadVersion = isPluginLoaded();
    if (loadVersion !== '') {
      alert('Loaded webplugin: ' + loadVersion);
    } else {
      alert('webplugin is NOT Loaded (or undiscoverable)');
      return;
    }
    _docIsTouchDeviceAttached = document.getElementById('docIsTouchDeviceAttachedCell');
    _docMTAPIVersion = document.getElementById('docMTAPIVersionCell');
    _docDeviceID = document.getElementById('docDeviceIDCell');
    _docDeviceType = document.getElementById('docDeviceTypeCell');
    _docMaxFingers = document.getElementById('docMaxFingersCell');
    _docReportedSizeX = document.getElementById('docReportedSizeXCell');
    _docReportedSizeY = document.getElementById('docReportedSizeYCell');
    _docPhysicalSizeX = document.getElementById('docPhysicalSizeXCell');
    _docPhysicalSizeY = document.getElementById('docPhysicalSizeYCell');
    _docLogicalOriginX = document.getElementById('docLogicalOriginXCell');
    _docLogicalOriginY = document.getElementById('docLogicalOriginYCell');
    _docLogicalWidth = document.getElementById('docLogicalWidthCell');
    _docLogicalHeight = document.getElementById('docLogicalHeightCell');
    _docNumFingersReported = document.getElementById('docNumFingersReportedCell');
    _docFingerID1 = document.getElementById('docFingerIDCell1');
    _docPosX1 = document.getElementById('docPosXCell1');
    _docPosY1 = document.getElementById('docPosYCell1');
    _docWidth1 = document.getElementById('docWidthCell1');
    _docHeight1 = document.getElementById('docHeightCell1');
    _docOrientation1 = document.getElementById('docOrientationCell1');
    _docConfidence1 = document.getElementById('docConfidenceCell1');
    _docSensitivity1 = document.getElementById('docSensitivityCell1');
    _docFingerState1 = document.getElementById('docFingerStateCell1');
    _docFingerID2 = document.getElementById('docFingerIDCell2');
    _docPosX2 = document.getElementById('docPosXCell2');
    _docPosY2 = document.getElementById('docPosYCell2');
    _docWidth2 = document.getElementById('docWidthCell2');
    _docHeight2 = document.getElementById('docHeightCell2');
    _docOrientation2 = document.getElementById('docOrientationCell2');
    _docConfidence2 = document.getElementById('docConfidenceCell2');
    _docSensitivity2 = document.getElementById('docSensitivityCell2');
    _docFingerState2 = document.getElementById('docFingerStateCell2');
    _docPluginVersion = document.getElementById('docPluginVersion');
    _docPluginVersion.innerHTML = 'Plugin Version: ' + getWacomPlugin().version;
    BrowserDetect.init();
    if (window.opera) {
      getWacomPlugin().touchAPI.Modes(0);
    } else if (BrowserDetect.browser === 'Safari' && BrowserDetect.version < 5.1) {
      getWacomPlugin().touchAPI.Modes(0);
    } else if (BrowserDetect.browser === 'Firefox' && window.navigator.platform === 'MacIntel' && window.navigator.userAgent.indexOf('10.5') !== -1) {
      getWacomPlugin().touchAPI.Modes(0);
    } else {
      getWacomPlugin().touchAPI.Modes(0x00000001);
    }
    registerForTouchEvents();
    updateTouchDeviceIDList();
    openCurrentTouchDevice();
  };

  addCombo = function(touchDeviceIndex) {
    var combo, error, option;
    combo = document.getElementById('touchDevicesCombo');
    option = document.createElement('option');
    option.text = 'Touch Device: ' + touchDeviceIndex;
    option.value = touchDeviceIndex;
    try {
      combo.add(option, null);
    } catch (_error) {
      error = _error;
      combo.add(option);
    }
  };

  clearCombo = function() {
    var combo, idx;
    combo = document.getElementById('touchDevicesCombo');
    idx = combo.options.length - 1;
    while (idx >= 0) {
      combo.options[idx] = null;
      idx--;
    }
    combo.selectedIndex = -1;
  };

  createEmptyCombo = function() {
    var combo, error, option;
    combo = document.getElementById('touchDevicesCombo');
    option = document.createElement('option');
    option.text = '(no touch devices found)';
    option.value = -1;
    clearCombo();
    try {
      combo.add(option, null);
    } catch (_error) {
      error = _error;
      combo.add(option);
    }
  };

  rebuildTouchTable = function(touchDeviceIndex) {
    var _touchCurrentDeviceIndex;
    closeCurrentTouchDevice();
    _touchCurrentDeviceIndex = touchDeviceIndex;
    openCurrentTouchDevice();
  };

}).call(this);

//# sourceMappingURL=wacom.map
