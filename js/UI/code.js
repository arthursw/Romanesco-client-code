// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jqtree'], function() {
    var FileManager, ModuleCreator;
    FileManager = (function() {
      function FileManager() {
        this.onFileMoved = __bind(this.onFileMoved, this);
        this.loadAndOpenFile = __bind(this.loadAndOpenFile, this);
        this.readTree = __bind(this.readTree, this);
        this.loadTree = __bind(this.loadTree, this);
        this.fileBrowserJ = $('#Code').find('.files');
        this.files = [];
        this.nDirsToLoad = 1;
        this.request('https://api.github.com/repos/arthursw/romanesco-client-code/contents/', this.loadTree);
        return;
      }

      FileManager.prototype.request = function(request, callback) {
        Dajaxice.draw.githubRequest(callback, {
          githubRequest: request
        });
      };

      FileManager.prototype.createFile = function() {};

      FileManager.prototype.updateFile = function() {};

      FileManager.prototype.deleteFile = function() {};

      FileManager.prototype.getParentNode = function(file, node) {
        var dirName, dirs, i, _base, _i, _len;
        dirs = file.path.split('/');
        file.name = dirs.pop();
        for (i = _i = 0, _len = dirs.length; _i < _len; i = ++_i) {
          dirName = dirs[i];
          if ((_base = node.children)[dirName] == null) {
            _base[dirName] = {
              children: {}
            };
          }
          node = node.children[dirName];
        }
        return node;
      };

      FileManager.prototype.buildTree = function(files) {
        var file, node, tree, _base, _i, _len, _name;
        tree = {
          children: {}
        };
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          node = tree;
          node = this.getParentNode(file, node);
          if ((_base = node.children)[_name = file.name] == null) {
            _base[_name] = {
              children: {}
            };
          }
          node.children[file.name].type = file.type;
          node.children[file.name].path = file.path;
        }
        return tree;
      };

      FileManager.prototype.buildJqTree = function(tree, jqTree) {
        var jqTreeNode, name, node, _ref;
        _ref = tree.children;
        for (name in _ref) {
          node = _ref[name];
          jqTreeNode = {
            label: name,
            type: node.type,
            path: node.path,
            children: []
          };
          node.jqTreeNode = jqTreeNode;
          jqTree.children.push(jqTreeNode);
          this.buildJqTree(node, jqTreeNode);
        }
      };

      FileManager.prototype.loadTree = function(content) {
        var file, _i, _len;
        for (_i = 0, _len = content.length; _i < _len; _i++) {
          file = content[_i];
          if (file.name === 'coffee') {
            this.request(file.git_url + '?recursive=1', this.readTree);
            break;
          }
        }
      };

      FileManager.prototype.readTree = function(content) {
        var jqTreeData;
        this.tree = this.buildTree(content.tree);
        jqTreeData = {
          children: []
        };
        this.buildJqTree(this.tree, jqTreeData);
        this.fileBrowserJ.tree({
          data: jqTreeData.children,
          autoOpen: true,
          dragAndDrop: true,
          onCanMoveTo: function(moved_node, target_node, position) {
            return target_node.type === 'tree' || position !== 'inside';
          }
        });
        this.fileBrowserJ.bind('tree.select', this.loadAndOpenFile);
        this.fileBrowserJ.bind('tree.move', this.onFileMoved);
      };

      FileManager.prototype.loadAndOpenFile = function(event) {
        if (event.node.type === 'tree') {
          return;
        }
        this.loadFile(event.node.path, this.openFile);
      };

      FileManager.prototype.openFile = function(content) {
        R.showCodeEditor(atob(content.content));
      };

      FileManager.prototype.onFileMoved = function(event) {
        console.log('moved_node', event.move_info.moved_node);
        console.log('target_node', event.move_info.target_node);
        console.log('position', event.move_info.position);
        console.log('previous_parent', event.move_info.previous_parent);
      };

      FileManager.prototype.loadFile = function(path, callback) {
        this.request('https://api.github.com/repos/arthursw/romanesco-client-code/contents/coffee/' + path, callback);
      };

      return FileManager;

    })();
    ModuleCreator = (function() {
      function ModuleCreator() {
        this.registerModuleInModuleLoader = __bind(this.registerModuleInModuleLoader, this);
        return;
      }

      ModuleCreator.prototype.createButton = function(content) {
        var description, descriptionResult, iconResult, iconURL, label, labelResult, source;
        source = atob(content.content);
        iconResult = /@iconURL = (\'|\"|\"\"\")(.*)(\'|\"|\"\"\")/.exec(source);
        if ((iconResult != null) && iconResult.length >= 2) {
          iconURL = iconResult[2];
        }
        descriptionResult = /@description = (\'|\"|\"\"\")(.*)(\'|\"|\"\"\")/.exec(source);
        if ((descriptionResult != null) && descriptionResult.length >= 2) {
          description = descriptionResult[2];
        }
        labelResult = /@label = (\'|\"|\"\"\")(.*)(\'|\"|\"\"\")/.exec(source);
        if ((labelResult != null) && labelResult.length >= 2) {
          label = labelResult[2];
        }
        console.log('{ label: ' + label + ', description: ' + description + ', iconURL: ' + iconURL + ', file: ' + content.name + ' }');
      };

      ModuleCreator.prototype.createButtons = function(pathDirectory) {
        var name, node, _ref;
        _ref = pathDirectory.children;
        for (name in _ref) {
          node = _ref[name];
          if (node.type !== 'tree') {
            this.loadFile(node.path, this.createButton);
          } else {
            this.createButtons(node);
          }
        }
      };

      ModuleCreator.prototype.loadButtons = function() {
        this.createButtons(this.tree.children['Items'].children['Paths']);
      };

      ModuleCreator.prototype.registerModule = function(module) {
        this.module = module;
        this.loadFile(this.tree.children['ModuleLoader'].path, this.registerModuleInModuleLoader);
      };

      ModuleCreator.prototype.insertModule = function(source, module, position) {
        var line;
        line = JSON.stringify(module);
        source.insert(line, position);
      };

      ModuleCreator.prototype.registerModuleInModuleLoader = function(content) {
        var buttonsResult, source;
        source = atob(content.content);
        buttonsResult = /buttons = \[/.exec(source);
        if ((buttonsResult != null) && buttonsResult.length > 1) {
          this.insertModule(source, this.module, buttonsResult[1]);
        }
      };

      return ModuleCreator;

    })();
    return FileManager;
  });

}).call(this);

//# sourceMappingURL=Code.map
