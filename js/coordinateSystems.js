// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils', 'jquery', 'paper'], function(utils) {
    var g;
    g = utils.g();
    g.projectToPlanet = function(point) {
      var planet, x, y;
      planet = {};
      x = point.x / g.scale;
      planet.x = Math.floor((x + 180) / 360);
      y = point.y / g.scale;
      planet.y = Math.floor((y + 90) / 180);
      return planet;
    };
    g.projectToPosOnPlanet = function(point, planet) {
      var pos;
      if (planet == null) {
        planet = g.projectToPlanet(point);
      }
      pos = {};
      pos.x = point.x / g.scale - 360 * planet.x;
      pos.y = point.y / g.scale - 180 * planet.y;
      return pos;
    };
    g.projectToPlanetJson = function(point) {
      var planet, pos;
      planet = g.projectToPlanet(point);
      pos = g.projectToPosOnPlanet(point, planet);
      return {
        pos: pos,
        planet: planet
      };
    };
    g.posOnPlanetToProject = function(point, planet) {
      var x, y;
      if ((point.x == null) && (point.y == null)) {
        point = g.arrayToPoint(point);
      }
      x = planet.x * 360 + point.x;
      y = planet.y * 180 + point.y;
      x *= g.scale;
      y *= g.scale;
      return new Point(x, y);
    };
    g.arrayToPoint = function(array) {
      return new Point(array);
    };
    g.pointToArray = function(point) {
      return [point.x, point.y];
    };
    g.pointToObj = function(point) {
      return {
        x: point.x,
        y: point.y
      };
    };
    g.getChatRoom = function() {
      return 'x: ' + Math.round(view.center.x / g.scale) + ', y: ' + Math.round(view.center.y / g.scale);
    };
    g.getTopLeftCorner = function() {
      return view.viewToProject(new Point(0, 0));
    };
    g.midPoint = function(p1, p2) {
      return new Point((p1.x + p2.x) * 0.5, (p1.y + p2.y) * 0.5);
    };
    g.viewToProjectRectangle = function(rectangle) {
      return new Rectangle(view.viewToProject(rectangle.topLeft), view.viewToProject(rectangle.bottomRight));
    };
    g.projectToViewRectangle = function(rectangle) {
      return new Rectangle(view.projectToView(rectangle.topLeft), view.projectToView(rectangle.bottomRight));
    };
    g.getLimit = function() {
      var planet;
      planet = g.projectToPlanet(g.getTopLeftCorner());
      return g.posOnPlanetToProject(new Point(-180, -90), new Point(planet.x + 1, planet.y + 1));
    };
    g.boxFromRectangle = function(rectangle) {
      var brOnPlanet, planet, points, tlOnPlanet;
      planet = g.pointToObj(g.projectToPlanet(rectangle.topLeft));
      tlOnPlanet = g.projectToPosOnPlanet(rectangle.topLeft, planet);
      brOnPlanet = g.projectToPosOnPlanet(rectangle.bottomRight, planet);
      points = [];
      points.push(g.pointToArray(tlOnPlanet));
      points.push(g.pointToArray(g.projectToPosOnPlanet(rectangle.topRight, planet)));
      points.push(g.pointToArray(brOnPlanet));
      points.push(g.pointToArray(g.projectToPosOnPlanet(rectangle.bottomLeft, planet)));
      points.push(g.pointToArray(tlOnPlanet));
      return {
        points: points,
        planet: g.pointToObj(planet),
        tl: tlOnPlanet,
        br: brOnPlanet
      };
    };
    g.rectangleFromBox = function(box) {
      var br, planet, tl;
      planet = new Point(box.planetX, box.planetY);
      tl = g.posOnPlanetToProject(box.box.coordinates[0][0], planet);
      br = g.posOnPlanetToProject(box.box.coordinates[0][2], planet);
      return new Rectangle(tl, br);
    };
    g.quantizeZoom = function(zoom) {
      if (zoom < 5) {
        zoom = 1;
      } else if (zoom < 25) {
        zoom = 5;
      } else {
        zoom = 25;
      }
      return zoom;
    };
  });

}).call(this);

//# sourceMappingURL=coordinateSystems.map
