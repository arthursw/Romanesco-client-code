// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['utils'], function() {
    var AddPointCommand, Command, CommandManager, CreateItemCommand, DeferredCommand, DeleteItemCommand, DeletePointCommand, DeselectCommand, DuplicateItemCommand, ItemCommand, ModifyControlPathCommand, ModifyPointCommand, ModifyPointTypeCommand, ModifySpeedCommand, ModifyTextCommand, MoveCommand, MoveViewCommand, ResizeCommand, RotationCommand, SelectCommand, SetParameterCommand;
    Command = (function() {
      Command.needValidPosition = false;

      function Command(name) {
        this.name = name;
        this.click = __bind(this.click, this);
        this.liJ = $("<li>").text(this.name);
        this.liJ.click(this.click);
        this.id = Math.random();
        return;
      }

      Command.prototype.superDo = function() {
        this.done = true;
        this.liJ.addClass('done');
      };

      Command.prototype.superUndo = function() {
        this.done = false;
        this.liJ.removeClass('done');
      };

      Command.prototype.setBeforeState = function() {
        this.beforeArgs = arguments;
      };

      Command.prototype.setAfterState = function() {
        this.afterArgs = arguments;
      };

      Command.prototype["do"] = function() {
        this.superDo();
      };

      Command.prototype.undo = function() {
        this.superUndo();
      };

      Command.prototype.click = function() {
        R.commandManager.commandClicked(this);
      };

      Command.prototype.toggle = function() {
        if (this.done) {
          return this.undo();
        } else {
          return this["do"]();
        }
      };

      Command.prototype["delete"] = function() {
        this.liJ.remove();
        R.commandManager.deleteCommand(this);
      };

      Command.prototype.update = function() {};

      Command.prototype.end = function() {
        this.superDo();
      };

      return Command;

    })();
    R.Command = Command;
    ItemCommand = (function(_super) {
      __extends(ItemCommand, _super);

      function ItemCommand(name, items) {
        ItemCommand.__super__.constructor.call(this, name);
        this.items = mapItems(items);
        return;
      }

      ItemCommand.prototype.mapItems = function(items) {
        var item, map, _i, _len;
        map = {};
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          map[item.getPk()] = item;
        }
        return map;
      };

      ItemCommand.prototype.apply = function(method, args) {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item[method].apply(item, args);
        }
      };

      ItemCommand.prototype["do"] = function() {
        this.apply(this.constructor.method, this.afterArgs);
        ItemCommand.__super__["do"].call(this);
      };

      ItemCommand.prototype.undo = function() {
        this.apply(this.constructor.method, this.beforeArgs);
        ItemCommand.__super__.undo.call(this);
      };

      return ItemCommand;

    })(Command);
    DeferredCommand = (function(_super) {
      __extends(DeferredCommand, _super);

      function DeferredCommand() {
        var args, items, name;
        name = arguments[0], items = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        DeferredCommand.__super__.constructor.call(this, name, items);
        this.setBeforeState(args);
        return;
      }

      DeferredCommand.prototype.update = function() {
        return this.apply(this.constructor.updateMethod, arguments);
      };

      DeferredCommand.prototype.end = function() {
        this.setAfterState(arguments);
        if (!this.positionIsValid()) {
          this.undo();
        }
        if (!this.itemsHaveChanged()) {
          return;
        }
        this.apply(this.constructor.endMethod, []);
        R.commandManager.add(this);
        DeferredCommand.__super__.end.call(this);
      };

      DeferredCommand.prototype.positionIsValid = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          if (!Lock.validatePosition(item)) {
            return false;
          }
        }
        return true;
      };

      DeferredCommand.prototype.itemsHaveChanged = function() {
        var beforeArg, i, _i, _len, _ref;
        _ref = this.beforeArgs;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          beforeArg = _ref[i];
          if (beforeArg !== this.afterArgs[i]) {
            return false;
          }
        }
        return true;
      };

      DeferredCommand.prototype.firstItem = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          return item;
        }
      };

      return DeferredCommand;

    })(ItemCommand);
    ResizeCommand = (function(_super) {
      __extends(ResizeCommand, _super);

      ResizeCommand.needValidPosition = true;

      ResizeCommand.method = "setRectangle";

      ResizeCommand.updateMethod = "updateSetRectangle";

      ResizeCommand.endMethod = "endSetRectangle";

      function ResizeCommand(items, newRectangle) {
        ResizeCommand.__super__.constructor.call(this, "Resize item", items, newRectangle);
        return;
      }

      return ResizeCommand;

    })(DeferredCommand);
    RotationCommand = (function(_super) {
      __extends(RotationCommand, _super);

      RotationCommand.needValidPosition = true;

      RotationCommand.method = "setRotation";

      RotationCommand.updateMethod = "updateSetRotation";

      RotationCommand.endMethod = "endSetRotation";

      function RotationCommand(items, newRotation) {
        RotationCommand.__super__.constructor.call(this, "Rotate item", items, newRotation);
        return;
      }

      return RotationCommand;

    })(Command);
    R.RotationCommand = RotationCommand;
    MoveCommand = (function(_super) {
      __extends(MoveCommand, _super);

      MoveCommand.needValidPosition = true;

      function MoveCommand(items, newPosition) {
        MoveCommand.__super__.constructor.call(this, "Move item", items, newPosition);
        return;
      }

      MoveCommand.prototype["do"] = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.moveBy(this.newPosition.subtract(this.previousPosition), true);
        }
        MoveCommand.__super__["do"].call(this);
      };

      MoveCommand.prototype.undo = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.moveBy(this.previousPosition.subtract(this.newPosition), true);
        }
        MoveCommand.__super__.undo.call(this);
      };

      MoveCommand.prototype.update = function(event) {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.updateMove(event);
        }
      };

      MoveCommand.prototype.end = function(valid) {
        var args, item, pk, _ref, _ref1;
        this.newPosition = this.item.rectangle.center;
        if (this.newPosition.equals(this.previousPosition)) {
          return false;
        }
        if (!valid) {
          return false;
        }
        if (Object.keys(this.items).length === 1) {
          _ref = this.items;
          for (pk in _ref) {
            item = _ref[pk];
            item.endMove(true);
          }
        } else {
          args = [];
          _ref1 = this.items;
          for (pk in _ref1) {
            item = _ref1[pk];
            item.endMove(false);
            if (Lock.prototype.isPrototypeOf(item)) {
              item.update('position');
            } else {
              args.push({
                "function": item.getUpdateFunction(),
                "arguments": item.getUpdateArguments('position')
              });
            }
          }
          Dajaxice.draw.multipleCalls(this.updateCallback, {
            functionsAndArguments: args
          });
        }
        MoveCommand.__super__.end.call(this);
        return true;
      };

      MoveCommand.prototype.updateCallback = function(results) {
        var result, _i, _len;
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          result = results[_i];
          R.loader.checkError(result);
        }
      };

      return MoveCommand;

    })(CommandManager);
    R.MoveCommand = MoveCommand;
    ModifyPointCommand = (function(_super) {
      __extends(ModifyPointCommand, _super);

      ModifyPointCommand.needValidPosition = true;

      function ModifyPointCommand(item) {
        this.item = item;
        this.segment = this.item.selectionState.segment;
        this.previousPosition = new P.Point(this.segment.point);
        this.previousHandleIn = new P.Point(this.segment.handleIn);
        this.previousHandleOut = new P.Point(this.segment.handleOut);
        ModifyPointCommand.__super__.constructor.call(this, 'Modify point');
        return;
      }

      ModifyPointCommand.prototype["do"] = function() {
        this.item.modifyPoint(this.segment, this.position, this.handleIn, this.handleOut);
        ModifyPointCommand.__super__["do"].call(this);
      };

      ModifyPointCommand.prototype.undo = function() {
        this.item.modifyPoint(this.segment, this.previousPosition, this.previousHandleIn, this.previousHandleOut);
        ModifyPointCommand.__super__.undo.call(this);
      };

      ModifyPointCommand.prototype.update = function(event) {
        this.item.updateModifyPoint(event);
      };

      ModifyPointCommand.prototype.end = function(valid) {
        var handleInNotChanged, handleOutNotChanged, positionNotChanged;
        this.position = this.segment.point.clone();
        this.handleIn = this.segment.handleIn.clone();
        this.handleOut = this.segment.handleOut.clone();
        if (!valid) {
          return;
        }
        positionNotChanged = this.position.equals(this.previousPosition);
        handleInNotChanged = this.previousHandleIn.equals(this.handleIn);
        handleOutNotChanged = this.previousHandleOut.equals(this.handleOut);
        if (positionNotChanged && handleInNotChanged && handleOutNotChanged) {
          return false;
        }
        this.item.endModifyPoint();
        ModifyPointCommand.__super__.end.call(this);
        return true;
      };

      return ModifyPointCommand;

    })(Command);
    R.ModifyPointCommand = ModifyPointCommand;
    ModifySpeedCommand = (function(_super) {
      __extends(ModifySpeedCommand, _super);

      function ModifySpeedCommand(item) {
        this.item = item;
        this.previousSpeeds = this.item.speeds.slice();
        ModifySpeedCommand.__super__.constructor.call(this, 'Change speed');
        return;
      }

      ModifySpeedCommand.prototype.positionIsValid = function() {
        return true;
      };

      ModifySpeedCommand.prototype["do"] = function() {
        this.item.modifySpeed(this.speeds, true);
        ModifySpeedCommand.__super__["do"].call(this);
      };

      ModifySpeedCommand.prototype.undo = function() {
        this.speeds = this.item.speeds.slice();
        this.item.modifySpeed(this.previousSpeeds, true);
        ModifySpeedCommand.__super__.undo.call(this);
      };

      ModifySpeedCommand.prototype.update = function(event) {
        this.item.updateModifySpeed(event);
      };

      ModifySpeedCommand.prototype.end = function(valid) {
        if (!valid) {
          return;
        }
        this.item.endModifySpeed();
        ModifySpeedCommand.__super__.end.call(this);
        return true;
      };

      return ModifySpeedCommand;

    })(Command);
    R.ModifySpeedCommand = ModifySpeedCommand;
    SetParameterCommand = (function(_super) {
      __extends(SetParameterCommand, _super);

      function SetParameterCommand(item, args) {
        this.item = item;
        this.controller = args[0];
        this.previousValue = this.item.data[this.controller.name];
        SetParameterCommand.__super__.constructor.call(this, 'Change item parameter "' + this.controller.name + '"');
        return;
      }

      SetParameterCommand.prototype["do"] = function() {
        this.item.setParameter(this.controller, this.value, true);
        SetParameterCommand.__super__["do"].call(this);
      };

      SetParameterCommand.prototype.undo = function() {
        this.item.setParameter(this.controller, this.previousValue, true);
        SetParameterCommand.__super__.undo.call(this);
      };

      SetParameterCommand.prototype.update = function(controller, value) {
        this.item.setParameter(controller, value);
      };

      SetParameterCommand.prototype.end = function(valid) {
        this.value = this.item.data[this.controller.name];
        if (this.value === this.previousValue) {
          return false;
        }
        if (!valid) {
          return;
        }
        this.item.update(this.controller.name);
        SetParameterCommand.__super__.end.call(this);
        return true;
      };

      return SetParameterCommand;

    })(Command);
    R.SetParameterCommand = SetParameterCommand;
    AddPointCommand = (function(_super) {
      __extends(AddPointCommand, _super);

      AddPointCommand.needValidPosition = true;

      function AddPointCommand(item, location, name) {
        this.item = item;
        this.location = location;
        if (name == null) {
          name = null;
        }
        AddPointCommand.__super__.constructor.call(this, name == null ? 'Add point on item' : name);
        return;
      }

      AddPointCommand.prototype.addPoint = function(update) {
        if (update == null) {
          update = true;
        }
        this.segment = this.item.addPointAt(this.location, update);
      };

      AddPointCommand.prototype.deletePoint = function() {
        this.location = this.item.deletePoint(this.segment);
      };

      AddPointCommand.prototype["do"] = function() {
        this.addPoint();
        AddPointCommand.__super__["do"].call(this);
      };

      AddPointCommand.prototype.undo = function() {
        this.deletePoint();
        AddPointCommand.__super__.undo.call(this);
      };

      return AddPointCommand;

    })(Command);
    R.AddPointCommand = AddPointCommand;
    DeletePointCommand = (function(_super) {
      __extends(DeletePointCommand, _super);

      DeletePointCommand.needValidPosition = true;

      function DeletePointCommand(item, segment) {
        this.item = item;
        this.segment = segment;
        DeletePointCommand.__super__.constructor.call(this, this.item, this.segment, 'Delete point on item');
      }

      DeletePointCommand.prototype["do"] = function() {
        this.previousPosition = new P.Point(this.segment.point);
        this.previousHandleIn = new P.Point(this.segment.handleIn);
        this.previousHandleOut = new P.Point(this.segment.handleOut);
        this.deletePoint();
        this.superDo();
      };

      DeletePointCommand.prototype.undo = function() {
        this.addPoint(false);
        this.item.modifyPoint(this.segment, this.previousPosition, this.previousHandleIn, this.previousHandleOut);
        this.superUndo();
      };

      return DeletePointCommand;

    })(AddPointCommand);
    R.DeletePointCommand = DeletePointCommand;
    ModifyPointTypeCommand = (function(_super) {
      __extends(ModifyPointTypeCommand, _super);

      ModifyPointTypeCommand.needValidPosition = true;

      function ModifyPointTypeCommand(item, segment, rtype) {
        this.item = item;
        this.segment = segment;
        this.rtype = rtype;
        this.previousRType = this.segment.rtype;
        this.previousPosition = new P.Point(this.segment.point);
        this.previousHandleIn = new P.Point(this.segment.handleIn);
        this.previousHandleOut = new P.Point(this.segment.handleOut);
        ModifyPointTypeCommand.__super__.constructor.call(this, 'Change point type on item');
        return;
      }

      ModifyPointTypeCommand.prototype["do"] = function() {
        this.item.modifyPointType(this.segment, this.rtype);
        ModifyPointTypeCommand.__super__["do"].call(this);
      };

      ModifyPointTypeCommand.prototype.undo = function() {
        this.item.modifyPointType(this.segment, this.previousRType, true, false);
        this.item.changeSegment(this.segment, this.previousPosition, this.previousHandleIn, this.previousHandleOut);
        ModifyPointTypeCommand.__super__.undo.call(this);
      };

      return ModifyPointTypeCommand;

    })(Command);
    R.ModifyPointTypeCommand = ModifyPointTypeCommand;

    /* --- Custom command for all kinds of command which modifiy the path --- */
    ModifyControlPathCommand = (function(_super) {
      __extends(ModifyControlPathCommand, _super);

      ModifyControlPathCommand.needValidPosition = true;

      function ModifyControlPathCommand(item, previousPointsAndPlanet, newPointsAndPlanet) {
        this.item = item;
        this.previousPointsAndPlanet = previousPointsAndPlanet;
        this.newPointsAndPlanet = newPointsAndPlanet;
        ModifyControlPathCommand.__super__.constructor.call(this, 'Modify path');
        this.superDo();
        return;
      }

      ModifyControlPathCommand.prototype["do"] = function() {
        this.item.modifyControlPath(this.newPointsAndPlanet);
        ModifyControlPathCommand.__super__["do"].call(this);
      };

      ModifyControlPathCommand.prototype.undo = function() {
        this.item.modifyControlPath(this.previousPointsAndPlanet);
        ModifyControlPathCommand.__super__.undo.call(this);
      };

      return ModifyControlPathCommand;

    })(Command);
    R.ModifyControlPathCommand = ModifyControlPathCommand;
    MoveViewCommand = (function(_super) {
      __extends(MoveViewCommand, _super);

      function MoveViewCommand(previousPosition, newPosition) {
        this.previousPosition = previousPosition;
        this.newPosition = newPosition;
        this.updateCommandItems = __bind(this.updateCommandItems, this);
        MoveViewCommand.__super__.constructor.call(this, "Move view");
        this.superDo();
        return;
      }

      MoveViewCommand.prototype.updateCommandItems = function() {
        var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
        console.log("updateCommandItems");
        document.removeEventListener('command executed', this.updateCommandItems);
        _ref = R.commandManager.history;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          if (command.item != null) {
            if ((command.item.group == null) && R.items[command.item.pk || command.item.id]) {
              command.item = R.items[command.item.pk || command.item.id];
            }
          }
          if (command.items != null) {
            _ref1 = command.items;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              item = _ref1[i];
              if ((item.group == null) && R.items[item.pk || item.id]) {
                command.items[i] = R.items[item.pk || item.id];
              }
            }
          }
        }
      };

      MoveViewCommand.prototype["do"] = function() {
        var somethingToLoad;
        somethingToLoad = View.moveBy(this.newPosition.subtract(this.previousPosition), false);
        if (somethingToLoad) {
          document.addEventListener('command executed', this.updateCommandItems);
        }
        MoveViewCommand.__super__["do"].call(this);
        return somethingToLoad;
      };

      MoveViewCommand.prototype.undo = function() {
        var somethingToLoad;
        somethingToLoad = View.moveBy(this.previousPosition.subtract(this.newPosition), false);
        if (somethingToLoad) {
          document.addEventListener('command executed', this.updateCommandItems);
        }
        MoveViewCommand.__super__.undo.call(this);
        return somethingToLoad;
      };

      return MoveViewCommand;

    })(Command);
    R.MoveViewCommand = MoveViewCommand;
    SelectCommand = (function(_super) {
      __extends(SelectCommand, _super);

      function SelectCommand(items, name) {
        this.items = this.mapItems(items);
        SelectCommand.__super__.constructor.call(this, name || "Select items");
        return;
      }

      SelectCommand.prototype.selectItems = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.select();
        }
        R.controllerManager.updateParametersForSelectedItems();
      };

      SelectCommand.prototype.deselectItems = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.deselect();
        }
        R.controllerManager.updateParametersForSelectedItems();
      };

      SelectCommand.prototype["do"] = function() {
        this.selectItems();
        SelectCommand.__super__["do"].call(this);
      };

      SelectCommand.prototype.undo = function() {
        this.deselectItems();
        SelectCommand.__super__.undo.call(this);
      };

      return SelectCommand;

    })(Command);
    R.SelectCommand = SelectCommand;
    DeselectCommand = (function(_super) {
      __extends(DeselectCommand, _super);

      function DeselectCommand(items) {
        DeselectCommand.__super__.constructor.call(this, items || R.selectedItems.slice(), 'Deselect items');
        return;
      }

      DeselectCommand.prototype["do"] = function() {
        this.deselectItems();
        this.superDo();
      };

      DeselectCommand.prototype.undo = function() {
        this.selectItems();
        this.superUndo();
      };

      return DeselectCommand;

    })(SelectCommand);
    R.DeselectCommand = DeselectCommand;
    CreateItemCommand = (function(_super) {
      __extends(CreateItemCommand, _super);

      CreateItemCommand.needValidPosition = true;

      function CreateItemCommand(item, name) {
        this.item = item;
        if (name == null) {
          name = null;
        }
        if (name == null) {
          name = 'Create item';
        }
        this.itemConstructor = this.item.constructor;
        CreateItemCommand.__super__.constructor.call(this, name);
        this.superDo();
        return;
      }

      CreateItemCommand.prototype.setDuplicatedItemToCommands = function() {
        var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
        _ref = R.commandManager.history;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          if (command === this) {
            continue;
          }
          if ((command.item != null) && command.item === this.itemPk) {
            command.item = this.item;
          }
          if (command.items != null) {
            _ref1 = command.items;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              item = _ref1[i];
              if (item === this.itemPk) {
                command.items[i] = this.item;
              }
            }
          }
        }
      };

      CreateItemCommand.prototype.removeDeleteItemFromCommands = function() {
        var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
        _ref = R.commandManager.history;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          if (command === this) {
            continue;
          }
          if ((command.item != null) && command.item === this.item) {
            command.item = this.item.pk || this.item.id;
          }
          if (command.items != null) {
            _ref1 = command.items;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              item = _ref1[i];
              if (item === this.item) {
                command.items[i] = this.item.pk || this.item.id;
              }
            }
          }
        }
        this.itemPk = this.item.pk || this.item.id;
      };

      CreateItemCommand.prototype.duplicateItem = function() {
        this.item = this.itemConstructor.create(this.duplicateData);
        this.setDuplicatedItemToCommands();
        this.item.select();
      };

      CreateItemCommand.prototype.deleteItem = function() {
        this.removeDeleteItemFromCommands();
        this.duplicateData = this.item.getDuplicateData();
        this.item["delete"]();
        this.item = null;
      };

      CreateItemCommand.prototype["do"] = function() {
        this.duplicateItem();
        CreateItemCommand.__super__["do"].call(this);
      };

      CreateItemCommand.prototype.undo = function() {
        this.deleteItem();
        CreateItemCommand.__super__.undo.call(this);
      };

      return CreateItemCommand;

    })(Command);
    R.CreateItemCommand = CreateItemCommand;
    DeleteItemCommand = (function(_super) {
      __extends(DeleteItemCommand, _super);

      function DeleteItemCommand(item) {
        DeleteItemCommand.__super__.constructor.call(this, item, 'Delete item');
      }

      DeleteItemCommand.prototype["do"] = function() {
        this.deleteItem();
        this.superDo();
      };

      DeleteItemCommand.prototype.undo = function() {
        this.duplicateItem();
        this.superUndo();
      };

      return DeleteItemCommand;

    })(CreateItemCommand);
    R.DeleteItemCommand = DeleteItemCommand;
    DuplicateItemCommand = (function(_super) {
      __extends(DuplicateItemCommand, _super);

      function DuplicateItemCommand(item) {
        this.duplicateData = item.getDuplicateData();
        DuplicateItemCommand.__super__.constructor.call(this, item, 'Duplicate item');
      }

      return DuplicateItemCommand;

    })(CreateItemCommand);
    R.DuplicateItemCommand = DuplicateItemCommand;
    ModifyTextCommand = (function(_super) {
      __extends(ModifyTextCommand, _super);

      function ModifyTextCommand(item, args) {
        this.item = item;
        ModifyTextCommand.__super__.constructor.call(this, "Change text", this.item);
        this.newText = args[0];
        this.previousText = this.item.data.message;
        return;
      }

      ModifyTextCommand.prototype["do"] = function() {
        this.item.data.message = this.newText;
        this.item.contentJ.val(this.newText);
        ModifyTextCommand.__super__["do"].call(this);
      };

      ModifyTextCommand.prototype.undo = function() {
        this.item.data.message = this.previousText;
        this.item.contentJ.val(this.previousText);
        ModifyTextCommand.__super__.undo.call(this);
      };

      ModifyTextCommand.prototype.update = function(newText) {
        this.newText = newText;
        this.item.setText(this.newText, false);
      };

      ModifyTextCommand.prototype.end = function(valid) {
        if (this.newText === this.previousText) {
          return false;
        }
        if (!valid) {
          return false;
        }
        this.item.update('text');
        ModifyTextCommand.__super__.end.call(this);
        return true;
      };

      return ModifyTextCommand;

    })(Command);
    R.ModifyTextCommand = ModifyTextCommand;
    CommandManager = (function() {
      CommandManager.maxCommandNumber = 20;

      function CommandManager() {
        this.endAction = __bind(this.endAction, this);
        this.toggleCurrentCommand = __bind(this.toggleCurrentCommand, this);
        this.history = [];
        this.itemToCommands = {};
        this.currentCommand = -1;
        this.historyJ = $("#History ul.history");
        return;
      }

      CommandManager.prototype.add = function(command, execute) {
        var currentLiJ, firstCommand, _ref;
        if (execute == null) {
          execute = false;
        }
        if (this.currentCommand >= this.constructor.maxCommandNumber - 1) {
          firstCommand = this.history.shift();
          firstCommand["delete"]();
          this.currentCommand--;
        }
        currentLiJ = (_ref = this.history[this.currentCommand]) != null ? _ref.liJ : void 0;
        if (currentLiJ != null) {
          currentLiJ.nextAll().remove();
        }
        this.historyJ.append(command.liJ);
        $("#History .mCustomScrollbar").mCustomScrollbar("scrollTo", "bottom");
        this.currentCommand++;
        this.history.splice(this.currentCommand, this.history.length - this.currentCommand, command);
        this.mapItemsToCommand(command);
        if (execute) {
          command["do"]();
        }
      };

      CommandManager.prototype.toggleCurrentCommand = function() {
        var deferred;
        console.log("toggleCurrentCommand");
        $('#loadingMask').css({
          'visibility': 'hidden'
        });
        document.removeEventListener('command executed', this.toggleCurrentCommand);
        if (this.currentCommand === this.commandIndex) {
          return;
        }
        deferred = this.history[this.currentCommand + this.offset].toggle();
        this.currentCommand += this.direction;
        if (deferred) {
          $('#loadingMask').css({
            'visibility': 'visible'
          });
          document.addEventListener('command executed', this.toggleCurrentCommand);
        } else {
          this.toggleCurrentCommand();
        }
      };

      CommandManager.prototype.commandClicked = function(command) {
        this.commandIndex = this.getCommandIndex(command);
        if (this.currentCommand === this.commandIndex) {
          return;
        }
        if (this.currentCommand > this.commandIndex) {
          this.direction = -1;
          this.offset = 0;
        } else {
          this.direction = 1;
          this.offset = 1;
        }
        this.toggleCurrentCommand();
      };

      CommandManager.prototype.getCommandIndex = function(command) {
        var c, i, _i, _len, _ref;
        _ref = this.history;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          c = _ref[i];
          if (c === command) {
            return i;
          }
        }
        return -1;
      };

      CommandManager.prototype.getCurrentCommand = function() {
        return this.history[this.currentCommand];
      };

      CommandManager.prototype.clearHistory = function() {
        this.historyJ.empty();
        this.history = [];
        this.currentCommand = -1;
        this.add(new R.Command("Load Romanesco"), true);
      };

      CommandManager.prototype.beginAction = function(command) {
        if (this.currentCommand) {
          this.endAction();
          clearTimeout(R.updateTimeout['addCurrentCommand-' + this.currentCommand.id]);
        }
        this.currentCommand = command;
      };

      CommandManager.prototype.updateAction = function() {
        this.currentCommand.update.apply(this.currentCommand, arguments);
      };

      CommandManager.prototype.endAction = function() {
        this.currentCommand.end(positionIsValid);
        this.currentCommand = null;
      };

      CommandManager.prototype.deferredAction = function() {
        var ActionCommand, args, items;
        ActionCommand = arguments[0], items = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (!ActionCommand.prototype.isPrototypeOf(this.currentCommand)) {
          this.beginAction(new ActionCommand(items, args));
        }
        this.updateAction.apply(args);
        Utils.deferredExecution(this.endAction, 'addCurrentCommand-' + this.currentCommand.id);
      };

      CommandManager.prototype.mapItemsToCommand = function(command) {
        var item, items, _base, _i, _len, _name;
        items = command.items != null ? command.items : [command.item];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if ((_base = this.itemToCommands)[_name = item.getPk()] == null) {
            _base[_name] = [];
          }
          this.itemToCommands[item.getPk()].push(command);
        }
      };

      CommandManager.prototype.setItemPk = function(id, pk) {
        this.itemToCommands[pk] = this.itemToCommands[id];
        delete this.itemToCommands[id];
      };

      CommandManager.prototype.removeItem = function(item) {
        var command, pk, _i, _len, _ref;
        pk = item.getPk();
        _ref = this.itemToCommands[pk];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          if (command.items != null) {
            command.items[pk] = pk;
            if (command.itemPks == null) {
              command.itemPks = {};
            }
            command.itemPks[pk] = pk;
          }
        }
      };

      CommandManager.prototype.loadItem = function(item) {
        var command, _i, _len, _ref;
        _ref = this.itemToCommands[item.getPk()];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          command.item = item;
        }
      };

      CommandManager.prototype.deleteCommand = function(command) {
        var pk;
        pk = command.item != null ? command.item.getPk() : command.itemPk;
        _.remove(this.itemToCommands[pk], command);
      };

      return CommandManager;

    })();
    return CommandManager;
  });

}).call(this);

//# sourceMappingURL=Command.map
