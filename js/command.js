// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['Utils/Utils'], function(Utils) {
    var Command, CommandManager;
    Command = (function() {
      function Command(name) {
        this.name = name;
        this.click = __bind(this.click, this);
        this.liJ = $("<li>").text(this.name);
        this.liJ.click(this.click);
        this.id = Math.random();
        return;
      }

      Command.prototype.superDo = function() {
        this.done = true;
        this.liJ.addClass('done');
      };

      Command.prototype.superUndo = function() {
        this.done = false;
        this.liJ.removeClass('done');
      };

      Command.prototype["do"] = function() {
        this.superDo();
        $(this).triggerHandler('do');
      };

      Command.prototype.undo = function() {
        this.superUndo();
        $(this).triggerHandler('undo');
      };

      Command.prototype.click = function() {
        R.commandManager.commandClicked(this);
      };

      Command.prototype.toggle = function() {
        if (this.done) {
          return this.undo();
        } else {
          return this["do"]();
        }
      };

      Command.prototype["delete"] = function() {
        this.liJ.remove();
      };

      Command.prototype.update = function() {};

      Command.prototype.end = function() {
        this.superDo();
      };

      return Command;

    })();
    R.Command = Command;
    Command.Items = (function(_super) {
      __extends(Items, _super);

      function Items(name, items) {
        Items.__super__.constructor.call(this, name);
        this.items = mapItems(items);
        return;
      }

      Items.prototype.mapItems = function(items) {
        var item, map, _i, _len;
        map = {};
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          map[item.getPk()] = item;
        }
        return map;
      };

      Items.prototype.apply = function(method, args) {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item[method].apply(item, args);
        }
      };

      Items.prototype.call = function() {
        var args, method;
        method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        this.apply(method, args);
      };

      Items.prototype.update = function() {};

      Items.prototype.end = function() {
        if (this.positionIsValid()) {
          Items.__super__.end.call(this);
        } else {
          this.undo();
        }
      };

      Items.prototype.positionIsValid = function() {
        var item, pk, _ref;
        if (this.constructor.disablePositionCheck) {
          return true;
        }
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          if (!Lock.validatePosition(item)) {
            return false;
          }
        }
        return true;
      };

      Items.prototype.unloadItem = function(item) {
        this.items[item.pk] = null;
      };

      Items.prototype.loadItem = function(item) {
        this.items[item.pk] = item;
      };

      Items.prototype.resurrectItem = function(pk, item) {
        this.items[pk] = item;
      };

      Items.prototype["delete"] = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          _.remove(R.commandManager.itemToCommands[pk], this);
        }
        Items.__super__["delete"].call(this);
      };

      return Items;

    })(Command);
    Command.Item = (function(_super) {
      __extends(Item, _super);

      function Item(name, items) {
        items = Utils.Array.isArray(items) ? items : [items];
        this.item = items[0];
        Item.__super__.constructor.call(this, name, items);
        return;
      }

      Item.prototype.unloadItem = function(item) {
        this.item = {
          pk: item.pk
        };
        Item.__super__.unloadItem.call(this, item);
      };

      Item.prototype.loadItem = function(item) {
        this.item = item;
        Item.__super__.loadItem.call(this, item);
      };

      Item.prototype.resurrectItem = function(pk, item) {
        this.item = item;
        Item.__super__.resurrectItem.call(this, pk, item);
      };

      return Item;

    })(Command.Items);
    Command.Deferred = (function(_super) {
      __extends(Deferred, _super);

      Deferred.initialize = function(method) {
        this.method = method;
        this.Method = Utils.capitalizeFirstLetter(method);
        this.beginMethod = 'begin' + this.Method;
        this.updateMethod = 'update' + this.Method;
        this.endMethod = 'end' + this.Method;
      };

      function Deferred(name, items) {
        Deferred.__super__.constructor.call(this, name, items);
        return;
      }

      Deferred.prototype.update = function() {};

      Deferred.prototype.end = function() {
        Deferred.__super__.end.call(this);
        if (!this.commandChanged()) {
          return;
        }
        this.apply(this.constructor.endMethod, []);
        R.commandManager.add(this);
        this.updateItems();
      };

      Deferred.prototype.commandChanged = function() {};

      Deferred.prototype.updateItems = function(type) {
        var args, item, pk, _ref;
        args = [];
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.addUpdateFunctionAndArguments(args, type);
        }
        Dajaxice.draw.multipleCalls(this.updateCallback, {
          functionsAndArguments: args
        });
      };

      Deferred.prototype.updateCallback = function(results) {
        var result, _i, _len;
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          result = results[_i];
          R.loader.checkError(result);
        }
      };

      return Deferred;

    })(Command.Item);
    Command.SelectionRectangle = (function(_super) {
      __extends(SelectionRectangle, _super);

      function SelectionRectangle(items) {
        SelectionRectangle.__super__.constructor.call(this, this.Method + ' items', items);
        return;
      }

      SelectionRectangle.prototype.begin = function(event) {
        Tool.Select.selectionRectangle[this.constructor.beginMethod](event);
      };

      SelectionRectangle.prototype.update = function(event) {
        Tool.Select.selectionRectangle[this.constructor.updateMethod](event);
        SelectionRectangle.__super__.update.call(this, event);
      };

      SelectionRectangle.prototype.end = function(event) {
        this.args = Tool.Select.selectionRectangle[this.constructor.endMethod](event);
        SelectionRectangle.__super__.end.call(this, event);
      };

      SelectionRectangle.prototype["do"] = function() {
        this.apply(this.constructor.method, this.args);
        SelectionRectangle.__super__["do"].call(this);
      };

      SelectionRectangle.prototype.undo = function() {
        this.apply(this.constructor.method, this.negate(this.args));
        SelectionRectangle.__super__.undo.call(this);
      };

      SelectionRectangle.prototype.negate = function(args) {
        args[0].multiply(-1);
        return args;
      };

      SelectionRectangle.prototype.commandChanged = function() {
        var delta;
        delta = args[0];
        return delta.x !== 0 && delta.y !== 0;
      };

      return SelectionRectangle;

    })(Command.Deferred);
    Command.Scale = (function(_super) {
      __extends(Scale, _super);

      function Scale() {
        return Scale.__super__.constructor.apply(this, arguments);
      }

      Scale.initialize('scale');

      return Scale;

    })(Command.SelectionRectangle);
    Command.Rotation = (function(_super) {
      __extends(Rotation, _super);

      function Rotation() {
        return Rotation.__super__.constructor.apply(this, arguments);
      }

      Rotation.initialize('rotate');

      Rotation.prototype.negate = function(args) {
        args[0] *= -1;
        return args;
      };

      Rotation.prototype.commandChanged = function() {
        return args[0] !== 0;
      };

      return Rotation;

    })(Command.SelectionRectangle);
    Command.Translate = (function(_super) {
      __extends(Translate, _super);

      function Translate() {
        return Translate.__super__.constructor.apply(this, arguments);
      }

      Translate.initialize('translate');

      return Translate;

    })(Command.SelectionRectangle);
    Command.BeforeAfter = (function(_super) {
      __extends(BeforeAfter, _super);

      BeforeAfter.initialize = function(method, name) {
        this.name = name;
        BeforeAfter.__super__.constructor.initialize.call(this, method);
      };

      function BeforeAfter(name, item) {
        BeforeAfter.__super__.constructor.call(this, name || this.constructor.name, item);
        this.beforeArgs = this.getState();
        return;
      }

      BeforeAfter.prototype.getState = function() {};

      BeforeAfter.prototype.update = function() {
        this.apply(this.constructor.updateMethod, arguments);
      };

      BeforeAfter.prototype.commandChanged = function() {
        var beforeArg, i, _i, _len, _ref;
        _ref = this.beforeArgs;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          beforeArg = _ref[i];
          if (beforeArg !== this.afterArgs[i]) {
            return false;
          }
        }
        return true;
      };

      BeforeAfter.prototype["do"] = function() {
        this.apply(this.constructor.method, this.afterArgs);
        BeforeAfter.__super__["do"].call(this);
      };

      BeforeAfter.prototype.undo = function() {
        this.afterArgs = this.getState();
        this.apply(this.constructor.method, this.beforeArgs);
        BeforeAfter.__super__.undo.call(this);
      };

      return BeforeAfter;

    })(Command.Deferred);
    Command.ModifyPoint = (function(_super) {
      __extends(ModifyPoint, _super);

      function ModifyPoint() {
        return ModifyPoint.__super__.constructor.apply(this, arguments);
      }

      ModifyPoint.initialize('modifiyPoint', 'Modify point');

      ModifyPoint.prototype.getState = function() {
        var segment;
        segment = this.item.selectionState.segment;
        return [segment.point.clone(), segment.handleIn.clone(), segment.handleOut.clone()];
      };

      return ModifyPoint;

    })(Command.BeforeAfter);
    Command.ModifySpeed = (function(_super) {
      __extends(ModifySpeed, _super);

      function ModifySpeed() {
        return ModifySpeed.__super__.constructor.apply(this, arguments);
      }

      ModifySpeed.disablePositionCheck = true;

      ModifySpeed.initialize('modifiySpeed', 'Modify speed');

      ModifySpeed.prototype.getState = function() {
        return [this.item.speeds.slice()];
      };

      ModifySpeed.prototype.commandChanged = function() {
        return true;
      };

      return ModifySpeed;

    })(Command.BeforeAfter);
    Command.SetParameter = (function(_super) {
      __extends(SetParameter, _super);

      SetParameter.initialize('modifiyParameter');

      function SetParameter(item, controller) {
        controller.listen(this);
        this.name = controller.name;
        SetParameter.__super__.constructor.call(this, 'Change item parameter "' + this.name + '"', item);
        return;
      }

      SetParameter.prototype.getState = function() {
        return [this.name, this.item.data[this.name]];
      };

      return SetParameter;

    })(Command.BeforeAfter);
    Command.AddPoint = (function(_super) {
      __extends(AddPoint, _super);

      function AddPoint(item, location, name) {
        this.location = location;
        if (name == null) {
          name = 'Add point on item';
        }
        AddPoint.__super__.constructor.call(this, name, [item]);
        return;
      }

      AddPoint.prototype.addPoint = function(update) {
        if (update == null) {
          update = true;
        }
        this.segment = this.item.addPointAt(this.location, update);
      };

      AddPoint.prototype.deletePoint = function() {
        this.location = this.item.deletePoint(this.segment);
      };

      AddPoint.prototype["do"] = function() {
        this.addPoint();
        AddPoint.__super__["do"].call(this);
      };

      AddPoint.prototype.undo = function() {
        this.deletePoint();
        AddPoint.__super__.undo.call(this);
      };

      return AddPoint;

    })(Command.Item);
    Command.DeletePoint = (function(_super) {
      __extends(DeletePoint, _super);

      function DeletePoint(item, segment) {
        this.segment = segment;
        DeletePoint.__super__.constructor.call(this, item, this.segment, 'Delete point on item');
      }

      DeletePoint.prototype["do"] = function() {
        this.previousPosition = new P.Point(this.segment.point);
        this.previousHandleIn = new P.Point(this.segment.handleIn);
        this.previousHandleOut = new P.Point(this.segment.handleOut);
        this.deletePoint();
        this.superDo();
      };

      DeletePoint.prototype.undo = function() {
        this.addPoint(false);
        this.item.modifyPoint(this.segment, this.previousPosition, this.previousHandleIn, this.previousHandleOut);
        this.superUndo();
      };

      return DeletePoint;

    })(Command.AddPoint);
    Command.ModifyPointType = (function(_super) {
      __extends(ModifyPointType, _super);

      function ModifyPointType(item, segment, rtype) {
        this.segment = segment;
        this.rtype = rtype;
        this.previousRType = this.segment.rtype;
        this.previousPosition = new P.Point(this.segment.point);
        this.previousHandleIn = new P.Point(this.segment.handleIn);
        this.previousHandleOut = new P.Point(this.segment.handleOut);
        ModifyPointType.__super__.constructor.call(this, 'Change point type on item', [item]);
        return;
      }

      ModifyPointType.prototype["do"] = function() {
        this.item.modifyPointType(this.segment, this.rtype);
        ModifyPointType.__super__["do"].call(this);
      };

      ModifyPointType.prototype.undo = function() {
        this.item.modifyPointType(this.segment, this.previousRType, true, false);
        this.item.changeSegment(this.segment, this.previousPosition, this.previousHandleIn, this.previousHandleOut);
        ModifyPointType.__super__.undo.call(this);
      };

      return ModifyPointType;

    })(Command.Item);

    /* --- Custom command for all kinds of command which modifiy the path --- */
    Command.ModifyControlPath = (function(_super) {
      __extends(ModifyControlPath, _super);

      function ModifyControlPath(item, previousPointsAndPlanet, newPointsAndPlanet) {
        this.previousPointsAndPlanet = previousPointsAndPlanet;
        this.newPointsAndPlanet = newPointsAndPlanet;
        ModifyControlPath.__super__.constructor.call(this, 'Modify path', [item]);
        this.superDo();
        return;
      }

      ModifyControlPath.prototype["do"] = function() {
        this.item.modifyControlPath(this.newPointsAndPlanet);
        ModifyControlPath.__super__["do"].call(this);
      };

      ModifyControlPath.prototype.undo = function() {
        this.item.modifyControlPath(this.previousPointsAndPlanet);
        ModifyControlPath.__super__.undo.call(this);
      };

      return ModifyControlPath;

    })(Command.Item);
    Command.MoveView = (function(_super) {
      __extends(MoveView, _super);

      function MoveView(previousPosition, newPosition) {
        this.previousPosition = previousPosition;
        this.newPosition = newPosition;
        this.updateCommandItems = __bind(this.updateCommandItems, this);
        MoveView.__super__.constructor.call(this, "Move view");
        this.superDo();
        return;
      }

      MoveView.prototype.updateCommandItems = function() {
        var command, i, item, _i, _j, _len, _len1, _ref, _ref1;
        console.log("updateCommandItems");
        document.removeEventListener('command executed', this.updateCommandItems);
        _ref = R.commandManager.history;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          command = _ref[_i];
          if (command.item != null) {
            if ((command.item.group == null) && R.items[command.item.pk || command.item.id]) {
              command.item = R.items[command.item.pk || command.item.id];
            }
          }
          if (command.items != null) {
            _ref1 = command.items;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              item = _ref1[i];
              if ((item.group == null) && R.items[item.pk || item.id]) {
                command.items[i] = R.items[item.pk || item.id];
              }
            }
          }
        }
      };

      MoveView.prototype["do"] = function() {
        var somethingToLoad;
        somethingToLoad = View.moveBy(this.newPosition.subtract(this.previousPosition), false);
        if (somethingToLoad) {
          document.addEventListener('command executed', this.updateCommandItems);
        }
        MoveView.__super__["do"].call(this);
        return somethingToLoad;
      };

      MoveView.prototype.undo = function() {
        var somethingToLoad;
        somethingToLoad = View.moveBy(this.previousPosition.subtract(this.newPosition), false);
        if (somethingToLoad) {
          document.addEventListener('command executed', this.updateCommandItems);
        }
        MoveView.__super__.undo.call(this);
        return somethingToLoad;
      };

      return MoveView;

    })(Command);
    Command.Select = (function(_super) {
      __extends(Select, _super);

      function Select(items, name) {
        this.items = this.mapItems(items);
        Select.__super__.constructor.call(this, name || "Select items");
        return;
      }

      Select.prototype.selectItems = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.select();
        }
        R.controllerManager.updateParametersForSelectedItems();
      };

      Select.prototype.deselectItems = function() {
        var item, pk, _ref;
        _ref = this.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.deselect();
        }
        R.controllerManager.updateParametersForSelectedItems();
      };

      Select.prototype["do"] = function() {
        this.selectItems();
        Select.__super__["do"].call(this);
      };

      Select.prototype.undo = function() {
        this.deselectItems();
        Select.__super__.undo.call(this);
      };

      return Select;

    })(Command);
    Command.Deselect = (function(_super) {
      __extends(Deselect, _super);

      function Deselect(items) {
        Deselect.__super__.constructor.call(this, items || R.selectedItems.slice(), 'Deselect items');
        return;
      }

      Deselect.prototype["do"] = function() {
        this.deselectItems();
        this.superDo();
      };

      Deselect.prototype.undo = function() {
        this.selectItems();
        this.superUndo();
      };

      return Deselect;

    })(Command.Select);
    Command.CreateItem = (function(_super) {
      __extends(CreateItem, _super);

      function CreateItem(item, name) {
        if (name == null) {
          name = 'Create item';
        }
        this.itemConstructor = item.constructor;
        CreateItem.__super__.constructor.call(this, name, item);
        this.superDo();
        return;
      }

      CreateItem.prototype.duplicateItem = function() {
        this.item = this.itemConstructor.create(this.duplicateData);
        R.commandManager.resurrectItem(this.duplicateData.pk, this.item);
        this.item.select();
      };

      CreateItem.prototype.deleteItem = function() {
        this.duplicateData = this.item.getDuplicateData();
        this.item["delete"]();
        this.item = null;
      };

      CreateItem.prototype["do"] = function() {
        this.duplicateItem();
        CreateItem.__super__["do"].call(this);
      };

      CreateItem.prototype.undo = function() {
        this.deleteItem();
        CreateItem.__super__.undo.call(this);
      };

      return CreateItem;

    })(Command.Item);
    Command.DeleteItem = (function(_super) {
      __extends(DeleteItem, _super);

      function DeleteItem(item) {
        DeleteItem.__super__.constructor.call(this, item, 'Delete item');
      }

      DeleteItem.prototype["do"] = function() {
        this.deleteItem();
        this.superDo();
      };

      DeleteItem.prototype.undo = function() {
        this.duplicateItem();
        this.superUndo();
      };

      return DeleteItem;

    })(Command.CreateItem);
    Command.DuplicateItem = (function(_super) {
      __extends(DuplicateItem, _super);

      function DuplicateItem(item) {
        this.duplicateData = item.getDuplicateData();
        DuplicateItem.__super__.constructor.call(this, item, 'Duplicate item');
      }

      return DuplicateItem;

    })(Command.CreateItem);
    Command.ModifyText = (function(_super) {
      __extends(ModifyText, _super);

      function ModifyText(item, args) {
        ModifyText.__super__.constructor.call(this, "Change text", item);
        this.newText = args[0];
        this.previousText = this.item.data.message;
        return;
      }

      ModifyText.prototype["do"] = function() {
        this.item.data.message = this.newText;
        this.item.contentJ.val(this.newText);
        ModifyText.__super__["do"].call(this);
      };

      ModifyText.prototype.undo = function() {
        this.item.data.message = this.previousText;
        this.item.contentJ.val(this.previousText);
        ModifyText.__super__.undo.call(this);
      };

      ModifyText.prototype.update = function(newText) {
        this.newText = newText;
        this.item.setText(this.newText, false);
      };

      ModifyText.prototype.end = function(valid) {
        if (this.newText === this.previousText) {
          return false;
        }
        if (!valid) {
          return false;
        }
        this.item.update('text');
        ModifyText.__super__.end.call(this);
        return true;
      };

      return ModifyText;

    })(Command.Item);
    CommandManager = (function() {
      CommandManager.maxCommandNumber = 20;

      function CommandManager() {
        this.endAction = __bind(this.endAction, this);
        this.toggleCurrentCommand = __bind(this.toggleCurrentCommand, this);
        this.history = [];
        this.itemToCommands = {};
        this.currentCommand = -1;
        this.historyJ = $("#History ul.history");
        return;
      }

      CommandManager.prototype.add = function(command, execute) {
        var currentLiJ, firstCommand, _ref;
        if (execute == null) {
          execute = false;
        }
        if (this.currentCommand >= this.constructor.maxCommandNumber - 1) {
          firstCommand = this.history.shift();
          firstCommand["delete"]();
          this.currentCommand--;
        }
        currentLiJ = (_ref = this.history[this.currentCommand]) != null ? _ref.liJ : void 0;
        if (currentLiJ != null) {
          currentLiJ.nextAll().remove();
        }
        this.historyJ.append(command.liJ);
        $("#History .mCustomScrollbar").mCustomScrollbar("scrollTo", "bottom");
        this.currentCommand++;
        this.history.splice(this.currentCommand, this.history.length - this.currentCommand, command);
        this.mapItemsToCommand(command);
        if (execute) {
          command["do"]();
        }
      };

      CommandManager.prototype.toggleCurrentCommand = function() {
        var deferred;
        console.log("toggleCurrentCommand");
        $('#loadingMask').css({
          'visibility': 'hidden'
        });
        document.removeEventListener('command executed', this.toggleCurrentCommand);
        if (this.currentCommand === this.commandIndex) {
          return;
        }
        deferred = this.history[this.currentCommand + this.offset].toggle();
        this.currentCommand += this.direction;
        if (deferred) {
          $('#loadingMask').css({
            'visibility': 'visible'
          });
          document.addEventListener('command executed', this.toggleCurrentCommand);
        } else {
          this.toggleCurrentCommand();
        }
      };

      CommandManager.prototype.commandClicked = function(command) {
        this.commandIndex = this.getCommandIndex(command);
        if (this.currentCommand === this.commandIndex) {
          return;
        }
        if (this.currentCommand > this.commandIndex) {
          this.direction = -1;
          this.offset = 0;
        } else {
          this.direction = 1;
          this.offset = 1;
        }
        this.toggleCurrentCommand();
      };

      CommandManager.prototype.getCommandIndex = function(command) {
        var c, i, _i, _len, _ref;
        _ref = this.history;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          c = _ref[i];
          if (c === command) {
            return i;
          }
        }
        return -1;
      };

      CommandManager.prototype.getCurrentCommand = function() {
        return this.history[this.currentCommand];
      };

      CommandManager.prototype.clearHistory = function() {
        this.historyJ.empty();
        this.history = [];
        this.currentCommand = -1;
        this.add(new R.Command("Load Romanesco"), true);
      };

      CommandManager.prototype.beginAction = function(command, event) {
        if (this.currentCommand) {
          this.endAction();
          clearTimeout(R.updateTimeout['addCurrentCommand-' + this.currentCommand.id]);
        }
        this.currentCommand = command;
        this.currentCommand.begin(event);
      };

      CommandManager.prototype.updateAction = function(event) {
        this.currentCommand.update(event);
      };

      CommandManager.prototype.endAction = function(event) {
        this.currentCommand.end(event);
        this.currentCommand = null;
      };

      CommandManager.prototype.deferredAction = function() {
        var ActionCommand, args, items;
        ActionCommand = arguments[0], items = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (!ActionCommand.prototype.isPrototypeOf(this.currentCommand)) {
          this.beginAction(new ActionCommand(items, args));
        }
        this.updateAction.apply(args);
        Utils.deferredExecution(this.endAction, 'addCurrentCommand-' + this.currentCommand.id);
      };

      CommandManager.prototype.mapItemsToCommand = function(command) {
        var item, _base, _i, _len, _name, _ref;
        _ref = command.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if ((_base = this.itemToCommands)[_name = item.getPk()] == null) {
            _base[_name] = [];
          }
          this.itemToCommands[item.getPk()].push(command);
        }
      };

      CommandManager.prototype.setItemPk = function(id, pk) {
        this.itemToCommands[pk] = this.itemToCommands[id];
        delete this.itemToCommands[id];
      };

      CommandManager.prototype.unloadItem = function(item) {
        var command, commands, _i, _len;
        commands = this.itemToCommands[item.getPk()];
        if (commands != null) {
          for (_i = 0, _len = commands.length; _i < _len; _i++) {
            command = commands[_i];
            command.unloadItem(item);
          }
        }
      };

      CommandManager.prototype.loadItem = function(item) {
        var command, commands, _i, _len;
        commands = this.itemToCommands[item.getPk()];
        if (commands != null) {
          for (_i = 0, _len = commands.length; _i < _len; _i++) {
            command = commands[_i];
            command.loadItem(item);
          }
        }
      };

      CommandManager.prototype.resurrectItem = function(pk, item) {
        var command, commands, _i, _len;
        commands = this.itemToCommands[pk];
        if (commands != null) {
          for (_i = 0, _len = commands.length; _i < _len; _i++) {
            command = commands[_i];
            command.resurrectItem(pk, item);
          }
        }
      };

      return CommandManager;

    })();
    return CommandManager;
  });

}).call(this);

//# sourceMappingURL=Command.map
