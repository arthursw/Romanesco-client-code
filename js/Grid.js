// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils'], function() {
    var Grid;
    Grid = {};
    Grid.rectangleOverlapsTwoPlanets = function(rectangle) {
      var limit;
      limit = R.getLimit();
      if ((rectangle.left < limit.x && rectangle.right > limit.x) || (rectangle.top < limit.y && rectangle.bottom > limit.y)) {
        return true;
      }
      return false;
    };
    Grid.updateLimitPaths = function() {
      var limit;
      limit = R.getLimit();
      R.limitPathV = null;
      R.limitPathH = null;
      if (limit.x >= P.view.bounds.left && limit.x <= P.view.bounds.right) {
        R.limitPathV = new P.Path();
        R.limitPathV.name = 'limitPathV';
        R.limitPathV.strokeColor = 'green';
        R.limitPathV.strokeWidth = 5;
        R.limitPathV.add(limit.x, P.view.bounds.top);
        R.limitPathV.add(limit.x, P.view.bounds.bottom);
        R.grid.addChild(R.limitPathV);
      }
      if (limit.y >= P.view.bounds.top && limit.y <= P.view.bounds.bottom) {
        R.limitPathH = new P.Path();
        R.limitPathH.name = 'limitPathH';
        R.limitPathH.strokeColor = 'green';
        R.limitPathH.strokeWidth = 5;
        R.limitPathH.add(P.view.bounds.left, limit.y);
        R.limitPathH.add(P.view.bounds.right, limit.y);
        R.grid.addChild(R.limitPathH);
      }
    };
    Grid.updateGrid = function() {
      var bounds, boundsCompoundPath, halfSize, left, px, py, snap, top;
      R.grid.removeChildren();
      Grid.updateLimitPaths();
      if (P.view.bounds.width > window.innerWidth || P.view.bounds.height > window.innerHeight) {
        halfSize = new P.Point(window.innerWidth * 0.5, window.innerHeight * 0.5);
        bounds = new P.Rectangle(P.view.center.subtract(halfSize), P.view.center.add(halfSize));
        boundsCompoundPath = new CompoundPath({
          children: [new P.Path.Rectangle(P.view.bounds), new P.Path.Rectangle(bounds)]
        });
        boundsCompoundPath.strokeScaling = false;
        boundsCompoundPath.fillColor = 'rgba(0,0,0,0.1)';
        R.grid.addChild(boundsCompoundPath);
      }
      if (!R.displayGrid) {
        return;
      }
      snap = Utils.Event.getSnap();
      bounds = Utils.Rectangle.expandRectangleToMultiple(P.view.bounds, snap);
      left = bounds.left;
      top = bounds.top;
      while (left < bounds.right || top < bounds.bottom) {
        px = new P.Path();
        px.name = "grid px";
        py = new P.Path();
        px.name = "grid py";
        px.strokeColor = "#666666";
        if ((left / snap) % 4 === 0) {
          px.strokeColor = "#000000";
          px.strokeWidth = 2;
        }
        py.strokeColor = "#666666";
        if ((top / snap) % 4 === 0) {
          py.strokeColor = "#000000";
          py.strokeWidth = 2;
        }
        px.add(new P.Point(left, P.view.bounds.top));
        px.add(new P.Point(left, P.view.bounds.bottom));
        py.add(new P.Point(P.view.bounds.left, top));
        py.add(new P.Point(P.view.bounds.right, top));
        R.grid.addChild(px);
        R.grid.addChild(py);
        left += snap;
        top += snap;
      }
    };
    return Grid;
  });

}).call(this);

//# sourceMappingURL=Grid.map
