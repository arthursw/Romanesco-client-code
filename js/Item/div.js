// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['utils', 'item', 'jquery', 'oembed', 'paper'], function(utils) {
    var RDiv, RMedia, RText, g;
    g = utils.g();
    RDiv = (function(_super) {
      __extends(RDiv, _super);

      RDiv.zIndexMin = 1;

      RDiv.zIndexMax = 100000;

      RDiv.initializeParameters = function() {
        var parameters, strokeColor, strokeWidth;
        parameters = RDiv.__super__.constructor.initializeParameters.call(this);
        strokeWidth = $.extend(true, {}, g.parameters.strokeWidth);
        strokeWidth["default"] = 1;
        strokeColor = $.extend(true, {}, g.parameters.strokeColor);
        strokeColor["default"] = 'black';
        parameters['Style'].strokeWidth = strokeWidth;
        parameters['Style'].strokeColor = strokeColor;
        return parameters;
      };

      RDiv.parameters = RDiv.initializeParameters();

      RDiv.updateHiddenDivs = function(event) {
        var div, point, projectPoint, _i, _len, _ref;
        if (g.hiddenDivs.length > 0) {
          point = new Point(event.pageX, event.pageY);
          projectPoint = view.viewToProject(point);
          _ref = g.hiddenDivs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            div = _ref[_i];
            if (!div.getBounds().contains(projectPoint)) {
              div.show();
            }
          }
        }
      };

      RDiv.showDivs = function() {
        while (g.hiddenDivs.length > 0) {
          g.hiddenDivs.first().show();
        }
      };

      RDiv.updateZIndex = function(sortedDivs) {
        var div, i, _i, _len;
        for (i = _i = 0, _len = sortedDivs.length; _i < _len; i = ++_i) {
          div = sortedDivs[i];
          div.divJ.css({
            'z-index': i
          });
        }
      };

      function RDiv(bounds, data, pk, date, lock) {
        var separatorJ, _ref;
        this.data = data != null ? data : null;
        this.pk = pk != null ? pk : null;
        this.date = date;
        this.lock = lock != null ? lock : null;
        this.deselect = __bind(this.deselect, this);
        this.select = __bind(this.select, this);
        this.update = __bind(this.update, this);
        this.endSelect = __bind(this.endSelect, this);
        this.beginSelect = __bind(this.beginSelect, this);
        this.saveCallback = __bind(this.saveCallback, this);
        this.rectangle = ((_ref = this.data) != null ? _ref.rectangle : void 0) != null ? new Rectangle(this.data.rectangle) : bounds;
        this.controller = this;
        this.object_type = this.constructor.object_type;
        separatorJ = g.stageJ.find("." + this.object_type + "-separator");
        this.divJ = g.templatesJ.find(".custom-div").clone().insertAfter(separatorJ);
        this.divJ.mouseenter((function(_this) {
          return function(event) {
            var item, _i, _len, _ref1;
            _ref1 = g.selectedItems;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              item = _ref1[_i];
              if (item !== _this && item.getBounds().intersects(_this.getBounds())) {
                _this.hide();
                break;
              }
            }
          };
        })(this));
        if (!this.lock) {
          RDiv.__super__.constructor.call(this, this.data, this.pk, this.date, g.divList, g.sortedDivs);
        } else {
          RDiv.__super__.constructor.call(this, this.data, this.pk, this.date, this.lock.itemListsJ.find('.rDiv-list'), this.lock.sortedDivs);
        }
        this.maskJ = this.divJ.find(".mask");
        this.divJ.css({
          width: this.rectangle.width,
          height: this.rectangle.height
        });
        this.updateTransform(false);
        if (this.owner !== g.me && (this.lock != null)) {
          this.divJ.addClass("locked");
        }
        this.divJ.attr("data-pk", this.pk);
        this.divJ.controller = this;
        this.setCss();
        g.divs.push(this);
        if (g.selectedTool.name === 'Move') {
          this.disableInteraction();
        }
        this.divJ.click((function(_this) {
          return function(event) {
            if (_this.selectionRectangle != null) {
              return;
            }
            if (!event.shiftKey) {
              g.deselectAll();
            }
            _this.select();
          };
        })(this));
        if (!bounds.contains(this.rectangle.expand(-1))) {
          console.log("Error: invalid div");
          this.remove();
        }
        return;
      }

      RDiv.prototype.hide = function() {
        this.divJ.css({
          opacity: 0.5,
          'pointer-events': 'none'
        });
        g.hiddenDivs.push(this);
      };

      RDiv.prototype.show = function() {
        this.divJ.css({
          opacity: 1,
          'pointer-events': 'auto'
        });
        g.hiddenDivs.remove(this);
      };

      RDiv.prototype.save = function(addCreateCommand) {
        var args;
        if (addCreateCommand == null) {
          addCreateCommand = true;
        }
        if (g.rectangleOverlapsTwoPlanets(this.rectangle)) {
          return;
        }
        if (this.rectangle.area === 0) {
          this.remove();
          g.romanesco_alert("Error: your div is not valid.", "error");
          return;
        }
        args = {
          city: g.city,
          box: g.boxFromRectangle(this.getBounds()),
          object_type: this.object_type,
          date: Date.now(),
          data: this.getStringifiedData()
        };
        Dajaxice.draw.saveDiv(this.saveCallback, args);
        RDiv.__super__.save.apply(this, arguments);
      };

      RDiv.prototype.saveCallback = function(result) {
        g.checkError(result);
        if (result.pk == null) {
          this.remove();
          return;
        }
        this.owner = result.owner;
        this.setPK(result.pk);
        if (this.updateAfterSave != null) {
          this.update(this.updateAfterSave);
        }
        RDiv.__super__.saveCallback.apply(this, arguments);
      };

      RDiv.prototype.moveTo = function(position, update) {
        RDiv.__super__.moveTo.call(this, position, update);
        this.updateTransform();
      };

      RDiv.prototype.setRectangle = function(rectangle, update) {
        RDiv.__super__.setRectangle.call(this, rectangle, update);
        this.updateTransform();
      };

      RDiv.prototype.setRotation = function(rotation, update) {
        RDiv.__super__.setRotation.call(this, rotation, update);
        this.updateTransform();
      };

      RDiv.prototype.updateTransform = function() {
        var css, sizeScaled, translation, viewPos;
        viewPos = view.projectToView(this.rectangle.topLeft);
        if (view.zoom === 1 && (this.rotation === 0 || (this.rotation == null))) {
          this.divJ.css({
            'left': viewPos.x,
            'top': viewPos.y,
            'transform': 'none'
          });
        } else {
          sizeScaled = this.rectangle.size.multiply(view.zoom);
          translation = viewPos.add(sizeScaled.divide(2));
          css = 'translate(' + translation.x + 'px,' + translation.y + 'px)';
          css += 'translate(-50%, -50%)';
          css += ' scale(' + view.zoom + ')';
          if (this.rotation) {
            css += ' rotate(' + this.rotation + 'deg)';
          }
          this.divJ.css({
            'transform': css,
            'top': 0,
            'left': 0,
            'transform-origin': '50% 50%'
          });
        }
        this.divJ.css({
          width: this.rectangle.width,
          height: this.rectangle.height
        });
      };

      RDiv.prototype.insertAbove = function(div, index, update) {
        if (index == null) {
          index = null;
        }
        if (update == null) {
          update = false;
        }
        RDiv.__super__.insertAbove.call(this, div, index, update);
        if (!index) {
          this.constructor.updateZIndex(this.sortedItems);
        }
      };

      RDiv.prototype.insertBelow = function(div, index, update) {
        if (index == null) {
          index = null;
        }
        if (update == null) {
          update = false;
        }
        RDiv.__super__.insertBelow.call(this, div, index, update);
        if (!index) {
          this.constructor.updateZIndex(this.sortedItems);
        }
      };

      RDiv.prototype.beginSelect = function(event) {
        RDiv.__super__.beginSelect.call(this, event);
        if (this.selectionState != null) {
          g.currentDiv = this;
        }
      };

      RDiv.prototype.endSelect = function(event) {
        RDiv.__super__.endSelect.call(this, event);
        g.currentDiv = null;
      };

      RDiv.prototype.disableInteraction = function() {
        this.maskJ.show();
      };

      RDiv.prototype.enableInteraction = function() {
        this.maskJ.hide();
      };

      RDiv.prototype.setParameter = function(controller, value) {
        RDiv.__super__.setParameter.call(this, controller, value);
        switch (controller.name) {
          case 'strokeWidth':
          case 'strokeColor':
          case 'fillColor':
            this.setCss();
        }
      };

      RDiv.prototype.getUpdateFunction = function() {
        return 'updateDiv';
      };

      RDiv.prototype.getUpdateArguments = function(type) {
        var args;
        switch (type) {
          case 'z-index':
            args = {
              pk: this.pk,
              date: this.date
            };
            break;
          default:
            args = {
              pk: this.pk,
              box: g.boxFromRectangle(this.getBounds()),
              data: this.getStringifiedData()
            };
        }
        return args;
      };

      RDiv.prototype.update = function(type) {
        var bounds;
        if (this.pk == null) {
          this.updateAfterSave = type;
          return;
        }
        delete this.updateAfterSave;
        bounds = this.getBounds();
        if (g.rectangleOverlapsTwoPlanets(bounds)) {
          return;
        }
        Dajaxice.draw.updateDiv(this.updateCallback, this.getUpdateArguments(type));
      };

      RDiv.prototype.updateCallback = function(result) {
        g.checkError(result);
      };

      RDiv.prototype.select = function(updateOptions, updateSelectionRectangle) {
        if (updateSelectionRectangle == null) {
          updateSelectionRectangle = true;
        }
        if (!RDiv.__super__.select.call(this, updateOptions, updateSelectionRectangle) || this.divJ.hasClass("selected")) {
          return false;
        }
        if (g.selectedTool !== g.tools['Select']) {
          g.tools['Select'].select();
        }
        this.divJ.addClass("selected");
        return true;
      };

      RDiv.prototype.deselect = function() {
        var _ref;
        if (!RDiv.__super__.deselect.call(this)) {
          return false;
        }
        if (!this.divJ.hasClass("selected")) {
          return;
        }
        if ((_ref = this.divJ) != null) {
          _ref.removeClass("selected");
        }
        return true;
      };

      RDiv.prototype.setCss = function() {
        this.setFillColor();
        this.setStrokeColor();
        this.setStrokeWidth();
      };

      RDiv.prototype.setFillColor = function() {
        var _ref, _ref1;
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'background-color': (_ref1 = this.data.fillColor) != null ? _ref1 : 'transparent'
          });
        }
      };

      RDiv.prototype.setStrokeColor = function() {
        var _ref, _ref1;
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'border-color': (_ref1 = this.data.strokeColor) != null ? _ref1 : 'transparent'
          });
        }
      };

      RDiv.prototype.setStrokeWidth = function() {
        var _ref, _ref1;
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'border-width': (_ref1 = this.data.strokeWidth) != null ? _ref1 : '0'
          });
        }
      };

      RDiv.prototype.remove = function() {
        this.deselect();
        this.divJ.remove();
        g.divs.remove(this);
        if (this.data.loadEntireArea) {
          g.entireAreas.remove(this);
        }
        if (g.divToUpdate === this) {
          delete g.divToUpdate;
        }
        RDiv.__super__.remove.call(this);
      };

      RDiv.prototype["delete"] = function() {
        if ((this.lock != null) && this.lock.owner !== g.me) {
          return;
        }
        this.remove();
        if (this.pk == null) {
          return;
        }
        if (!this.socketAction) {
          Dajaxice.draw.deleteDiv(g.checkError, {
            'pk': this.pk
          });
        }
        RDiv.__super__["delete"].apply(this, arguments);
      };

      return RDiv;

    })(g.RContent);
    g.RDiv = RDiv;
    RText = (function(_super) {
      __extends(RText, _super);

      RText.rname = 'Text';

      RText.modalTitle = "Insert some text";

      RText.modalTitleUpdate = "Modify your text";

      RText.object_type = 'text';

      RText.initializeParameters = function() {
        var parameters;
        parameters = RText.__super__.constructor.initializeParameters.call(this);
        parameters['Font'] = {
          fontName: {
            type: 'input-typeahead',
            label: 'Font name',
            "default": '',
            initializeController: function(controller) {
              var firstItem, input, inputValue, typeaheadJ, _ref;
              typeaheadJ = $(controller.datController.domElement);
              input = typeaheadJ.find("input");
              inputValue = null;
              input.typeahead({
                hint: true,
                highlight: true,
                minLength: 1
              }, {
                valueKey: 'value',
                displayKey: 'value',
                source: g.typeaheadFontEngine.ttAdapter()
              });
              input.on('typeahead:opened', function() {
                var dropDown;
                dropDown = typeaheadJ.find(".tt-dropdown-menu");
                dropDown.insertAfter(typeaheadJ.parents('.cr:first'));
                dropDown.css({
                  position: 'relative',
                  display: 'inline-block',
                  right: 0
                });
              });
              input.on('typeahead:closed', function() {
                var item, _i, _len, _ref;
                if (inputValue != null) {
                  input.val(inputValue);
                } else {
                  inputValue = input.val();
                }
                _ref = g.selectedItems;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  item = _ref[_i];
                  if (typeof item.setFontFamily === "function") {
                    item.setFontFamily(inputValue);
                  }
                }
              });
              input.on('typeahead:cursorchanged', function() {
                inputValue = input.val();
              });
              input.on('typeahead:selected', function() {
                inputValue = input.val();
              });
              input.on('typeahead:autocompleted', function() {
                inputValue = input.val();
              });
              firstItem = g.selectedItems.first();
              if ((firstItem != null ? (_ref = firstItem.data) != null ? _ref.fontFamily : void 0 : void 0) != null) {
                input.val(firstItem.data.fontFamily);
              }
            }
          },
          effect: {
            type: 'dropdown',
            label: 'Effect',
            values: ['none', 'anaglyph', 'brick-sign', 'canvas-print', 'crackle', 'decaying', 'destruction', 'distressed', 'distressed-wood', 'fire', 'fragile', 'grass', 'ice', 'mitosis', 'neon', 'outline', 'puttinggreen', 'scuffed-steel', 'shadow-multiple', 'static', 'stonewash', '3d', '3d-float', 'vintage', 'wallpaper'],
            "default": 'none'
          },
          styles: {
            type: 'button-group',
            label: 'Styles',
            "default": '',
            setValue: function(value) {
              var fontStyleJ, item, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _results;
              fontStyleJ = $("#fontStyle:first");
              _ref = g.selectedItems;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (((_ref1 = item.data) != null ? _ref1.fontStyle : void 0) != null) {
                  if (item.data.fontStyle.italic) {
                    fontStyleJ.find("[name='italic']").addClass("active");
                  }
                  if (item.data.fontStyle.bold) {
                    fontStyleJ.find("[name='bold']").addClass("active");
                  }
                  if (((_ref2 = item.data.fontStyle.decoration) != null ? _ref2.indexOf('underline') : void 0) >= 0) {
                    fontStyleJ.find("[name='underline']").addClass("active");
                  }
                  if (((_ref3 = item.data.fontStyle.decoration) != null ? _ref3.indexOf('overline') : void 0) >= 0) {
                    fontStyleJ.find("[name='overline']").addClass("active");
                  }
                  if (((_ref4 = item.data.fontStyle.decoration) != null ? _ref4.indexOf('line-through') : void 0) >= 0) {
                    _results.push(fontStyleJ.find("[name='line-through']").addClass("active"));
                  } else {
                    _results.push(void 0);
                  }
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            },
            initializeController: function(controller) {
              var domElement, fontStyleJ, setStyles;
              domElement = controller.datController.domElement;
              $(domElement).find('input').remove();
              setStyles = function(value) {
                var item, _i, _len, _ref;
                _ref = g.selectedItems;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  item = _ref[_i];
                  if (typeof item.changeFontStyle === "function") {
                    item.changeFontStyle(value);
                  }
                }
              };
              g.templatesJ.find("#fontStyle").clone().appendTo(domElement);
              fontStyleJ = $("#fontStyle:first");
              fontStyleJ.find("[name='italic']").click(function(event) {
                return setStyles('italic');
              });
              fontStyleJ.find("[name='bold']").click(function(event) {
                return setStyles('bold');
              });
              fontStyleJ.find("[name='underline']").click(function(event) {
                return setStyles('underline');
              });
              fontStyleJ.find("[name='overline']").click(function(event) {
                return setStyles('overline');
              });
              fontStyleJ.find("[name='line-through']").click(function(event) {
                return setStyles('line-through');
              });
              controller.setValue();
            }
          },
          align: {
            type: 'radio-button-group',
            label: 'Align',
            "default": '',
            initializeController: function(controller) {
              var domElement, setStyles, textAlignJ;
              domElement = controller.datController.domElement;
              $(domElement).find('input').remove();
              setStyles = function(value) {
                var item, _i, _len, _ref;
                _ref = g.selectedItems;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  item = _ref[_i];
                  if (typeof item.changeFontStyle === "function") {
                    item.changeFontStyle(value);
                  }
                }
              };
              g.templatesJ.find("#textAlign").clone().appendTo(domElement);
              textAlignJ = $("#textAlign:first");
              textAlignJ.find(".justify").click(function(event) {
                return setStyles('justify');
              });
              textAlignJ.find(".align-left").click(function(event) {
                return setStyles('left');
              });
              textAlignJ.find(".align-center").click(function(event) {
                return setStyles('center');
              });
              textAlignJ.find(".align-right").click(function(event) {
                return setStyles('right');
              });
            }
          },
          fontSize: {
            type: 'slider',
            label: 'Font size',
            min: 5,
            max: 300,
            "default": 11
          },
          fontColor: {
            type: 'color',
            label: 'Color',
            "default": 'black',
            defaultCheck: true
          }
        };
        return parameters;
      };

      RText.parameters = RText.initializeParameters();

      function RText(bounds, data, pk, date, lock) {
        var lockedForMe, message;
        this.data = data != null ? data : null;
        this.pk = pk != null ? pk : null;
        this.date = date;
        this.lock = lock != null ? lock : null;
        this.changeFontStyle = __bind(this.changeFontStyle, this);
        this.textChanged = __bind(this.textChanged, this);
        RText.__super__.constructor.call(this, bounds, this.data, this.pk, this.date, this.lock);
        this.contentJ = $("<textarea></textarea>");
        this.contentJ.insertBefore(this.maskJ);
        this.contentJ.val(this.data.message);
        lockedForMe = this.owner !== g.me && (this.lock != null);
        if (lockedForMe) {
          message = this.data.message;
          this.contentJ[0].addEventListener("input", (function() {
            return this.value = message;
          }), false);
        }
        this.setCss();
        this.contentJ.focus(function() {
          return $(this).addClass("selected form-control");
        });
        this.contentJ.blur(function() {
          return $(this).removeClass("selected form-control");
        });
        this.contentJ.focus();
        this.contentJ.keydown((function(_this) {
          return function(event) {
            if (event.metaKey || event.ctrlKey) {
              _this.deselect();
              event.stopImmediatePropagation();
              return false;
            }
          };
        })(this));
        if (!lockedForMe) {
          this.contentJ.bind('input propertychange', (function(_this) {
            return function(event) {
              return _this.textChanged(event);
            };
          })(this));
        }
        if ((this.data != null) && Object.keys(this.data).length > 0) {
          this.setFont(false);
        }
        return;
      }

      RText.prototype.deselect = function() {
        if (!RText.__super__.deselect.call(this)) {
          return false;
        }
        this.contentJ.blur();
        return true;
      };

      RText.prototype.textChanged = function(event) {
        var newText;
        newText = this.contentJ.val();
        this.deferredAction(g.ModifyTextCommand, newText);
      };

      RText.prototype.setText = function(newText, update) {
        if (update == null) {
          update = false;
        }
        this.data.message = newText;
        this.contentJ.val(newText);
        if (!this.socketAction) {
          if (update) {
            this.update('text');
          }
          g.chatSocket.emit("bounce", {
            itemPk: this.pk,
            "function": "setText",
            "arguments": [newText, false]
          });
        }
      };

      RText.prototype.setFontFamily = function(fontFamily, update) {
        var available, item, _i, _len, _ref;
        if (update == null) {
          update = true;
        }
        if (fontFamily == null) {
          return;
        }
        available = false;
        _ref = g.availableFonts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.family === fontFamily) {
            available = true;
            break;
          }
        }
        if (!available) {
          return;
        }
        this.data.fontFamily = fontFamily;
        g.addFont(fontFamily, this.data.effect);
        g.loadFonts();
        this.contentJ.css({
          "font-family": "'" + fontFamily + "', 'Helvetica Neue', Helvetica, Arial, sans-serif"
        });
        if (update) {
          this.update();
        }
      };

      RText.prototype.changeFontStyle = function(value) {
        var _base, _base1;
        if (value == null) {
          return;
        }
        if (typeof value !== 'string') {
          return;
        }
        if ((_base = this.data).fontStyle == null) {
          _base.fontStyle = {};
        }
        if ((_base1 = this.data.fontStyle).decoration == null) {
          _base1.decoration = '';
        }
        switch (value) {
          case 'underline':
            if (this.data.fontStyle.decoration.indexOf(' underline') >= 0) {
              this.data.fontStyle.decoration = this.data.fontStyle.decoration.replace(' underline', '');
            } else {
              this.data.fontStyle.decoration += ' underline';
            }
            break;
          case 'overline':
            if (this.data.fontStyle.decoration.indexOf(' overline') >= 0) {
              this.data.fontStyle.decoration = this.data.fontStyle.decoration.replace(' overline', '');
            } else {
              this.data.fontStyle.decoration += ' overline';
            }
            break;
          case 'line-through':
            if (this.data.fontStyle.decoration.indexOf(' line-through') >= 0) {
              this.data.fontStyle.decoration = this.data.fontStyle.decoration.replace(' line-through', '');
            } else {
              this.data.fontStyle.decoration += ' line-through';
            }
            break;
          case 'italic':
            this.data.fontStyle.italic = !this.data.fontStyle.italic;
            break;
          case 'bold':
            this.data.fontStyle.bold = !this.data.fontStyle.bold;
            break;
          case 'justify':
          case 'left':
          case 'right':
          case 'center':
            this.data.fontStyle.align = value;
        }
        this.setFontStyle(true);
      };

      RText.prototype.setFontStyle = function(update) {
        var _ref, _ref1, _ref2, _ref3;
        if (update == null) {
          update = true;
        }
        if (((_ref = this.data.fontStyle) != null ? _ref.italic : void 0) != null) {
          this.contentJ.css({
            "font-style": this.data.fontStyle.italic ? "italic" : "normal"
          });
        }
        if (((_ref1 = this.data.fontStyle) != null ? _ref1.bold : void 0) != null) {
          this.contentJ.css({
            "font-weight": this.data.fontStyle.bold ? "bold" : "normal"
          });
        }
        if (((_ref2 = this.data.fontStyle) != null ? _ref2.decoration : void 0) != null) {
          this.contentJ.css({
            "text-decoration": this.data.fontStyle.decoration
          });
        }
        if (((_ref3 = this.data.fontStyle) != null ? _ref3.align : void 0) != null) {
          this.contentJ.css({
            "text-align": this.data.fontStyle.align
          });
        }
        if (update) {
          this.update();
        }
      };

      RText.prototype.setFontSize = function(fontSize, update) {
        if (update == null) {
          update = true;
        }
        if (fontSize == null) {
          return;
        }
        this.data.fontSize = fontSize;
        this.contentJ.css({
          "font-size": fontSize + "px"
        });
        if (update) {
          this.update();
        }
      };

      RText.prototype.setFontEffect = function(fontEffect, update) {
        var className, i;
        if (update == null) {
          update = true;
        }
        if (fontEffect == null) {
          return;
        }
        g.addFont(this.data.fontFamily, fontEffect);
        i = this.contentJ[0].classList.length - 1;
        while (i >= 0) {
          className = this.contentJ[0].classList[i];
          if (className.indexOf("font-effect-") >= 0) {
            this.contentJ.removeClass(className);
          }
          i--;
        }
        g.loadFonts();
        this.contentJ.addClass("font-effect-" + fontEffect);
        if (update) {
          this.update();
        }
      };

      RText.prototype.setFontColor = function(fontColor, update) {
        if (update == null) {
          update = true;
        }
        this.contentJ.css({
          "color": fontColor != null ? fontColor : 'black'
        });
      };

      RText.prototype.setFont = function(update) {
        if (update == null) {
          update = true;
        }
        this.setFontStyle(update);
        this.setFontFamily(this.data.fontFamily, update);
        this.setFontSize(this.data.fontSize, update);
        this.setFontEffect(this.data.effect, update);
        this.setFontColor(this.data.fontColor, update);
      };

      RText.prototype.setParameter = function(controller, value) {
        RText.__super__.setParameter.call(this, controller, value);
        switch (controller.name) {
          case 'fontStyle':
          case 'fontFamily':
          case 'fontSize':
          case 'effect':
          case 'fontColor':
            this.setFont(false);
            break;
          default:
            this.setFont(false);
        }
      };

      RText.prototype["delete"] = function() {
        if (this.contentJ.hasClass("selected")) {
          return;
        }
        RText.__super__["delete"].call(this);
      };

      return RText;

    })(RDiv);
    g.RText = RText;
    RMedia = (function(_super) {
      __extends(RMedia, _super);

      RMedia.rname = 'Media';

      RMedia.modalTitle = "Insert a media";

      RMedia.modalTitleUpdate = "Modify your media";

      RMedia.object_type = 'media';

      RMedia.initialize = function(rectangle) {
        var submit;
        submit = function(data) {
          var div;
          div = new g.RMedia(rectangle, data);
          div.finish();
          if (!div.group) {
            return;
          }
          div.save();
          div.select();
        };
        g.RModal.initialize('Add media', submit);
        g.RModal.addTextInput('url', 'http:// or <iframe>', 'url', 'url', 'URL', true);
        g.RModal.show();
      };

      RMedia.initializeParameters = function() {
        var parameters;
        parameters = RMedia.__super__.constructor.initializeParameters.call(this);
        parameters['Media'] = {
          url: {
            type: 'string',
            label: 'URL',
            "default": 'http://'
          },
          fitImage: {
            type: 'checkbox',
            label: 'Fit image',
            "default": false
          }
        };
        return parameters;
      };

      RMedia.parameters = RMedia.initializeParameters();

      function RMedia(bounds, data, pk, date, lock) {
        this.data = data != null ? data : null;
        this.pk = pk != null ? pk : null;
        this.date = date;
        this.lock = lock != null ? lock : null;
        this.afterEmbed = __bind(this.afterEmbed, this);
        this.urlChanged = __bind(this.urlChanged, this);
        this.loadMedia = __bind(this.loadMedia, this);
        RMedia.__super__.constructor.call(this, bounds, this.data, this.pk, this.date, this.lock);
        this.url = this.data.url;
        if ((this.url != null) && this.url.length > 0) {
          this.urlChanged(this.url, false);
        }
        return;
      }

      RMedia.prototype.dispatchLoadedEvent = function() {};

      RMedia.prototype.beginSelect = function(event) {
        var _ref;
        RMedia.__super__.beginSelect.call(this, event);
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'pointer-events': 'none'
          });
        }
      };

      RMedia.prototype.endSelect = function(event) {
        var _ref;
        RMedia.__super__.endSelect.call(this, event);
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'pointer-events': 'auto'
          });
        }
      };

      RMedia.prototype.select = function(updateOptions, updateSelectionRectangle) {
        var _ref;
        if (updateOptions == null) {
          updateOptions = true;
        }
        if (updateSelectionRectangle == null) {
          updateSelectionRectangle = true;
        }
        if (!RMedia.__super__.select.call(this, updateOptions, updateSelectionRectangle)) {
          return false;
        }
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'pointer-events': 'auto'
          });
        }
        return true;
      };

      RMedia.prototype.deselect = function() {
        var _ref;
        if (!RMedia.__super__.deselect.call(this)) {
          return false;
        }
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'pointer-events': 'none'
          });
        }
        return true;
      };

      RMedia.prototype.setRectangle = function(rectangle, update) {
        var height, width, _ref;
        RMedia.__super__.setRectangle.call(this, rectangle, update);
        width = this.divJ.width();
        height = this.divJ.height();
        this.contentJ.attr("width", width).attr("height", height).css({
          "max-width": width,
          "max-height": height
        });
        if (!((_ref = this.contentJ) != null ? _ref.is('iframe') : void 0)) {
          this.contentJ.find('iframe').attr("width", width).attr("height", height).css({
            "max-width": width,
            "max-height": height
          });
        }
      };

      RMedia.prototype.toggleFitImage = function() {
        if (this.isImage != null) {
          this.contentJ.toggleClass("fit-image", this.data.fitImage);
        }
      };

      RMedia.prototype.setParameter = function(controller, value) {
        RMedia.__super__.setParameter.call(this, controller, value);
        switch (controller.name) {
          case 'fitImage':
            this.toggleFitImage();
            break;
          case 'url':
            this.urlChanged(value, false);
        }
      };

      RMedia.prototype.hasImageUrlExt = function(url) {
        var ext, exts;
        exts = ["jpeg", "jpg", "gif", "png"];
        ext = url.substring(url.lastIndexOf(".") + 1);
        if (__indexOf.call(exts, ext) >= 0) {
          return true;
        }
        return false;
      };

      RMedia.prototype.checkIsImage = function() {
        var image, timedOut, timeout, timer;
        timedOut = false;
        timeout = this.hasImageUrlExt(this.url) ? 5000 : 1000;
        image = new Image();
        timer = setTimeout((function(_this) {
          return function() {
            timedOut = true;
            _this.loadMedia("timeout");
          };
        })(this), timeout);
        image.onerror = image.onabort = (function(_this) {
          return function() {
            if (!timedOut) {
              clearTimeout(timer);
              _this.loadMedia('error');
            }
          };
        })(this);
        image.onload = (function(_this) {
          return function() {
            var _ref;
            if (!timedOut) {
              clearTimeout(timer);
            } else {
              if ((_ref = _this.contentJ) != null) {
                _ref.remove();
              }
            }
            _this.loadMedia('success');
          };
        })(this);
        image.src = this.url;
      };

      RMedia.prototype.loadMedia = function(imageLoadResult) {
        var commandEvent, oembbedContent;
        if (imageLoadResult === 'success') {
          this.contentJ = $('<img class="content image" src="' + this.url + '" alt="' + this.url + '"">');
          this.contentJ.mousedown(function(event) {
            return event.preventDefault();
          });
          this.isImage = true;
        } else {
          oembbedContent = (function(_this) {
            return function() {
              var args;
              _this.contentJ = $('<div class="content oembedall-container"></div>');
              args = {
                includeHandle: false,
                embedMethod: 'fill',
                maxWidth: _this.divJ.width(),
                maxHeight: _this.divJ.height(),
                afterEmbed: _this.afterEmbed
              };
              _this.contentJ.oembed(_this.url, args);
            };
          })(this);
          if (this.url.indexOf("http://") !== 0 && this.url.indexOf("https://") !== 0) {
            this.contentJ = $(this.url);
            if (this.contentJ.is('iframe')) {
              this.contentJ.attr('width', this.divJ.width());
              this.contentJ.attr('height', this.divJ.height());
            } else {
              oembbedContent();
            }
          } else {
            oembbedContent();
          }
        }
        this.contentJ.insertBefore(this.maskJ);
        this.setCss();
        if (!this.isSelected()) {
          this.contentJ.css({
            'pointer-events': 'none'
          });
        }
        commandEvent = document.createEvent('Event');
        commandEvent.initEvent('command executed', true, true);
        document.dispatchEvent(commandEvent);
      };

      RMedia.prototype.urlChanged = function(url, updateDiv) {
        if (updateDiv == null) {
          updateDiv = false;
        }
        console.log('urlChanged, updateDiv: ' + updateDiv + ', ' + this.pk);
        this.url = url;
        if (this.contentJ != null) {
          this.contentJ.remove();
          $("#jqoembeddata").remove();
        }
        this.checkIsImage();
        if (updateDiv) {
          this.update();
        }
      };

      RMedia.prototype.afterEmbed = function() {
        var height, width, _ref;
        width = this.divJ.width();
        height = this.divJ.height();
        if ((_ref = this.contentJ) != null) {
          _ref.find("iframe").attr("width", width).attr("height", height);
        }
      };

      return RMedia;

    })(RDiv);
    g.RMedia = RMedia;
  });

}).call(this);

//# sourceMappingURL=div.map
