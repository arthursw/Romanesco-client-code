// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['utils', 'RShape'], function(utils, RShape) {
    var RectangleShape;
    RectangleShape = (function(_super) {
      __extends(RectangleShape, _super);

      function RectangleShape() {
        return RectangleShape.__super__.constructor.apply(this, arguments);
      }

      RectangleShape.Shape = paper.Path.Rectangle;

      RectangleShape.category = 'Shape';

      RectangleShape.rname = 'Rectangle';

      RectangleShape.rdescription = "Simple rectangle, square by default (use shift key to draw a rectangle) which can have rounded corners.\nUse special key (command on a mac, control otherwise) to center the shape on the first point.";

      RectangleShape.iconURL = 'static/images/icons/inverted/rectangle.png';

      RectangleShape.iconAlt = 'rectangle';

      RectangleShape.initializeParameters = function() {
        var parameters;
        parameters = RectangleShape.__super__.constructor.initializeParameters.call(this);
        if (parameters['Style'] == null) {
          parameters['Style'] = {};
        }
        parameters['Style'].cornerRadius = {
          type: 'slider',
          label: 'Corner radius',
          min: 0,
          max: 100,
          "default": 0
        };
        return parameters;
      };

      RectangleShape.parameters = RectangleShape.initializeParameters();

      RectangleShape.prototype.createShape = function() {
        this.shape = this.addPath(new this.constructor.Shape(this.rectangle, this.data.cornerRadius));
      };

      return RectangleShape;

    })(RShape);
    g.pathClasses.push(RectangleShape);
    return RectangleShape;
  });

}).call(this);

//# sourceMappingURL=RectangleShape.map
