// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Content'], function(Content) {
    var Div;
    Div = (function(_super) {
      __extends(Div, _super);

      Div.zIndexMin = 1;

      Div.zIndexMax = 100000;

      Div.initializeParameters = function() {
        var parameters, strokeColor, strokeWidth;
        parameters = Div.__super__.constructor.initializeParameters.call(this);
        strokeWidth = $.extend(true, {}, R.parameters.strokeWidth);
        strokeWidth["default"] = 1;
        strokeColor = $.extend(true, {}, R.parameters.strokeColor);
        strokeColor["default"] = 'black';
        parameters['Style'].strokeWidth = strokeWidth;
        parameters['Style'].strokeColor = strokeColor;
        return parameters;
      };

      Div.parameters = Div.initializeParameters();

      Div.createTool(Div);

      Div.updateHiddenDivs = function(event) {
        var div, point, projectPoint, _i, _len, _ref;
        if (R.hiddenDivs.length > 0) {
          point = new P.Point(event.pageX, event.pageY);
          projectPoint = P.view.viewToProject(point);
          _ref = R.hiddenDivs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            div = _ref[_i];
            if (!div.getBounds().contains(projectPoint)) {
              div.show();
            }
          }
        }
      };

      Div.showDivs = function() {
        while (R.hiddenDivs.length > 0) {
          R.hiddenDivs[0].show();
        }
      };

      Div.updateZIndex = function(sortedDivs) {
        var div, i, _i, _len;
        for (i = _i = 0, _len = sortedDivs.length; _i < _len; i = ++_i) {
          div = sortedDivs[i];
          div.divJ.css({
            'z-index': i
          });
        }
      };

      function Div(bounds, data, pk, date, lock) {
        var separatorJ, _ref;
        this.data = data != null ? data : null;
        this.pk = pk != null ? pk : null;
        this.date = date;
        this.lock = lock != null ? lock : null;
        this.deselect = __bind(this.deselect, this);
        this.select = __bind(this.select, this);
        this.update = __bind(this.update, this);
        this.endSelect = __bind(this.endSelect, this);
        this.beginSelect = __bind(this.beginSelect, this);
        this.saveCallback = __bind(this.saveCallback, this);
        this.rectangle = ((_ref = this.data) != null ? _ref.rectangle : void 0) != null ? new P.Rectangle(this.data.rectangle) : bounds;
        this.controller = this;
        this.object_type = this.constructor.object_type;
        separatorJ = R.stageJ.find("." + this.object_type + "-separator");
        this.divJ = R.templatesJ.find(".custom-div").clone().insertAfter(separatorJ);
        this.divJ.mouseenter((function(_this) {
          return function(event) {
            var item, _i, _len, _ref1;
            _ref1 = R.selectedItems;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              item = _ref1[_i];
              if (item !== _this && item.getBounds().intersects(_this.getBounds())) {
                _this.hide();
                break;
              }
            }
          };
        })(this));
        if (!this.lock) {
          Div.__super__.constructor.call(this, this.data, this.pk, this.date, R.divList, R.sortedDivs);
        } else {
          Div.__super__.constructor.call(this, this.data, this.pk, this.date, this.lock.itemListsJ.find('.rDiv-list'), this.lock.sortedDivs);
        }
        this.maskJ = this.divJ.find(".mask");
        this.divJ.css({
          width: this.rectangle.width,
          height: this.rectangle.height
        });
        this.updateTransform(false);
        if (this.owner !== R.me && (this.lock != null)) {
          this.divJ.addClass("locked");
        }
        this.divJ.attr("data-pk", this.pk);
        this.divJ.controller = this;
        this.setCss();
        R.divs.push(this);
        if (R.selectedTool.name === 'Move') {
          this.disableInteraction();
        }
        this.divJ.click((function(_this) {
          return function(event) {
            if (_this.selectionRectangle != null) {
              return;
            }
            if (!event.shiftKey) {
              Tool.Select.deselectAll();
            }
            _this.select();
          };
        })(this));
        if (!bounds.contains(this.rectangle.expand(-1))) {
          console.log("Error: invalid div");
          this.remove();
        }
        return;
      }

      Div.prototype.hide = function() {
        this.divJ.css({
          opacity: 0.5,
          'pointer-events': 'none'
        });
        R.hiddenDivs.push(this);
      };

      Div.prototype.show = function() {
        this.divJ.css({
          opacity: 1,
          'pointer-events': 'auto'
        });
        Utils.Array.remove(R.hiddenDivs, this);
      };

      Div.prototype.save = function(addCreateCommand) {
        var args;
        if (addCreateCommand == null) {
          addCreateCommand = true;
        }
        if (Grid.rectangleOverlapsTwoPlanets(this.rectangle)) {
          return;
        }
        if (this.rectangle.area === 0) {
          this.remove();
          R.alertManager.alert("Error: your div is not valid.", "error");
          return;
        }
        args = {
          city: R.city,
          box: R.boxFromRectangle(this.getBounds()),
          object_type: this.object_type,
          date: Date.now(),
          data: this.getStringifiedData()
        };
        Dajaxice.draw.saveDiv(this.saveCallback, args);
        Div.__super__.save.apply(this, arguments);
      };

      Div.prototype.saveCallback = function(result) {
        R.loader.checkError(result);
        if (result.pk == null) {
          this.remove();
          return;
        }
        this.owner = result.owner;
        this.setPK(result.pk);
        if (this.updateAfterSave != null) {
          this.update(this.updateAfterSave);
        }
        Div.__super__.saveCallback.apply(this, arguments);
      };

      Div.prototype.moveTo = function(position, update) {
        Div.__super__.moveTo.call(this, position, update);
        this.updateTransform();
      };

      Div.prototype.setRectangle = function(rectangle, update) {
        if (update == null) {
          update = true;
        }
        Div.__super__.setRectangle.call(this, rectangle, update);
        this.updateTransform();
      };

      Div.prototype.setRotation = function(rotation, update) {
        if (update == null) {
          update = true;
        }
        Div.__super__.setRotation.call(this, rotation, update);
        this.updateTransform();
      };

      Div.prototype.updateTransform = function() {
        var css, sizeScaled, translation, viewPos;
        viewPos = P.view.projectToView(this.rectangle.topLeft);
        if (P.view.zoom === 1 && (this.rotation === 0 || (this.rotation == null))) {
          this.divJ.css({
            'left': viewPos.x,
            'top': viewPos.y,
            'transform': 'none'
          });
        } else {
          sizeScaled = this.rectangle.size.multiply(P.view.zoom);
          translation = viewPos.add(sizeScaled.divide(2));
          css = 'translate(' + translation.x + 'px,' + translation.y + 'px)';
          css += 'translate(-50%, -50%)';
          css += ' scale(' + P.view.zoom + ')';
          if (this.rotation) {
            css += ' rotate(' + this.rotation + 'deg)';
          }
          this.divJ.css({
            'transform': css,
            'top': 0,
            'left': 0,
            'transform-origin': '50% 50%'
          });
        }
        this.divJ.css({
          width: this.rectangle.width,
          height: this.rectangle.height
        });
      };

      Div.prototype.insertAbove = function(div, index, update) {
        if (index == null) {
          index = null;
        }
        if (update == null) {
          update = false;
        }
        Div.__super__.insertAbove.call(this, div, index, update);
        if (!index) {
          this.constructor.updateZIndex(this.sortedItems);
        }
      };

      Div.prototype.insertBelow = function(div, index, update) {
        if (index == null) {
          index = null;
        }
        if (update == null) {
          update = false;
        }
        Div.__super__.insertBelow.call(this, div, index, update);
        if (!index) {
          this.constructor.updateZIndex(this.sortedItems);
        }
      };

      Div.prototype.beginSelect = function(event) {
        Div.__super__.beginSelect.call(this, event);
        if (this.selectionState != null) {
          R.currentDiv = this;
        }
      };

      Div.prototype.endSelect = function(event) {
        Div.__super__.endSelect.call(this, event);
        R.currentDiv = null;
      };

      Div.prototype.disableInteraction = function() {
        this.maskJ.show();
      };

      Div.prototype.enableInteraction = function() {
        this.maskJ.hide();
      };

      Div.prototype.setParameter = function(controller, value) {
        Div.__super__.setParameter.call(this, controller, value);
        switch (controller.name) {
          case 'strokeWidth':
          case 'strokeColor':
          case 'fillColor':
            this.setCss();
        }
      };

      Div.prototype.getUpdateFunction = function() {
        return 'updateDiv';
      };

      Div.prototype.getUpdateArguments = function(type) {
        var args;
        switch (type) {
          case 'z-index':
            args = {
              pk: this.pk,
              date: this.date
            };
            break;
          default:
            args = {
              pk: this.pk,
              box: R.boxFromRectangle(this.getBounds()),
              data: this.getStringifiedData()
            };
        }
        return args;
      };

      Div.prototype.update = function(type) {
        var bounds;
        if (this.pk == null) {
          this.updateAfterSave = type;
          return;
        }
        delete this.updateAfterSave;
        bounds = this.getBounds();
        if (Grid.rectangleOverlapsTwoPlanets(bounds)) {
          return;
        }
        Dajaxice.draw.updateDiv(this.updateCallback, this.getUpdateArguments(type));
      };

      Div.prototype.updateCallback = function(result) {
        R.loader.checkError(result);
      };

      Div.prototype.select = function(updateOptions, updateSelectionRectangle) {
        if (updateSelectionRectangle == null) {
          updateSelectionRectangle = true;
        }
        if (!Div.__super__.select.call(this, updateOptions, updateSelectionRectangle) || this.divJ.hasClass("selected")) {
          return false;
        }
        if (R.selectedTool !== R.tools['Select']) {
          R.tools['Select'].select();
        }
        this.divJ.addClass("selected");
        return true;
      };

      Div.prototype.deselect = function() {
        var _ref;
        if (!Div.__super__.deselect.call(this)) {
          return false;
        }
        if (!this.divJ.hasClass("selected")) {
          return;
        }
        if ((_ref = this.divJ) != null) {
          _ref.removeClass("selected");
        }
        return true;
      };

      Div.prototype.setCss = function() {
        this.setFillColor();
        this.setStrokeColor();
        this.setStrokeWidth();
      };

      Div.prototype.setFillColor = function() {
        var _ref, _ref1;
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'background-color': (_ref1 = this.data.fillColor) != null ? _ref1 : 'transparent'
          });
        }
      };

      Div.prototype.setStrokeColor = function() {
        var _ref, _ref1;
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'border-color': (_ref1 = this.data.strokeColor) != null ? _ref1 : 'transparent'
          });
        }
      };

      Div.prototype.setStrokeWidth = function() {
        var _ref, _ref1;
        if ((_ref = this.contentJ) != null) {
          _ref.css({
            'border-width': (_ref1 = this.data.strokeWidth) != null ? _ref1 : '0'
          });
        }
      };

      Div.prototype.remove = function() {
        this.deselect();
        this.divJ.remove();
        Utils.Array.remove(R.divs, this);
        if (this.data.loadEntireArea) {
          Utils.Array.remove(R.entireAreas, this);
        }
        if (R.divToUpdate === this) {
          delete R.divToUpdate;
        }
        Div.__super__.remove.call(this);
      };

      Div.prototype["delete"] = function() {
        if ((this.lock != null) && this.lock.owner !== R.me) {
          return;
        }
        this.remove();
        if (this.pk == null) {
          return;
        }
        if (!this.socketAction) {
          Dajaxice.draw.deleteDiv(R.loader.checkError, {
            'pk': this.pk
          });
        }
        Div.__super__["delete"].apply(this, arguments);
      };

      return Div;

    })(Content);
    return Div;
  });

}).call(this);

//# sourceMappingURL=Div.map
