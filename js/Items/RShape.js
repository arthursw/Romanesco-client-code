// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['utils', 'RPath'], function(utils, RPath) {
    var RShape;
    RShape = (function(_super) {
      __extends(RShape, _super);

      function RShape() {
        return RShape.__super__.constructor.apply(this, arguments);
      }

      RShape.Shape = paper.Path.Rectangle;

      RShape.rname = 'Shape';

      RShape.rdescription = "Base shape class";

      RShape.squareByDefault = true;

      RShape.centerByDefault = false;

      RShape.prototype.prepareHitTest = function(fullySelected, strokeWidth) {
        if (fullySelected == null) {
          fullySelected = true;
        }
        this.controlPath.fillColor = 'red';
        return RShape.__super__.prepareHitTest.call(this, fullySelected, strokeWidth);
      };

      RShape.prototype.finishHitTest = function(fullySelected) {
        if (fullySelected == null) {
          fullySelected = true;
        }
        this.controlPath.fillColor = null;
        return RShape.__super__.finishHitTest.call(this, fullySelected);
      };

      RShape.prototype.loadPath = function(points) {
        var distanceMax, i, point, _i, _len;
        if (this.data.rectangle == null) {
          console.log('Error loading shape ' + this.pk + ': invalid rectangle.');
        }
        this.rectangle = this.data.rectangle != null ? new Rectangle(this.data.rectangle) : new Rectangle();
        this.initializeControlPath();
        this.controlPath.rotation = this.rotation;
        this.initialize();
        g.rasterizer.loadItem(this);
        distanceMax = this.constructor.secureDistance * this.constructor.secureDistance;
        for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
          point = points[i];
          this.controlPath.segments[i].point === point;
          if (this.controlPath.segments[i].point.getDistance(point, true) > distanceMax) {
            this.controlPath.strokeColor = 'red';
            view.center = this.controlPath.bounds.center;
            console.log("Error: invalid shape!");
            return;
          }
        }
      };

      RShape.prototype.createShape = function() {
        this.shape = this.addPath(new this.constructor.Shape(this.rectangle));
      };

      RShape.prototype.draw = function(simplified) {
        var error, process;
        if (simplified == null) {
          simplified = false;
        }
        this.drawn = false;
        if (!g.rasterizer.requestDraw(this, simplified)) {
          return;
        }
        process = (function(_this) {
          return function() {
            _this.initializeDrawing();
            _this.createShape();
            _this.drawing.rotation = _this.rotation;
          };
        })(this);
        if (!g.catchErrors) {
          process();
        } else {
          try {
            process();
          } catch (_error) {
            error = _error;
            console.error(error.stack);
            console.error(error);
            throw error;
          }
        }
        this.drawn = true;
      };

      RShape.prototype.initializeControlPath = function(pointA, pointB, shift, specialKey) {
        var center, createFromCenter, delta, height, min, square, width, _ref;
        if (pointA && pointB) {
          square = this.constructor.squareByDefault ? !shift : shift;
          createFromCenter = this.constructor.centerByDefault ? !specialKey : specialKey;
          if (createFromCenter) {
            delta = pointB.subtract(pointA);
            this.rectangle = new Rectangle(pointA.subtract(delta), pointB);
            if (square) {
              center = this.rectangle.center;
              if (this.rectangle.width > this.rectangle.height) {
                this.rectangle.width = this.rectangle.height;
              } else {
                this.rectangle.height = this.rectangle.width;
              }
              this.rectangle.center = center;
            }
          } else {
            if (!square) {
              this.rectangle = new Rectangle(pointA, pointB);
            } else {
              width = pointA.x - pointB.x;
              height = pointA.y - pointB.y;
              min = Math.min(Math.abs(width), Math.abs(height));
              this.rectangle = new Rectangle(pointA, pointA.subtract(g.sign(width) * min, g.sign(height) * min));
            }
          }
        }
        if ((_ref = this.controlPath) != null) {
          _ref.remove();
        }
        if (this.rotation == null) {
          this.rotation = 0;
        }
        this.addControlPath(new Path.Rectangle(this.rectangle));
        this.controlPath.fillColor = g.selectionBlue;
        this.controlPath.fillColor.alpha = 0.25;
      };

      RShape.prototype.beginCreate = function(point, event) {
        var _ref;
        RShape.__super__.beginCreate.call(this);
        this.downPoint = point;
        this.initializeControlPath(this.downPoint, point, event != null ? (_ref = event.modifiers) != null ? _ref.shift : void 0 : void 0, g.specialKey(event));
      };

      RShape.prototype.updateCreate = function(point, event) {
        var _ref;
        this.initializeControlPath(this.downPoint, point, event != null ? (_ref = event.modifiers) != null ? _ref.shift : void 0 : void 0, g.specialKey(event));
        this.draw();
      };

      RShape.prototype.endCreate = function(point, event) {
        var _ref;
        this.initializeControlPath(this.downPoint, point, event != null ? (_ref = event.modifiers) != null ? _ref.shift : void 0 : void 0, g.specialKey(event));
        this.draw();
        RShape.__super__.endCreate.call(this);
      };

      RShape.prototype.setRectangle = function(event, update) {
        g.updatePathRectangle(this.controlPath, this.rectangle);
        RShape.__super__.setRectangle.call(this, event, update);
      };

      RShape.prototype.getData = function() {
        var data;
        data = jQuery.extend({}, this.data);
        data.rectangle = {
          x: this.rectangle.x,
          y: this.rectangle.y,
          width: this.rectangle.width,
          height: this.rectangle.height
        };
        return data;
      };

      return RShape;

    })(RPath);
    return RShape;
  });

}).call(this);

//# sourceMappingURL=RShape.map
