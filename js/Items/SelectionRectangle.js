// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var ScreenshotRectangle, SelectionRectangle;
    SelectionRectangle = (function() {
      SelectionRectangle.indexToName = {
        0: 'bottomLeft',
        1: 'left',
        2: 'topLeft',
        3: 'top',
        4: 'topRight',
        5: 'right',
        6: 'bottomRight',
        7: 'bottom'
      };

      SelectionRectangle.oppositeName = {
        'top': 'bottom',
        'bottom': 'top',
        'left': 'right',
        'right': 'left',
        'topLeft': 'bottomRight',
        'topRight': 'bottomLeft',
        'bottomRight': 'topLeft',
        'bottomLeft': 'topRight'
      };

      SelectionRectangle.cornersNames = ['topLeft', 'topRight', 'bottomRight', 'bottomLeft'];

      SelectionRectangle.sidesNames = ['left', 'right', 'top', 'bottom'];

      SelectionRectangle.valueFromName = function(point, name) {
        switch (name) {
          case 'left':
          case 'right':
            return point.x;
          case 'top':
          case 'bottom':
            return point.y;
          default:
            return point;
        }
      };

      SelectionRectangle.hitOptions = {
        segments: true,
        stroke: true,
        fill: true,
        selected: true,
        tolerance: 5
      };

      function SelectionRectangle(rectangle) {
        this.rectangle = rectangle;
        this.selectionState = null;
        this.group = new P.Group();
        this.group.name = "selection rectangle group";
        this.path = new P.Path.Rectangle(this.rectangle);
        this.path.name = "selection rectangle path";
        this.path.pivot = this.rectangle.center;
        this.path.strokeColor = R.selectionBlue;
        this.path.strokeWidth = 1;
        this.path.selected = true;
        this.path.controller = this;
        this.addHandle(this.rectangle);
        this.group.addChild(this.path);
        return;
      }

      SelectionRectangle.prototype.hitTest = function(point) {
        return this.path.hitTest(point, this.constructor.hitOptions);
      };

      SelectionRectangle.prototype.getClosestCorner = function(point) {
        var closestCorner, cornerName, distance, minDistance, _i, _len, _ref;
        minDistance = Infinity;
        closestCorner = '';
        _ref = this.constructor.cornersNames;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cornerName = _ref[_i];
          distance = this.rectangle[cornerName].getDistance(point, true);
          if (distance < minDistance) {
            closestCorner = cornerName;
            minDistance = distance;
          }
        }
        return closestCorner;
      };

      SelectionRectangle.prototype.beginSelect = function(event) {
        var hitResult;
        hitResult = this.hitTest(event.point);
        if (hitResult == null) {
          return;
        }
        switch (hitResult.type) {
          case 'stroke':
            this.selectionState = {
              move: this.getClosestCorner(hitResult.point)
            };
            break;
          case 'segment':
            this.selectionState = {
              resize: {
                index: hitResult.segment.index
              }
            };
            break;
          default:
            this.selectionState = {
              move: true
            };
        }
      };

      SelectionRectangle.prototype.updateSelect = function(event) {};

      SelectionRectangle.prototype.endSelect = function(event) {};

      return SelectionRectangle;

    })();
    ScreenshotRectangle = (function(_super) {
      __extends(ScreenshotRectangle, _super);

      function ScreenshotRectangle(rectangle, extractImage) {
        var separatorJ;
        this.rectangle = rectangle;
        ScreenshotRectangle.__super__.constructor.call(this);
        this.drawing = new P.Path.Rectangle(this.rectangle);
        this.drawing.name = 'selection rectangle background';
        this.drawing.strokeWidth = 1;
        this.drawing.strokeColor = R.selectionBlue;
        this.drawing.controller = this;
        this.group.addChild(this.drawing);
        separatorJ = R.stageJ.find(".text-separator");
        this.buttonJ = R.templatesJ.find(".screenshot-btn").clone().insertAfter(separatorJ);
        this.buttonJ.find('.extract-btn').click(function(event) {
          var redraw;
          redraw = $(this).attr('data-click') === 'redraw-snapshot';
          extractImage(redraw);
        });
        this.updateTransform();
        this.select();
        R.tools['Select'].select();
        return;
      }

      ScreenshotRectangle.prototype.remove = function() {
        this.removing = true;
        ScreenshotRectangle.__super__.remove.call(this);
        this.buttonJ.remove();
        R.tools['Screenshot'].selectionRectangle = null;
      };

      ScreenshotRectangle.prototype.deselect = function() {
        if (!ScreenshotRectangle.__super__.deselect.call(this)) {
          return false;
        }
        if (!this.removing) {
          this.remove();
        }
        return true;
      };

      ScreenshotRectangle.prototype.setRectangle = function(rectangle, update) {
        if (update == null) {
          update = true;
        }
        ScreenshotRectangle.__super__.setRectangle.call(this, rectangle, update);
        Utils.Rectangle.updatePathRectangle(this.drawing, rectangle);
        this.updateTransform();
      };

      ScreenshotRectangle.prototype.moveTo = function(position, update) {
        ScreenshotRectangle.__super__.moveTo.call(this, position, update);
        this.updateTransform();
      };

      ScreenshotRectangle.prototype.updateTransform = function() {
        var transfrom, viewPos;
        viewPos = P.view.projectToView(this.rectangle.center);
        transfrom = 'translate(' + viewPos.x + 'px,' + viewPos.y + 'px)';
        transfrom += 'translate(-50%, -50%)';
        this.buttonJ.css({
          'position': 'absolute',
          'transform': transfrom,
          'top': 0,
          'left': 0,
          'transform-origin': '50% 50%',
          'z-index': 999
        });
      };

      ScreenshotRectangle.prototype.update = function() {};

      return ScreenshotRectangle;

    })(SelectionRectangle);
    return SelectionRectangle;
  });

}).call(this);

//# sourceMappingURL=SelectionRectangle.map
