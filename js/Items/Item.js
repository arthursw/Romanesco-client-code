// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['Command'], function(Command) {
    var Item;
    Item = (function() {
      Item.indexToName = {
        0: 'bottomLeft',
        1: 'left',
        2: 'topLeft',
        3: 'top',
        4: 'topRight',
        5: 'right',
        6: 'bottomRight',
        7: 'bottom'
      };

      Item.oppositeName = {
        'top': 'bottom',
        'bottom': 'top',
        'left': 'right',
        'right': 'left',
        'topLeft': 'bottomRight',
        'topRight': 'bottomLeft',
        'bottomRight': 'topLeft',
        'bottomLeft': 'topRight'
      };

      Item.cornersNames = ['topLeft', 'topRight', 'bottomRight', 'bottomLeft'];

      Item.sidesNames = ['left', 'right', 'top', 'bottom'];

      Item.valueFromName = function(point, name) {
        switch (name) {
          case 'left':
          case 'right':
            return point.x;
          case 'top':
          case 'bottom':
            return point.y;
          default:
            return point;
        }
      };

      Item.hitOptions = {
        segments: true,
        stroke: true,
        fill: true,
        selected: true,
        tolerance: 5
      };

      Item.zIndexSortStop = function(event, ui) {
        var item, nextItemJ, previousItemJ, previouslySelectedItems, rItem, _i, _len;
        previouslySelectedItems = R.selectedItems;
        Tool.Select.deselectAll();
        rItem = R.items[ui.item.attr("data-pk")];
        nextItemJ = ui.item.next();
        if (nextItemJ.length > 0) {
          rItem.insertAbove(R.items[nextItemJ.attr("data-pk")], null, true);
        } else {
          previousItemJ = ui.item.prev();
          if (previousItemJ.length > 0) {
            rItem.insertBelow(R.items[previousItemJ.attr("data-pk")], null, true);
          }
        }
        for (_i = 0, _len = previouslySelectedItems.length; _i < _len; _i++) {
          item = previouslySelectedItems[_i];
          item.select();
        }
      };

      Item.addItemToStage = function(item) {
        Item.addItemTo(item);
      };

      Item.addItemTo = function(item, lock) {
        var group, parent, wasSelected;
        if (lock == null) {
          lock = null;
        }
        wasSelected = item.isSelected();
        if (wasSelected) {
          item.deselect();
        }
        group = lock ? lock.group : R.mainLayer;
        group.addChild(item.group);
        item.lock = lock;
        Utils.Array.remove(item.sortedItems, item);
        parent = lock || R;
        if (R.RDiv.prototype.isPrototypeOf(item)) {
          item.sortedItems = parent.sortedDivs;
          parent.itemListsJ.find(".rDiv-list").append(item.liJ);
        } else if (R.RPath.prototype.isPrototypeOf(item)) {
          item.sortedItems = parent.sortedPaths;
          parent.itemListsJ.find(".rPath-list").append(item.liJ);
        } else {
          console.error("Error: the item is neither an RDiv nor an RPath");
        }
        item.updateZIndex();
        if (wasSelected) {
          item.select();
        }
      };

      Item.initializeParameters = function() {
        var parameters;
        parameters = {
          'Items': {
            align: R.parameters.align,
            distribute: R.parameters.distribute,
            "delete": R.parameters["delete"]
          },
          'Style': {
            strokeWidth: R.parameters.strokeWidth,
            strokeColor: R.parameters.strokeColor,
            fillColor: R.parameters.fillColor
          },
          'Pos. & size': {
            position: {
              "default": '',
              label: 'Position',
              onChange: function() {},
              onFinishChange: this.onPositionFinishChange
            },
            size: {
              "default": '',
              label: 'P.Size',
              onChange: function() {},
              onFinishChange: this.onSizeFinishChange
            }
          }
        };
        return parameters;
      };

      Item.parameters = Item.initializeParameters();

      Item.create = function(duplicateData) {
        var copy;
        copy = new this(duplicateData.rectangle, duplicateData.data);
        if (!this.socketAction) {
          copy.save(false);
          R.chatSocket.emit("bounce", {
            itemClass: this.name,
            "function": "create",
            "arguments": [duplicateData]
          });
        }
        return copy;
      };


      /* Actions */

      Item.id = Math.random();

      Item.beginAction = function(command) {
        if (this.currentCommand) {
          this.endAction();
          clearTimeout(R.updateTimeout['addCurrentCommand-' + this.id]);
        }
        this.currentCommand = command;
      };

      Item.updateAction = function() {
        this.currentCommand.update.apply(this.currentCommand, arguments);
      };

      Item.endAction = function() {
        Item.currentCommand.end(positionIsValid);
        Item.currentCommand = null;
      };

      Item.deferredAction = function() {
        var ActionCommand, args, items;
        ActionCommand = arguments[0], items = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (!ActionCommand.prototype.isPrototypeOf(this.currentCommand)) {
          this.beginAction(new ActionCommand(items, args));
        }
        this.updateAction.apply(args);
        Utils.deferredExecution(this.endAction, 'addCurrentCommand-' + this.id);
      };

      function Item(data, pk) {
        var _ref;
        this.data = data;
        this.pk = pk;
        this.endAction = __bind(this.endAction, this);
        if (this.pk != null) {
          this.setPK(this.pk, true);
        } else {
          this.id = ((_ref = this.data) != null ? _ref.id : void 0) != null ? this.data.id : Math.random();
          R.items[this.id] = this;
        }
        if (this.data != null) {
          this.secureData();
        } else {
          this.data = new Object();
          R.controllerManager.updateItemData(this);
        }
        if (this.rectangle == null) {
          this.rectangle = null;
        }
        this.selectionState = null;
        this.selectionRectangle = null;
        this.group = new P.Group();
        this.group.name = "group";
        this.group.controller = this;
        return;
      }

      Item.prototype.secureData = function() {
        var name, parameter, value, _ref;
        _ref = this.constructor.parameters;
        for (name in _ref) {
          parameter = _ref[name];
          if (parameter.secure != null) {
            this.data[name] = parameter.secure(this.data, parameter);
          } else {
            value = this.data[name];
            if ((value != null) && (parameter.min != null) && (parameter.max != null)) {
              if (value < parameter.min || value > parameter.max) {
                this.data[name] = Utils.clamp(parameter.min, value, parameter.max);
              }
            }
          }
        }
      };

      Item.prototype.setParameterCommand = function(controller, value) {
        this.deferredAction(R.SetParameterCommand, controller, value);
      };

      Item.prototype.setParameter = function(controller, value, update) {
        var name;
        name = controller.name;
        this.data[name] = value;
        this.changed = name;
        if (!this.socketAction) {
          if (update) {
            this.update(name);
            controller.setValue(value);
          }
          R.chatSocket.emit("bounce", {
            itemPk: this.pk,
            "function": "setParameter",
            "arguments": [name, value, false, false]
          });
        }
      };

      Item.prototype.prepareHitTest = function() {
        var _ref;
        if ((_ref = this.selectionRectangle) != null) {
          _ref.strokeColor = R.selectionBlue;
        }
      };

      Item.prototype.finishHitTest = function() {
        var _ref;
        if ((_ref = this.selectionRectangle) != null) {
          _ref.strokeColor = null;
        }
      };

      Item.prototype.hitTest = function(point, hitOptions) {
        return this.selectionRectangle.hitTest(point);
      };

      Item.prototype.performHitTest = function(point, hitOptions, fullySelected) {
        var hitResult;
        if (fullySelected == null) {
          fullySelected = true;
        }
        this.prepareHitTest(fullySelected, 1);
        hitResult = this.hitTest(point, hitOptions);
        this.finishHitTest(fullySelected);
        return hitResult;
      };

      Item.prototype.initializeSelection = function(event, hitResult) {
        var cornerName, distance, minDistance, selectionBounds, _i, _len, _ref;
        if (hitResult.item === this.selectionRectangle) {
          this.selectionState = {
            move: true
          };
          if ((hitResult != null ? hitResult.type : void 0) === 'stroke') {
            selectionBounds = this.rectangle.clone().expand(10);
            minDistance = Infinity;
            _ref = this.constructor.cornersNames;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cornerName = _ref[_i];
              distance = selectionBounds[cornerName].getDistance(hitResult.point, true);
              if (distance < minDistance) {
                this.selectionState.move = cornerName;
                minDistance = distance;
              }
            }
          } else if ((hitResult != null ? hitResult.type : void 0) === 'segment') {
            this.selectionState = {
              resize: {
                index: hitResult.segment.index
              }
            };
          }
        }
      };

      Item.prototype.beginSelect = function(event) {
        var hitResult;
        this.selectionState = {
          move: true
        };
        if (!this.isSelected()) {
          R.commandManager.add(new R.SelectCommand([this]), true);
        } else {
          hitResult = this.performHitTest(event.point, this.constructor.hitOptions);
          if (hitResult != null) {
            this.initializeSelection(event, hitResult);
          }
        }
        if (this.selectionState.move != null) {
          this.beginAction(new R.MoveCommand(this));
        } else if (this.selectionState.resize != null) {
          this.beginAction(new R.ResizeCommand(this));
        }
      };

      Item.prototype.updateSelect = function(event) {
        this.updateAction(event);
      };

      Item.prototype.endSelect = function(event) {
        this.endAction();
      };

      Item.prototype.beginAction = function(command) {
        if (this.currentCommand) {
          this.endAction();
          clearTimeout(R.updateTimeout['addCurrentCommand-' + (this.id || this.pk)]);
        }
        this.currentCommand = command;
      };

      Item.prototype.updateAction = function() {
        this.currentCommand.update.apply(this.currentCommand, arguments);
      };

      Item.prototype.endAction = function() {
        var commandChanged, positionIsValid;
        positionIsValid = this.currentCommand.constructor.needValidPosition ? Lock.validatePosition(this) : true;
        commandChanged = this.currentCommand.end(positionIsValid);
        if (positionIsValid) {
          if (commandChanged) {
            R.commandManager.add(this.currentCommand);
          }
        } else {
          this.currentCommand.undo();
        }
        this.currentCommand = null;
      };

      Item.prototype.deferredAction = function() {
        var ActionCommand, args;
        ActionCommand = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!ActionCommand.prototype.isPrototypeOf(this.currentCommand)) {
          this.beginAction(new ActionCommand(this, args));
        }
        this.updateAction.apply(this, args);
        Utils.deferredExecution(this.endAction, 'addCurrentCommand-' + (this.id || this.pk));
      };

      Item.prototype.createSelectionRectangle = function(bounds) {
        this.selectionRectangle.insert(1, new P.Point(bounds.left, bounds.center.y));
        this.selectionRectangle.insert(3, new P.Point(bounds.center.x, bounds.top));
        this.selectionRectangle.insert(5, new P.Point(bounds.right, bounds.center.y));
        this.selectionRectangle.insert(7, new P.Point(bounds.center.x, bounds.bottom));
      };

      Item.prototype.updateSelectionRectangle = function() {
        var bounds, _ref;
        bounds = this.rectangle.clone().expand(10);
        if ((_ref = this.selectionRectangle) != null) {
          _ref.remove();
        }
        this.selectionRectangle = new P.Path.Rectangle(bounds);
        this.group.addChild(this.selectionRectangle);
        this.selectionRectangle.name = "selection rectangle";
        this.selectionRectangle.pivot = bounds.center;
        this.createSelectionRectangle(bounds);
        this.selectionRectangle.selected = true;
        this.selectionRectangle.controller = this;
      };

      Item.prototype.setRectangle = function(rectangle, update) {
        if (update == null) {
          update = true;
        }
        if (!P.Rectangle.prototype.isPrototypeOf(rectangle)) {
          rectangle = new P.Rectangle(rectangle);
        }
        this.rectangle = rectangle;
        if (this.selectionRectangle) {
          this.updateSelectionRectangle();
        }
        if (!this.socketAction) {
          if (update) {
            this.update('rectangle');
          }
          R.chatSocket.emit("bounce", {
            itemPk: this.pk,
            "function": "setRectangle",
            "arguments": [this.rectangle, false]
          });
        }
      };

      Item.prototype.updateSetRectangle = function(event) {
        var center, delta, dx, dy, index, name, rectangle, rotation, x, y;
        event.point = Utils.Event.snap2D(event.point);
        rotation = this.rotation || 0;
        rectangle = this.rectangle.clone();
        delta = event.point.subtract(this.rectangle.center);
        x = new P.Point(1, 0);
        x.angle += rotation;
        dx = x.dot(delta);
        y = new P.Point(0, 1);
        y.angle += rotation;
        dy = y.dot(delta);
        index = this.selectionState.resize.index;
        name = this.constructor.indexToName[index];
        if (!event.modifiers.shift && __indexOf.call(this.constructor.cornersNames, name) >= 0 && rectangle.width > 0 && rectangle.height > 0) {
          if (Math.abs(dx / rectangle.width) > Math.abs(dy / rectangle.height)) {
            dx = Utils.sign(dx) * Math.abs(rectangle.width * dy / rectangle.height);
          } else {
            dy = Utils.sign(dy) * Math.abs(rectangle.height * dx / rectangle.width);
          }
        }
        center = rectangle.center.clone();
        rectangle[name] = this.constructor.valueFromName(center.add(dx, dy), name);
        if (!R.specialKey(event)) {
          rectangle[this.constructor.oppositeName[name]] = this.constructor.valueFromName(center.subtract(dx, dy), name);
        } else {
          rectangle.center = center.add(rectangle.center.subtract(center).rotate(rotation));
        }
        if (rectangle.width < 0) {
          rectangle.width = Math.abs(rectangle.width);
          rectangle.center.x = center.x;
        }
        if (rectangle.height < 0) {
          rectangle.height = Math.abs(rectangle.height);
          rectangle.center.y = center.y;
        }
        this.setRectangle(rectangle, false);
        Lock.highlightValidity(this);
      };

      Item.prototype.endSetRectangle = function(update) {
        if (update) {
          this.update('rectangle');
        }
      };

      Item.prototype.moveTo = function(position, update) {
        var delta;
        if (!P.Point.prototype.isPrototypeOf(position)) {
          position = new P.Point(position);
        }
        delta = position.subtract(this.rectangle.center);
        this.rectangle.center = position;
        this.group.translate(delta);
        if (!this.socketAction) {
          if (update) {
            this.update('position');
          }
          R.chatSocket.emit("bounce", {
            itemPk: this.pk,
            "function": "moveTo",
            "arguments": [position, false]
          });
        }
      };

      Item.prototype.moveBy = function(delta, update) {
        this.moveTo(this.rectangle.center.add(delta), update);
      };

      Item.prototype.updateMove = function(event) {
        var cornerName, destination, rectangle;
        if (Utils.Event.getSnap() > 1) {
          if (this.selectionState.move !== true) {
            cornerName = this.selectionState.move;
            rectangle = this.rectangle.clone();
            if (this.dragOffset == null) {
              this.dragOffset = rectangle[cornerName].subtract(event.downPoint);
            }
            destination = Utils.Event.snap2D(event.point.add(this.dragOffset));
            rectangle.moveCorner(cornerName, destination);
            this.moveTo(rectangle.center);
          } else {
            if (this.dragOffset == null) {
              this.dragOffset = this.rectangle.center.subtract(event.downPoint);
            }
            destination = Utils.Event.snap2D(event.point.add(this.dragOffset));
            this.moveTo(destination);
          }
        } else {
          this.moveBy(event.delta);
        }
        Lock.highlightValidity(this);
      };

      Item.prototype.endMove = function(update) {
        this.dragOffset = null;
        if (update) {
          this.update('position');
        }
      };

      Item.prototype.moveToCommand = function(position) {
        R.commandManager.add(new R.MoveCommand(this, position), true);
      };

      Item.prototype.resizeCommand = function(rectangle) {
        R.commandManager.add(new R.ResizeCommand(this, rectangle), true);
      };

      Item.prototype.moveByCommand = function(delta) {
        this.moveToCommand(this.rectangle.center.add(delta), true);
      };

      Item.prototype.getData = function() {
        var data;
        data = jQuery.extend({}, this.data);
        data.rectangle = this.rectangle.toJSON();
        data.rotation = this.rotation;
        return data;
      };

      Item.prototype.getStringifiedData = function() {
        return JSON.stringify(this.getData());
      };

      Item.prototype.getBounds = function() {
        return this.rectangle;
      };

      Item.prototype.getDrawingBounds = function() {
        return this.rectangle.expand(this.data.strokeWidth);
      };

      Item.prototype.highlight = function() {
        if (this.highlightRectangle != null) {
          Utils.Rectangle.updatePathRectangle(this.highlightRectangle, this.getBounds());
          return;
        }
        this.highlightRectangle = new P.Path.Rectangle(this.getBounds());
        this.highlightRectangle.strokeColor = R.selectionBlue;
        this.highlightRectangle.strokeScaling = false;
        this.highlightRectangle.dashArray = [4, 10];
        R.selectionLayer.addChild(this.highlightRectangle);
      };

      Item.prototype.unhighlight = function() {
        if (this.highlightRectangle == null) {
          return;
        }
        this.highlightRectangle.remove();
        this.highlightRectangle = null;
      };

      Item.prototype.getPk = function() {
        return this.pk || this.id;
      };

      Item.prototype.setPK = function(pk, loading) {
        this.pk = pk;
        if (loading == null) {
          loading = false;
        }
        R.items[this.pk] = this;
        delete R.items[this.id];
        if (!loading && !this.socketAction) {
          R.chatSocket.emit("bounce", {
            itemPk: this.id,
            "function": "setPK",
            "arguments": [this.pk]
          });
        }
      };

      Item.prototype.isSelected = function() {
        return this.selectionRectangle != null;
      };

      Item.prototype.select = function() {
        var _ref;
        if (this.selectionRectangle != null) {
          return false;
        }
        if ((_ref = this.lock) != null) {
          _ref.deselect();
        }
        this.selectionState = {
          move: true
        };
        R.s = this;
        this.updateSelectionRectangle(true);
        R.selectedItems.push(this);
        R.controllerManager.updateParametersForSelectedItems();
        R.rasterizer.selectItem(this);
        this.zindex = this.group.index;
        R.selectionLayer.addChild(this.group);
        return true;
      };

      Item.prototype.deselect = function() {
        var _ref;
        if (this.selectionRectangle == null) {
          return false;
        }
        if ((_ref = this.selectionRectangle) != null) {
          _ref.remove();
        }
        this.selectionRectangle = null;
        Utils.Array.remove(R.selectedItems, this);
        R.controllerManager.updateParametersForSelectedItems();
        if (this.group != null) {
          R.rasterizer.deselectItem(this);
          if (!this.lock) {
            this.group = R.mainLayer.insertChild(this.zindex, this.group);
          } else {
            this.group = this.lock.group.insertChild(this.zindex, this.group);
          }
        }
        R.RDiv.showDivs();
        return true;
      };

      Item.prototype.remove = function() {
        var _ref;
        if (!this.group) {
          return;
        }
        this.group.remove();
        this.group = null;
        this.deselect();
        if ((_ref = this.highlightRectangle) != null) {
          _ref.remove();
        }
        if (this.pk != null) {
          delete R.items[this.pk];
        } else {
          delete R.items[this.id];
        }
      };

      Item.prototype.finish = function() {
        if (this.rectangle.area === 0) {
          this.remove();
          return false;
        }
        return true;
      };

      Item.prototype.save = function(addCreateCommand) {
        if (addCreateCommand) {
          R.commandManager.add(new R.CreateItemCommand(this));
        }
      };

      Item.prototype.saveCallback = function() {};

      Item.prototype["delete"] = function() {
        if (!this.socketAction) {
          R.chatSocket.emit("bounce", {
            itemPk: this.pk,
            "function": "delete",
            "arguments": []
          });
        }
        this.pk = null;
      };

      Item.prototype.deleteCommand = function() {
        R.commandManager.add(new R.DeleteItemCommand(this), true);
      };

      Item.prototype.getDuplicateData = function() {
        return {
          data: this.getData(),
          rectangle: this.rectangle
        };
      };

      Item.prototype.duplicateCommand = function() {
        R.commandManager.add(new R.DuplicateItemCommand(this), true);
      };

      Item.prototype.removeDrawing = function() {
        var _ref;
        if (((_ref = this.drawing) != null ? _ref.parent : void 0) == null) {
          return;
        }
        this.drawingRelativePosition = this.drawing.position.subtract(this.rectangle.center);
        this.drawing.remove();
      };

      Item.prototype.replaceDrawing = function() {
        var _ref;
        if ((this.drawing == null) || (this.drawingRelativePosition == null)) {
          return;
        }
        if ((_ref = this.raster) != null) {
          _ref.remove();
        }
        this.group.addChild(this.drawing);
        this.drawing.position = this.rectangle.center.add(this.drawingRelativePosition);
        this.drawingRelativePosition = null;
      };

      Item.prototype.rasterize = function() {
        if ((this.raster != null) || (this.drawing == null)) {
          return;
        }
        if (!R.rasterizer.rasterizeItems) {
          return;
        }
        this.raster = this.drawing.rasterize();
        this.group.addChild(this.raster);
        this.raster.sendToBack();
        this.removeDrawing();
      };

      return Item;

    })();
    return RItem;
  });

}).call(this);

//# sourceMappingURL=Item.map
