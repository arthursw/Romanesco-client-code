// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['View/Grid', 'mousewheel', 'tween'], function(Grid) {
    var View;
    View = (function() {
      function View() {
        this.mousewheel = __bind(this.mousewheel, this);
        this.mouseup = __bind(this.mouseup, this);
        this.mousemove = __bind(this.mousemove, this);
        this.mousedown = __bind(this.mousedown, this);
        this.onWindowResize = __bind(this.onWindowResize, this);
        this.onFrame = __bind(this.onFrame, this);
        R.stageJ = $("#stage");
        R.canvasJ = R.stageJ.find("#canvas");
        R.canvas = R.canvasJ[0];
        R.canvas.width = window.innerWidth;
        R.canvas.height = window.innerHeight;
        R.context = R.canvas.getContext('2d');
        paper.setup(R.canvas);
        R.project = P.project;
        this.mainLayer = P.project.activeLayer;
        this.mainLayer.name = 'main layer';
        this.debugLayer = new P.Layer();
        this.debugLayer.name = 'debug layer';
        this.carLayer = new P.Layer();
        this.carLayer.name = 'car layer';
        this.lockLayer = new P.Layer();
        this.lockLayer.name = 'lock layer';
        this.selectionLayer = new P.Layer();
        this.selectionLayer.name = 'selection layer';
        this.areasToUpdateLayer = new P.Layer();
        this.areasToUpdateLayer.name = 'areasToUpdateLayer';
        this.backgroundRectangle = null;
        this.areasToUpdateLayer.visible = false;
        this.mainLayer.activate();
        paper.settings.hitTolerance = 5;
        R.scale = 1000.0;
        P.view.zoom = 1;
        this.previousPosition = P.view.center;
        this.restrictedArea = null;
        this.entireArea = null;
        this.entireAreas = [];
        this.grid = new Grid();
        R.canvasJ.dblclick(function(event) {
          var _ref;
          return (_ref = R.selectedTool) != null ? typeof _ref.doubleClick === "function" ? _ref.doubleClick(event) : void 0 : void 0;
        });
        R.canvasJ.keydown(function(event) {
          if (event.key === 46) {
            event.preventDefault();
            return false;
          }
        });
        this.tool = new P.Tool();
        this.tool.onMouseDown = this.onMouseDown;
        this.tool.onMouseDrag = this.onMouseDrag;
        this.tool.onMouseUp = this.onMouseUp;
        this.tool.onKeyDown = this.onKeyDown;
        this.tool.onKeyUp = this.onKeyUp;
        P.view.onFrame = this.onFrame;
        R.stageJ.mousewheel(this.mousewheel);
        R.stageJ.mousedown(this.mousedown);
        $(window).mousemove(this.mousemove);
        $(window).mouseup(this.mouseup);
        $(window).resize(this.onWindowResize);
        this.mousePosition = new P.Point();
        this.previousMousePosition = null;
        this.initialMousePosition = null;
        return;
      }

      View.prototype.moveTo = function(pos, delay, addCommand) {
        var initialPosition, somethingToLoad, tween;
        if (addCommand == null) {
          addCommand = true;
        }
        if (delay == null) {
          somethingToLoad = this.moveBy(pos.subtract(P.view.center), addCommand);
        } else {
          initialPosition = P.view.center;
          tween = new TWEEN.Tween(initialPosition).to(pos, delay).easing(TWEEN.Easing.Exponential.InOut).onUpdate(function() {
            return this.moveTo(this, addCommand);
          }).start();
        }
        return somethingToLoad;
      };

      View.prototype.moveBy = function(delta, addCommand) {
        var area, div, newEntireArea, newView, restrictedAreaShrinked, somethingToLoad, _i, _j, _len, _len1, _ref, _ref1;
        if (addCommand == null) {
          addCommand = true;
        }
        if (this.restrictedArea != null) {
          if (!this.restrictedArea.contains(P.view.center)) {
            delta = this.restrictedArea.center.subtract(P.view.center);
          } else {
            newView = P.view.bounds.clone();
            newView.center.x += delta.x;
            newView.center.y += delta.y;
            if (!this.restrictedArea.contains(newView)) {
              restrictedAreaShrinked = this.restrictedArea.expand(P.view.size.multiply(-1));
              if (restrictedAreaShrinked.width < 0) {
                restrictedAreaShrinked.left = restrictedAreaShrinked.right = this.restrictedArea.center.x;
              }
              if (restrictedAreaShrinked.height < 0) {
                restrictedAreaShrinked.top = restrictedAreaShrinked.bottom = this.restrictedArea.center.y;
              }
              newView.center.x = Utils.clamp(restrictedAreaShrinked.left, newView.center.x, restrictedAreaShrinked.right);
              newView.center.y = Utils.clamp(restrictedAreaShrinked.top, newView.center.y, restrictedAreaShrinked.bottom);
              delta = newView.center.subtract(P.view.center);
            }
          }
        }
        if (this.previousPosition == null) {
          this.previousPosition = P.view.center;
        }
        P.view.scrollBy(new P.Point(delta.x, delta.y));
        _ref = R.divs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          div = _ref[_i];
          div.updateTransform();
        }
        R.rasterizer.move();
        Grid.updateGrid();
        newEntireArea = null;
        _ref1 = this.entireAreas;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          area = _ref1[_j];
          if (area.getBounds().contains(P.view.center)) {
            newEntireArea = area;
            break;
          }
        }
        if ((this.entireArea == null) && (newEntireArea != null)) {
          this.entireArea = newEntireArea.getBounds();
        } else if ((this.entireArea != null) && (newEntireArea == null)) {
          this.entireArea = null;
        }
        somethingToLoad = newEntireArea != null ? R.loader.load(this.entireArea) : R.loader.load();
        R.chat.updateRoom();
        Utils.deferredExecution(this.updateHash, 'updateHash', 500);
        if (addCommand) {
          Utils.deferredExecution(this.addMoveCommand, 'add move command');
        }
        R.controllerManager.folders['General'].controllers['location'].setValue('' + P.view.center.x.toFixed(2) + ',' + P.view.center.y.toFixed(2));
        return somethingToLoad;
      };

      View.prototype.addMoveCommand = function() {
        R.commandManager.add(new R.MoveViewCommand(this.previousPosition, P.view.center));
        this.previousPosition = null;
      };

      View.prototype.updateHash = function() {
        var prefix;
        this.ignoreHashChange = true;
        prefix = '';
        if ((R.city.owner != null) && (R.city.name != null) && R.city.owner !== 'RomanescoOrg' && R.city.name !== 'Romanesco') {
          prefix = R.city.owner + '/' + R.city.name + '/';
        }
        location.hash = prefix + P.view.center.x.toFixed(2) + ',' + P.view.center.y.toFixed(2);
      };

      View.prototype.initializePosition = function() {
        var box, boxRectangle, boxString, br, controller, folder, folderName, loadEntireArea, planet, pos, site, siteString, tl, _i, _len, _ref, _ref1;
        if (R.rasterizerMode) {
          return;
        }
        R.city = {
          owner: R.canvasJ.attr("data-owner"),
          city: R.canvasJ.attr("data-city"),
          site: R.canvasJ.attr("data-site")
        };
        boxString = R.canvasJ.attr("data-box");
        if (!boxString || boxString.length === 0) {
          window.onhashchange();
          return;
        }
        box = JSON.parse(boxString);
        planet = new P.Point(box.planetX, box.planetY);
        tl = Utils.CS.posOnPlanetToProject(box.box.coordinates[0][0], planet);
        br = Utils.CS.posOnPlanetToProject(box.box.coordinates[0][2], planet);
        boxRectangle = new P.Rectangle(tl, br);
        pos = boxRectangle.center;
        this.moveTo(pos);
        loadEntireArea = R.canvasJ.attr("data-load-entire-area");
        if (loadEntireArea) {
          this.entireArea = boxRectangle;
          R.loader.load(boxRectangle);
        }
        siteString = R.canvasJ.attr("data-site");
        site = JSON.parse(siteString);
        if (site.restrictedArea) {
          this.restrictedArea = boxRectangle;
        }
        Tool.select.select();
        if (site.disableToolbar) {
          R.sidebar.hide();
        } else {
          R.sidebar.sidebarJ.find("div.panel.panel-default:not(:last)").hide();
          _ref = R.gui.__folders;
          for (folderName in _ref) {
            folder = _ref[folderName];
            _ref1 = folder.__controllers;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              controller = _ref1[_i];
              if (controller.name !== 'Zoom') {
                folder.remove(controller);
                folder.__controllers.remove(controller);
              }
            }
            if (folder.__controllers.length === 0) {
              R.gui.removeFolder(folderName);
            }
          }
          R.sidebar.handleJ.click();
        }
      };

      View.prototype.focusIsOnCanvas = function() {
        return $(document.activeElement).is("body");
      };

      View.onMouseDown = function(event) {
        var _ref, _ref1;
        if ((_ref = R.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          View.tool.onKeyUp({
            key: 'delete'
          });
          return;
        }
        $(document.activeElement).blur();
        if ((_ref1 = R.selectedTool) != null) {
          _ref1.begin(event);
        }
      };

      View.onMouseDrag = function(event) {
        var _ref, _ref1;
        if ((_ref = R.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          return;
        }
        if (R.currentDiv != null) {
          return;
        }
        if ((_ref1 = R.selectedTool) != null) {
          _ref1.update(event);
        }
      };

      View.onMouseUp = function(event) {
        var _ref, _ref1;
        if ((_ref = R.wacomPenAPI) != null ? _ref.isEraser : void 0) {
          return;
        }
        if (R.currentDiv != null) {
          return;
        }
        if ((_ref1 = R.selectedTool) != null) {
          _ref1.end(event);
        }
      };

      View.onKeyDown = function(event) {
        var _ref;
        if (!View.focusIsOnCanvas()) {
          return;
        }
        if (event.key === 'delete') {
          event.preventDefault();
          return false;
        }
        if (event.key === 'space' && ((_ref = R.selectedTool) != null ? _ref.name : void 0) !== 'Move') {
          Tool.move.select();
        }
      };

      View.onKeyUp = function(event) {
        var _ref, _ref1;
        if (!View.focusIsOnCanvas()) {
          return;
        }
        if ((_ref = R.selectedTool) != null) {
          _ref.keyUp(event);
        }
        switch (event.key) {
          case 'space':
            if ((_ref1 = R.previousTool) != null) {
              _ref1.select();
            }
            break;
          case 'v':
            Tool.select.select();
            break;
          case 't':
            R.showToolBox();
            break;
          case 'r':
            if (event.modifiers.shift) {
              R.rasterizer.rasterizeImmediately();
            }
        }
        event.preventDefault();
      };

      View.prototype.onFrame = function(event) {
        var car, direction, item, username, _base, _i, _len, _ref, _ref1, _ref2;
        TWEEN.update(event.time);
        if (typeof (_base = R.rasterizer).updateLoadingBar === "function") {
          _base.updateLoadingBar(event.time);
        }
        if ((_ref = R.selectedTool) != null) {
          if (typeof _ref.onFrame === "function") {
            _ref.onFrame(event);
          }
        }
        _ref1 = R.animatedItems;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          item.onFrame(event);
        }
        _ref2 = R.cars;
        for (username in _ref2) {
          car = _ref2[username];
          direction = new P.Point(1, 0);
          direction.angle = car.rotation - 90;
          car.position = car.position.add(direction.multiply(car.speed));
          if (Date.now() - car.rLastUpdate > 1000) {
            R.cars[username].remove();
            delete R.cars[username];
          }
        }
      };

      View.prototype.onWindowResize = function(event) {
        this.grid.updateGrid();
        $(".mCustomScrollbar").mCustomScrollbar("update");
        P.view.update();
        R.canvasJ.width(window.innerWidth);
        R.canvasJ.height(window.innerHeight);
        P.view.viewSize = new P.Size(window.innerWidth, window.innerHeight);
      };

      View.prototype.mousedown = function(event) {
        var _ref, _ref1, _ref2;
        switch (event.which) {
          case 2:
            Tool.move.select();
            break;
          case 3:
            if ((_ref = R.selectedTool) != null) {
              if (typeof _ref.finish === "function") {
                _ref.finish();
              }
            }
        }
        if (((_ref1 = R.selectedTool) != null ? _ref1.name : void 0) === 'Move') {
          if ((_ref2 = R.selectedTool) != null) {
            _ref2.beginNative(event);
          }
          return;
        }
        this.initialMousePosition = Utils.Event.jEventToPoint(event);
        this.previousMousePosition = this.initialMousePosition.clone();
      };

      View.prototype.mousemove = function(event) {
        var paperEvent, _base, _ref, _ref1;
        this.mousePosition.x = event.pageX;
        this.mousePosition.y = event.pageY;
        if (((_ref = R.selectedTool) != null ? _ref.name : void 0) === 'Move' && R.selectedTool.dragging) {
          R.selectedTool.updateNative(event);
          return;
        }
        R.Div.updateHiddenDivs(event);
        if ((_ref1 = R.codeEditor) != null) {
          _ref1.onMouseMove(event);
        }
        if (R.currentDiv != null) {
          paperEvent = Utils.Event.jEventToPaperEvent(event, this.previousMousePosition, this.initialMousePosition, 'mousemove');
          if (typeof (_base = R.currentDiv).updateSelect === "function") {
            _base.updateSelect(paperEvent);
          }
          this.previousMousePosition = paperEvent.point;
        }
      };

      View.prototype.mouseup = function(event) {
        var paperEvent, _base, _ref, _ref1, _ref2;
        if (R.stageJ.hasClass("has-tool-box") && !$(event.target).parents('.tool-box').length > 0) {
          R.hideToolBox();
        }
        if ((_ref = R.codeEditor) != null) {
          _ref.onMouseUp(event);
        }
        if (((_ref1 = R.selectedTool) != null ? _ref1.name : void 0) === 'Move') {
          R.selectedTool.endNative(event);
          if (event.which === 2) {
            if ((_ref2 = R.previousTool) != null) {
              _ref2.select();
            }
          }
          return;
        }
        if (R.currentDiv != null) {
          paperEvent = Utils.Event.jEventToPaperEvent(event, this.previousMousePosition, this.initialMousePosition, 'mouseup');
          if (typeof (_base = R.currentDiv).endSelect === "function") {
            _base.endSelect(paperEvent);
          }
          this.previousMousePosition = paperEvent.point;
        }
      };

      View.prototype.mousewheel = function(event) {
        this.moveBy(new P.Point(-event.deltaX, event.deltaY));
      };

      return View;

    })();
    window.onhashchange = function(event) {
      var fields, name, owner, p, pos;
      if (this.ignoreHashChange) {
        this.ignoreHashChange = false;
        return;
      }
      p = new P.Point();
      fields = location.hash.substr(1).split('/');
      if (fields.length >= 3) {
        owner = fields[0];
        name = fields[1];
        if (R.city.name !== name || R.city.owner !== owner) {
          R.loadCity(name, owner);
        }
      }
      pos = _.last(fields).split(',');
      p.x = parseFloat(pos[0]);
      p.y = parseFloat(pos[1]);
      if (!_.isFinite(p.x)) {
        p.x = 0;
      }
      if (!_.isFinite(p.y)) {
        p.y = 0;
      }
      this.moveTo(p);
    };
    return View;
  });

}).call(this);

//# sourceMappingURL=View.map
