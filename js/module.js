// Generated by CoffeeScript 1.7.1
(function() {
  define(['utils', 'editor', 'jquery', 'typeahead'], function(utils) {
    var Module, g, initModuleTypeahead;
    g = utils.g();
    Module = (function() {
      function Module(name, category, type, owner) {
        this.name = name;
        this.category = category;
        this.type = type;
        this.owner = owner;
        return;
      }

      Module.prototype.accept = function() {};

      Module.prototype.update = function() {};

      Module.prototype["delete"] = function() {};

      return Module;

    })();
    initModuleTypeahead = function(modules) {
      g.typeaheadModuleEngine = new Bloodhound({
        name: 'Modules',
        local: modules,
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        limit: 15
      });
      g.typeaheadModuleEngine.initialize();
      g.codeEditor.initializeModuleInput();
    };
    g.initializeModule = function(result) {
      var btnJ, module;
      if (!g.checkError(result)) {
        return;
      }
      module = JSON.parse(result.module);
      g.modules[module.name] = module;
      btnJ = g.sidebarJ.find('.module-list').find('li[data-name="' + module.name + '"]');
      if (btnJ.length === 0) {
        console.log("Error: impossible to find button for module " + module.name);
      }
      btnJ.off("click").click(function() {
        g.runModule(module);
      });
      g.runModule(module);
    };
    g.getModule = function(moduleName) {
      if (moduleName == null) {
        moduleName = $(this).attr('data-name');
      }
      Dajaxice.draw.getModuleSource(g.initializeModule, {
        name: moduleName,
        accepted: trueÂ 
      });
    };
    g.runModule = function(module) {
      var error;
      try {
        console.log(eval(module.compiledSource));
        if (g.lastPathCreated != null) {
          g.lastPathCreated.source = module.source;
          g.lastPathCreated = null;
        }
      } catch (_error) {
        error = _error;
        console.error(error);
        throw error;
        return null;
      }
    };
    g.deleteModule = function(moduleName, repoName, pk) {
      Dajaxice.draw.deleteModule(g.checkError, {
        name: moduleName,
        pk: pk,
        repoName: repoName
      });
    };
    g.showToolBox = function() {
      var allModulesJ, iconURL, name, scrollBarJ, searchModuleBtnJ, toolBoxJ, toolBtn, toolBtnJ, ulJ, _i, _len, _ref;
      allModulesJ = g.allToolsJ.parents(".all-tools:first");
      toolBoxJ = allModulesJ.clone();
      g.stageJ.append(toolBoxJ);
      toolBoxJ.addClass('tool-box');
      toolBoxJ.css({
        position: 'absolute',
        left: g.mousePosition.x,
        top: g.mousePosition.y
      });
      toolBoxJ.find('input').focus();
      ulJ = toolBoxJ.find('ul.all-tool-list').clone();
      scrollBarJ = toolBoxJ.find('.mCustomScrollbar.tree');
      scrollBarJ.empty();
      scrollBarJ.append(ulJ);
      scrollBarJ.mCustomScrollbar();
      toolBoxJ.find('input.search-tool').keyup(g.getSuggestions);
      toolBoxJ.find('h6').click(function(event) {
        $(this).parent().toggleClass('closed');
      });
      searchModuleBtnJ = toolBoxJ.find(".search-tools button");
      searchModuleBtnJ.click(g.createToolModal);
      _ref = $("#GeneralTools li");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        toolBtn = _ref[_i];
        toolBtnJ = $(toolBtn);
        name = toolBtnJ.attr('data-name');
        iconURL = toolBtnJ.find('img').attr('src');
        g.createToolButton(name, iconURL, false, 'General', ulJ);
      }
      toolBoxJ.find(".tool-btn").click(g.selectModule);
      toolBoxJ.find(".favorite-btn").click(g.toggleToolToFavorite);
      g.stageJ.addClass('has-tool-box');
    };
    g.hideToolBox = function() {
      if (g.stageJ.hasClass('has-tool-box')) {
        g.stageJ.find(".tool-box").remove();
        g.stageJ.removeClass('has-tool-box');
      }
    };
    g.selectModule = function() {
      var moduleName;
      g.RModal.hide();
      g.hideToolBox();
      moduleName = $(this).attr('data-name');
      if (g.tools[moduleName] != null) {
        g.tools[moduleName].select();
      } else {
        g.getModule(moduleName);
      }
    };
    g.createToolModal = function() {
      var module, name, toolBtn, toolBtnJ, _i, _len, _ref;
      g.hideToolBox();
      g.createModuleModal("Romanesco tools", g.selectModule);
      _ref = $("#GeneralTools li");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        toolBtn = _ref[_i];
        toolBtnJ = $(toolBtn);
        name = toolBtnJ.attr('data-name');
        module = {
          owner: 'Romanesco',
          coreModule: true,
          accepted: true
        };
        g.addModuleToModal(name, module, g.RModal.modalJ.find('tbody'), g.selectModule, true);
      }
    };
    g.getSuggestions = function(event) {
      var allModulesJ, inputJ, query;
      inputJ = $(this);
      allModulesJ = inputJ.parents(".all-tools:first");
      if (event.which === 27) {
        if (allModulesJ.hasClass("tool-box")) {
          allModulesJ.remove();
        }
        event.stopPropagation();
        return;
      }
      query = inputJ.val();
      if (query === "") {
        allModulesJ.find('li').show();
        return;
      }
      allModulesJ.find('li').hide();
      g.typeaheadModuleEngine.get(query, function(suggestions) {
        var suggestion, _i, _len;
        for (_i = 0, _len = suggestions.length; _i < _len; _i++) {
          suggestion = suggestions[_i];
          allModulesJ.find("li").has("li[data-name='" + suggestion.value + "']").removeClass("closed").show();
          allModulesJ.find("li[data-name='" + suggestion.value + "']").show().find('li').show();
        }
      });
    };
    g.initializeModules = function() {
      var searchToolsJ;
      if (!g.rasterizerMode) {
        g.allModulesJ = g.allToolsContainerJ.find(".all-tool-list");
        searchToolsJ = $(".search-tools");
        g.searchModuleInputJ = searchToolsJ.find("input.search-tool");
        g.searchModuleInputJ.keyup(g.getSuggestions);
        g.searchModuleBtnJ = searchToolsJ.find(".open-modal");
        g.searchModuleBtnJ.click(g.createToolModal);
      }
      Dajaxice.draw.getModules(function(result) {
        var btnJ, favorite, i, module, moduleValues, modules, name, _i, _len, _ref;
        modules = JSON.parse(result.modules);
        for (i = _i = 0, _len = modules.length; _i < _len; i = ++_i) {
          module = modules[i];
          if (!g.rasterizerMode) {
            favorite = g.favoriteTools.indexOf(module.name) >= 0;
            btnJ = g.createToolButton(module.name, module.iconURL, favorite, module.category);
            btnJ.click(g.getModule);
          }
          g.modules[module.name] = module;
        }
        moduleValues = [];
        _ref = g.modules;
        for (name in _ref) {
          module = _ref[name];
          moduleValues.push({
            value: name,
            iconURL: module.iconURL
          });
          if (module.category != null) {
            moduleValues.push({
              value: module.category
            });
          }
        }
        if (!g.rasterizerMode) {
          initModuleTypeahead(moduleValues);
        }
      });
    };
    g.addModuleToModal = function(name, module, tbodyJ, actionOnClick, prepend) {
      var authorJ, date, descriptionJ, githubJ, nameJ, rowJ, td1J, td2J, td3J, td4J, thumbnailJ;
      if (prepend == null) {
        prepend = false;
      }
      rowJ = $('<tr>').addClass('module');
      rowJ.attr("data-name", name).attr("data-owner", module.owner).attr("data-pk", module.pk);
      rowJ.css({
        cursor: 'pointer'
      });
      rowJ.click(actionOnClick);
      td1J = $('<td>');
      td2J = $('<td>');
      td3J = $('<td>');
      td4J = $('<td>');
      nameJ = $('<span>').addClass('name').text(name);
      authorJ = $('<span>').addClass('author').text(module.owner);
      if (module.githubURL != null) {
        githubJ = $('<a>').addClass('githubURL').text('Github repository').attr('href', module.githubURL);
      } else if (module.coreModule != null) {
        githubJ = $('<a>').addClass('githubURL').text('Main romanesco repository').attr('href', 'https://github.com/RomanescoModules/Romanesco');
      }
      if (module.thumbnail != null) {
        thumbnailJ = $('<image>').attr("src", module.thumbnail);
      }
      descriptionJ = $('<p>').addClass('description').text(module.description);
      td1J.append(nameJ, thumbnailJ, descriptionJ);
      td2J.append(authorJ);
      td3J.append(githubJ);
      if (module.accepted) {
        if (module.lastUpdate != null) {
          date = new Date(module.lastUpdate.$date);
          td4J.text(date.toLocaleString()).addClass("accepted");
        } else {
          td4J.text("-").addClass("accepted");
        }
      } else {
        td4J.text("not accepted");
      }
      rowJ.append(td1J, td2J, td3J, td4J);
      if (prepend) {
        tbodyJ.prepend(rowJ);
      } else {
        tbodyJ.append(rowJ);
      }
      return rowJ;
    };
    g.createModuleModal = function(title, actionOnClick) {
      var divJ, module, name, tableJ, tbodyJ, theadJ, _ref;
      g.RModal.initialize(title);
      divJ = $('<div>');
      divJ.css("max-height", "400px");
      divJ.css("overflow-y", "auto");
      tableJ = $('<table>').addClass("table table-hover").css({
        width: "100%"
      });
      theadJ = $('<thead>');
      theadJ.append($("<tr>\n	<th>Module</th>\n	<th>Author</th>\n	<th>Github URL</th>\n	<th>Accepted on</th>\n</tr>"));
      tableJ.append(theadJ);
      tbodyJ = $('<tbody>');
      _ref = g.modules;
      for (name in _ref) {
        module = _ref[name];
        g.addModuleToModal(name, module, tbodyJ, actionOnClick);
      }
      tableJ.append(tbodyJ);
      divJ.append(tableJ);
      g.RModal.modalBodyJ.append(divJ);
      g.RModal.show();
      g.RModal.modalJ.find(".btn-primary").hide();
    };
    g.acceptModule = function(module) {
      var callback, m;
      m = g.compileSource(module.source, module.name);
      module.iconURL = m.iconURL;
      module.compiledSource = m.compiledSource;
      module.description = m.description;
      callback = function(results) {
        if (!g.checkError(results)) {
          return;
        }
        console.log(results.message);
      };
      Dajaxice.draw.acceptModule(g.checkError, module);
    };
    g.setAdminMode = function() {
      var ce;
      ce = g.codeEditor;
      ce.acceptBtnJ = ce.editorJ.find("button.accept");
      ce.acceptBtnJ.removeClass('hidden');
      ce.acceptBtnJ.click(function(event) {
        if ((ce.module != null) && (ce.module.source != null) && (ce.module.name != null)) {
          g.acceptModule(ce.module);
        } else {
          g.romanesco_alert('The module does not have a name or a source.', 'error');
        }
      });
    };
    g.getWaitingModules = function(value) {
      var getWaitingModulesCallback;
      getWaitingModulesCallback = function(result) {
        if (g.checkError(result)) {
          g.waitingModules = result.modules;
          console.log("Waiting modules loaded:");
          console.log(g.waitingModules);
        }
      };
      Dajaxice.draw.getWaitingModules(getWaitingModulesCallback, {});
    };
  });

}).call(this);

//# sourceMappingURL=module.map
