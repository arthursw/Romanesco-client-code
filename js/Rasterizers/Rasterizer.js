// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['Items/Lock'], function(Lock) {
    var CanvasTileRasterizer, InstantPaperTileRasterizer, PaperTileRasterizer, Rasterizer, TileRasterizer;
    Rasterizer = (function() {
      Rasterizer.TYPE = 'default';

      Rasterizer.MAX_AREA = 1.5;

      Rasterizer.UNION_RATIO = 1.5;

      Rasterizer.areaToImageDataUrl = function(rectangle, convertToView) {
        var canvasTemp, contextTemp, dataURL, viewRectangle;
        if (convertToView == null) {
          convertToView = true;
        }
        if (rectangle.height <= 0 || rectangle.width <= 0) {
          console.log('Warning: trying to extract empty area!!!');
          return null;
        }
        if (convertToView) {
          rectangle = rectangle.intersect(P.view.bounds);
          viewRectangle = Utils.CS.projectToViewRectangle(rectangle);
        } else {
          viewRectangle = rectangle;
        }
        if (viewRectangle.size.equals(P.view.size) && viewRectangle.x === 0 && viewRectangle.y === 0) {
          return R.canvas.toDataURL("image/png");
        }
        canvasTemp = document.createElement('canvas');
        canvasTemp.width = viewRectangle.width;
        canvasTemp.height = viewRectangle.height;
        contextTemp = canvasTemp.getContext('2d');
        contextTemp.putImageData(R.context.getImageData(viewRectangle.x, viewRectangle.y, viewRectangle.width, viewRectangle.height), 0, 0);
        dataURL = canvasTemp.toDataURL("image/png");
        return dataURL;
      };

      function Rasterizer() {
        R.rasterizerManager.rasterizers[this.constructor.TYPE] = this;
        this.rasterizeItems = true;
        return;
      }

      Rasterizer.prototype.quantizeBounds = function(bounds, scale) {
        var quantizedBounds;
        if (bounds == null) {
          bounds = P.view.bounds;
        }
        if (scale == null) {
          scale = R.scale;
        }
        quantizedBounds = {
          t: Utils.floorToMultiple(bounds.top, scale),
          l: Utils.floorToMultiple(bounds.left, scale),
          b: Utils.floorToMultiple(bounds.bottom, scale),
          r: Utils.floorToMultiple(bounds.right, scale)
        };
        return quantizedBounds;
      };

      Rasterizer.prototype.rasterize = function(items, excludeItems) {};

      Rasterizer.prototype.unload = function(limit) {};

      Rasterizer.prototype.load = function(rasters, qZoom) {};

      Rasterizer.prototype.move = function() {};

      Rasterizer.prototype.loadItem = function(item) {
        if (typeof item.draw === "function") {
          item.draw();
        }
        if (this.rasterizeItems) {
          if (typeof item.rasterize === "function") {
            item.rasterize();
          }
        }
      };

      Rasterizer.prototype.requestDraw = function() {
        return true;
      };

      Rasterizer.prototype.selectItem = function(item) {};

      Rasterizer.prototype.deselectItem = function(item) {
        if (typeof item.rasterize === "function") {
          item.rasterize();
        }
      };

      Rasterizer.prototype.rasterizeRectangle = function(rectangle) {};

      Rasterizer.prototype.addAreaToUpdate = function(area) {};

      Rasterizer.prototype.setQZoomToUpdate = function(qZoom) {};

      Rasterizer.prototype.rasterizeAreasToUpdate = function() {};

      Rasterizer.prototype.maxArea = function() {
        return P.view.bounds.area * this.constructor.MAX_AREA;
      };

      Rasterizer.prototype.rasterizeView = function() {};

      Rasterizer.prototype.clearRasters = function() {};

      Rasterizer.prototype.drawItems = function() {};

      Rasterizer.prototype.rasterizeAllItems = function() {
        var item, pk, _ref;
        _ref = R.items;
        for (pk in _ref) {
          item = _ref[pk];
          if (typeof item.rasterize === "function") {
            item.rasterize();
          }
        }
      };

      Rasterizer.prototype.hideOthers = function(itemsToExclude) {};

      Rasterizer.prototype.showItems = function() {};

      Rasterizer.prototype.hideRasters = function() {};

      Rasterizer.prototype.showRasters = function() {};

      Rasterizer.prototype.extractImage = function(rectangle, redraw) {
        return Rasterizer.areaToImageDataUrl(rectangle);
      };

      return Rasterizer;

    })();
    TileRasterizer = (function(_super) {
      __extends(TileRasterizer, _super);

      TileRasterizer.TYPE = 'abstract tile';

      TileRasterizer.loadingBarJ = null;

      TileRasterizer.addChildren = function(parent, sortedItems) {
        var item, _i, _len, _ref;
        if (parent.children == null) {
          return;
        }
        _ref = parent.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if ((item.controller != null) && P.Group.prototype.isPrototypeOf(item)) {
            sortedItems.push(item.controller);
            if (Lock.prototype.isPrototypeOf(item.controller)) {
              this.addChildren(item, sortedItems);
            }
          }
        }
      };

      TileRasterizer.getSortedItems = function() {
        var sortedItems;
        sortedItems = [];
        this.addChildren(R.view.mainLayer, sortedItems);
        this.addChildren(R.view.lockLayer, sortedItems);
        return sortedItems;
      };

      function TileRasterizer() {
        this.rasterizeCallback = __bind(this.rasterizeCallback, this);
        this.rasterizeImmediately = __bind(this.rasterizeImmediately, this);
        TileRasterizer.__super__.constructor.call(this);
        this.itemsToExclude = [];
        this.areaToRasterize = null;
        this.areasToUpdate = [];
        this.rasters = {};
        this.rasterizeItems = true;
        this.rasterizationDisabled = false;
        this.autoRasterization = 'deferred';
        this.rasterizationDelay = 800;
        this.renderInView = false;
        this.itemsAreDrawn = false;
        this.itemsAreVisible = false;
        this.move();
        return;
      }

      TileRasterizer.prototype.loadItem = function(item) {
        var _ref;
        if (((_ref = item.data) != null ? _ref.animate : void 0) || R.selectedTool.constructor.drawItems) {
          if (typeof item.draw === "function") {
            item.draw();
          }
        } else {
          this.itemsAreDrawn = false;
        }
        if (this.rasterizeItems) {
          if (typeof item.rasterize === "function") {
            item.rasterize();
          }
        }
      };

      TileRasterizer.prototype.startLoading = function() {
        this.startLoadingTime = P.view._time;
        TileRasterizer.loadingBarJ.css({
          width: 0
        });
        TileRasterizer.loadingBarJ.show();
        Utils.deferredExecution(this.rasterizeCallback, 'rasterize', this.rasterizationDelay);
      };

      TileRasterizer.prototype.stopLoading = function(cancelTimeout) {
        if (cancelTimeout == null) {
          cancelTimeout = true;
        }
        this.startLoadingTime = null;
        TileRasterizer.loadingBarJ.hide();
        if (cancelTimeout) {
          clearTimeout(R.updateTimeout['rasterize']);
        }
      };

      TileRasterizer.prototype.rasterizeImmediately = function() {
        this.stopLoading();
        this.rasterizeCallback();
      };

      TileRasterizer.prototype.updateLoadingBar = function(time) {
        var duration, totalWidth;
        if (this.startLoadingTime == null) {
          return;
        }
        duration = 1000 * (time - this.startLoadingTime) / this.rasterizationDelay;
        totalWidth = 241;
        TileRasterizer.loadingBarJ.css({
          width: duration * totalWidth
        });
        if (duration >= 1) {
          this.stopLoading(false);
        }
      };

      TileRasterizer.prototype.drawItemsAndHideRasters = function() {
        this.drawItems(true);
        this.hideRasters();
      };

      TileRasterizer.prototype.selectItem = function(item) {
        this.drawItems();
        this.rasterize(item, true);
        switch (this.autoRasterization) {
          case 'disabled':
            this.drawItemsAndHideRasters();
            item.group.visible = true;
            break;
          case 'deferred':
            this.drawItemsAndHideRasters();
            item.group.visible = true;
            this.stopLoading();
            break;
          case 'immediate':
            Utils.callNextFrame(this.rasterizeCallback, 'rasterize');
        }
      };

      TileRasterizer.prototype.deselectItem = function(item) {
        if (this.rasterizeItems) {
          if (typeof item.rasterize === "function") {
            item.rasterize();
          }
        }
        this.rasterize(item);
        switch (this.autoRasterization) {
          case 'deferred':
            this.startLoading();
            break;
          case 'immediate':
            Utils.callNextFrame(this.rasterizeCallback, 'rasterize');
        }
      };

      TileRasterizer.prototype.rasterLoaded = function(raster) {
        raster.context.clearRect(0, 0, R.scale, R.scale);
        raster.context.drawImage(raster.image, 0, 0);
        raster.ready = true;
        raster.loaded = true;
        this.checkRasterizeAreasToUpdate();
      };

      TileRasterizer.prototype.checkRasterizeAreasToUpdate = function(pathsCreated) {
        var allRastersAreReady, raster, rasterColumn, x, y, _ref;
        if (pathsCreated == null) {
          pathsCreated = false;
        }
        if (pathsCreated || Utils.isEmpty(R.loader.pathsToCreate)) {
          allRastersAreReady = true;
          _ref = this.rasters;
          for (x in _ref) {
            rasterColumn = _ref[x];
            for (y in rasterColumn) {
              raster = rasterColumn[y];
              allRastersAreReady &= raster.ready;
            }
          }
          if (allRastersAreReady) {
            this.rasterizeAreasToUpdate();
          }
        }
      };

      TileRasterizer.prototype.createRaster = function(x, y, zoom, raster) {
        var _base;
        raster.zoom = zoom;
        raster.ready = true;
        raster.loaded = false;
        if ((_base = this.rasters)[x] == null) {
          _base[x] = {};
        }
        this.rasters[x][y] = raster;
      };

      TileRasterizer.prototype.getRasterBounds = function(x, y) {
        var size;
        size = this.rasters[x][y].zoom * R.scale;
        return new P.Rectangle(x, y, size, size);
      };

      TileRasterizer.prototype.removeRaster = function(raster, x, y) {
        delete this.rasters[x][y];
        if (Utils.isEmpty(this.rasters[x])) {
          delete this.rasters[x];
        }
      };

      TileRasterizer.prototype.unload = function(limit) {
        var qZoom, raster, rasterColumn, rectangle, x, y, _ref;
        qZoom = Utils.CS.quantizeZoom(1.0 / P.view.zoom);
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          x = Number(x);
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            y = Number(y);
            rectangle = this.getRasterBounds(x, y);
            if (!limit.intersects(rectangle) || this.rasters[x][y].zoom !== qZoom) {
              this.removeRaster(raster, x, y);
            }
          }
        }
      };

      TileRasterizer.prototype.loadImageForRaster = function(raster, url) {};

      TileRasterizer.prototype.load = function(rasters, qZoom) {
        var r, raster, url, x, y, _i, _len, _ref;
        this.move();
        for (_i = 0, _len = rasters.length; _i < _len; _i++) {
          r = rasters[_i];
          x = r.position.x * R.scale;
          y = r.position.y * R.scale;
          raster = (_ref = this.rasters[x]) != null ? _ref[y] : void 0;
          if (raster && !raster.loaded) {
            raster.ready = false;
            url = R.romanescoURL + r.url + '?' + Math.random();
            this.loadImageForRaster(raster, url);
          }
        }
      };

      TileRasterizer.prototype.createRasters = function(rectangle) {
        var qBounds, qZoom, scale, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
        qZoom = Utils.CS.quantizeZoom(1.0 / P.view.zoom);
        scale = R.scale * qZoom;
        qBounds = this.quantizeBounds(rectangle, scale);
        for (x = _i = _ref = qBounds.l, _ref1 = qBounds.r; scale > 0 ? _i <= _ref1 : _i >= _ref1; x = _i += scale) {
          for (y = _j = _ref2 = qBounds.t, _ref3 = qBounds.b; scale > 0 ? _j <= _ref3 : _j >= _ref3; y = _j += scale) {
            this.createRaster(x, y, qZoom);
          }
        }
      };

      TileRasterizer.prototype.move = function() {
        this.createRasters(P.view.bounds);
      };

      TileRasterizer.prototype.splitAreaToRasterize = function() {
        var area, areaToRasterizeInteger, areas, maxSize;
        maxSize = P.view.size.multiply(2);
        areaToRasterizeInteger = Utils.Rectangle.expandRectangleToInteger(this.areaToRasterize);
        area = Utils.Rectangle.expandRectangleToInteger(new P.Rectangle(this.areaToRasterize.topLeft, P.Size.min(maxSize, this.areaToRasterize.size)));
        areas = [area.clone()];
        while (area.right < this.areaToRasterize.right || area.bottom < this.areaToRasterize.bottom) {
          if (area.right < this.areaToRasterize.right) {
            area.x += maxSize.width;
          } else {
            area.x = areaToRasterizeInteger.left;
            area.y += maxSize.height;
          }
          areas.push(area.intersect(areaToRasterizeInteger));
        }
        return areas;
      };

      TileRasterizer.prototype.rasterizeCanvasInRaster = function(x, y, canvas, rectangle, qZoom, clearRasters, sourceRectangle) {
        var context, destinationRectangle, intersection, rasterRectangle, _ref;
        if (clearRasters == null) {
          clearRasters = false;
        }
        if (sourceRectangle == null) {
          sourceRectangle = null;
        }
        if (((_ref = this.rasters[x]) != null ? _ref[y] : void 0) == null) {
          return;
        }
        rasterRectangle = this.getRasterBounds(x, y);
        intersection = rectangle.intersect(rasterRectangle);
        destinationRectangle = new P.Rectangle(intersection.topLeft.subtract(rasterRectangle.topLeft).divide(qZoom), intersection.size.divide(qZoom));
        context = this.rasters[x][y].context;
        if (clearRasters) {
          context.clearRect(destinationRectangle.x, destinationRectangle.y, destinationRectangle.width, destinationRectangle.height);
        }
        if (canvas != null) {
          if (sourceRectangle != null) {
            sourceRectangle = new P.Rectangle(intersection.topLeft.subtract(sourceRectangle.topLeft), intersection.size);
          } else {
            sourceRectangle = new P.Rectangle(intersection.topLeft.subtract(rectangle.topLeft).divide(qZoom), intersection.size.divide(qZoom));
          }
          context.drawImage(canvas, sourceRectangle.x, sourceRectangle.y, sourceRectangle.width, sourceRectangle.height, destinationRectangle.x, destinationRectangle.y, destinationRectangle.width, destinationRectangle.height);
        }
      };

      TileRasterizer.prototype.rasterizeCanvas = function(canvas, rectangle, clearRasters, sourceRectangle) {
        var qBounds, qZoom, scale, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
        if (clearRasters == null) {
          clearRasters = false;
        }
        if (sourceRectangle == null) {
          sourceRectangle = null;
        }
        console.log("rasterize: " + rectangle.width + ", " + rectangle.height);
        qZoom = Utils.CS.quantizeZoom(1.0 / P.view.zoom);
        scale = R.scale * qZoom;
        qBounds = this.quantizeBounds(rectangle, scale);
        for (x = _i = _ref = qBounds.l, _ref1 = qBounds.r; scale > 0 ? _i <= _ref1 : _i >= _ref1; x = _i += scale) {
          for (y = _j = _ref2 = qBounds.t, _ref3 = qBounds.b; scale > 0 ? _j <= _ref3 : _j >= _ref3; y = _j += scale) {
            this.rasterizeCanvasInRaster(x, y, canvas, rectangle, qZoom, clearRasters, sourceRectangle);
          }
        }
      };

      TileRasterizer.prototype.clearAreaInRasters = function(rectangle) {
        this.rasterizeCanvas(null, rectangle, true);
      };

      TileRasterizer.prototype.rasterizeArea = function(area) {
        P.view.viewSize = area.size.multiply(P.view.zoom);
        P.view.center = area.center;
        P.view.update();
        this.rasterizeCanvas(R.canvas, area, true);
      };

      TileRasterizer.prototype.rasterizeAreas = function(areas) {
        var area, viewPosition, viewSize, viewZoom, _i, _len;
        viewZoom = P.view.zoom;
        viewSize = P.view.viewSize;
        viewPosition = P.view.center;
        P.view.zoom = 1.0 / Utils.CS.quantizeZoom(1.0 / P.view.zoom);
        for (_i = 0, _len = areas.length; _i < _len; _i++) {
          area = areas[_i];
          this.rasterizeArea(area);
        }
        P.view.zoom = viewZoom;
        P.view.viewSize = viewSize;
        P.view.center = viewPosition;
      };

      TileRasterizer.prototype.prepareView = function() {
        var item, pk, _i, _len, _ref, _ref1, _ref2, _ref3;
        _ref = R.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.group.visible = true;
        }
        _ref1 = this.itemsToExclude;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          if ((_ref2 = item.group) != null) {
            _ref2.visible = false;
          }
        }
        R.grid.visible = false;
        R.view.selectionLayer.visible = false;
        R.view.carLayer.visible = false;
        this.viewOnFrame = P.view.onFrame;
        P.view.onFrame = null;
        if ((_ref3 = this.rasterLayer) != null) {
          _ref3.visible = false;
        }
      };

      TileRasterizer.prototype.restoreView = function() {
        var _ref;
        if ((_ref = this.rasterLayer) != null) {
          _ref.visible = true;
        }
        P.view.onFrame = this.viewOnFrame;
        R.view.carLayer.visible = true;
        R.view.selectionLayer.visible = true;
        R.grid.visible = true;
      };

      TileRasterizer.prototype.rasterizeCallback = function(step) {
        var area, areas, item, pk, sortedItems, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
        if (!this.areaToRasterize) {
          return;
        }
        console.log("rasterize");
        Utils.logElapsedTime();
        R.startTimer();
        if (this.autoRasterization === 'deferred' || this.autoRasterization === 'disabled') {
          this.showRasters();
        }
        areas = this.splitAreaToRasterize();
        if (this.renderInView) {
          this.prepareView();
          this.rasterizeAreas(areas);
          this.restoreView();
        } else {
          sortedItems = this.constructor.getSortedItems();
          for (_i = 0, _len = areas.length; _i < _len; _i++) {
            area = areas[_i];
            this.clearAreaInRasters(area);
            for (_j = 0, _len1 = sortedItems.length; _j < _len1; _j++) {
              item = sortedItems[_j];
              if (((_ref = item.raster) != null ? _ref.bounds.intersects(area) : void 0) && __indexOf.call(this.itemsToExclude, item) < 0) {
                this.rasterizeCanvas(item.raster.canvas, item.raster.bounds.intersect(area), false, item.raster.bounds);
              }
            }
          }
        }
        _ref1 = R.items;
        for (pk in _ref1) {
          item = _ref1[pk];
          if (item === R.currentPaths[R.me] || (item.selectionRectangle != null)) {
            continue;
          }
          if ((_ref2 = item.group) != null) {
            _ref2.visible = false;
          }
        }
        _ref3 = this.itemsToExclude;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          item = _ref3[_k];
          if ((_ref4 = item.group) != null) {
            _ref4.visible = true;
          }
          if (typeof item.showChildren === "function") {
            item.showChildren();
          }
        }
        this.itemsToExclude = [];
        this.areaToRasterize = null;
        this.itemsAreVisible = false;
        this.stopLoading();
        R.stopTimer('Time to rasterize path: ');
        Utils.logElapsedTime();
      };

      TileRasterizer.prototype.rasterize = function(items, excludeItems) {
        var item, _i, _len;
        if (this.rasterizationDisabled) {
          return;
        }
        console.log("ask rasterize" + (excludeItems ? " excluding items." : ""));
        Utils.logElapsedTime();
        if (!Utils.Array.isArray(items)) {
          items = [items];
        }
        if (!excludeItems) {
          this.itemsToExclude = [];
        }
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          if (this.areaToRasterize == null) {
            this.areaToRasterize = item.getDrawingBounds();
          }
          this.areaToRasterize = this.areaToRasterize.unite(item.getDrawingBounds());
          if (excludeItems) {
            Utils.Array.pushIfAbsent(this.itemsToExclude, item);
          }
        }
      };

      TileRasterizer.prototype.rasterizeRectangle = function(rectangle) {
        this.drawItems();
        if (this.areaToRasterize == null) {
          this.areaToRasterize = rectangle;
        } else {
          this.areaToRasterize = this.areaToRasterize.unite(rectangle);
        }
        Utils.callNextFrame(this.rasterizeCallback, 'rasterize');
      };

      TileRasterizer.prototype.addAreaToUpdate = function(area) {
        this.areasToUpdate.push(area);
      };

      TileRasterizer.prototype.setQZoomToUpdate = function(qZoom) {
        this.areasToUpdateQZoom = qZoom;
      };

      TileRasterizer.prototype.rasterizeAreasToUpdate = function() {
        var area, previousAreaToRasterize, previousItemsToExclude, previousZoom, _i, _len, _ref;
        if (this.areasToUpdate.length === 0) {
          return;
        }
        this.drawItems(true);
        previousItemsToExclude = this.itemsToExclude;
        previousAreaToRasterize = this.areaToRasterize;
        previousZoom = P.view.zoom;
        P.view.zoom = 1.0 / this.areasToUpdateQZoom;
        this.itemsToExclude = [];
        _ref = this.areasToUpdate;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          area = _ref[_i];
          this.areaToRasterize = area;
          this.rasterizeCallback();
        }
        this.areasToUpdate = [];
        this.itemsToExclude = previousItemsToExclude;
        this.areaToRasterize = previousAreaToRasterize;
        P.view.zoom = previousZoom;
      };

      TileRasterizer.prototype.clearRasters = function() {
        var raster, rasterColumn, x, y, _ref;
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            raster.context.clearRect(0, 0, R.scale, R.scale);
          }
        }
      };

      TileRasterizer.prototype.drawItems = function(showItems) {
        var item, pk, _ref;
        if (showItems == null) {
          showItems = false;
        }
        if (showItems) {
          this.showItems();
        }
        if (this.itemsAreDrawn) {
          return;
        }
        _ref = R.items;
        for (pk in _ref) {
          item = _ref[pk];
          if (item.drawing == null) {
            if (typeof item.draw === "function") {
              item.draw();
            }
          }
          if (this.rasterizeItems) {
            if (typeof item.rasterize === "function") {
              item.rasterize();
            }
          }
        }
        this.itemsAreDrawn = true;
      };

      TileRasterizer.prototype.showItems = function() {
        var item, pk, _ref;
        if (this.itemsAreVisible) {
          return;
        }
        _ref = R.items;
        for (pk in _ref) {
          item = _ref[pk];
          item.group.visible = true;
        }
        this.itemsAreVisible = true;
      };

      TileRasterizer.prototype.disableRasterization = function() {
        this.rasterizationDisabled = true;
        this.clearRasters();
        this.drawItems(true);
      };

      TileRasterizer.prototype.enableRasterization = function() {
        this.rasterizationDisabled = false;
        this.rasterizeView();
      };

      TileRasterizer.prototype.rasterizeView = function() {
        this.rasterizeRectangle(P.view.bounds);
      };

      TileRasterizer.prototype.hideRasters = function() {};

      TileRasterizer.prototype.showRasters = function() {};

      TileRasterizer.prototype.hideOthers = function(itemToExclude) {
        var item, pk, _ref;
        console.log(itemToExclude.pk);
        _ref = R.items;
        for (pk in _ref) {
          item = _ref[pk];
          if (item !== itemToExclude) {
            item.group.visible = false;
          }
        }
      };

      TileRasterizer.prototype.extractImage = function(rectangle, redraw) {
        var dataURL, disableDrawing, item, pk, rasterizeItems, _ref;
        if (redraw) {
          rasterizeItems = this.rasterizeItems;
          this.rasterizeItems = false;
          disableDrawing = this.disableDrawing;
          this.disableDrawing = false;
          this.drawItemsAndHideRasters();
          dataURL = Rasterizer.areaToImageDataUrl(rectangle);
          if (rasterizeItems) {
            this.rasterizeItems = true;
            _ref = R.items;
            for (pk in _ref) {
              item = _ref[pk];
              if (typeof item.rasterize === "function") {
                item.rasterize();
              }
            }
          }
          if (disableDrawing) {
            this.disableDrawing = true;
          }
          this.showRasters();
          this.rasterizeImmediately();
          return dataURL;
        } else {
          return Rasterizer.areaToImageDataUrl(rectangle);
        }
      };

      return TileRasterizer;

    })(Rasterizer);
    PaperTileRasterizer = (function(_super) {
      __extends(PaperTileRasterizer, _super);

      PaperTileRasterizer.TYPE = 'paper tile';

      function PaperTileRasterizer() {
        this.onRasterLoad = __bind(this.onRasterLoad, this);
        this.rasterLayer = new P.Layer();
        this.rasterLayer.name = 'raster layer';
        this.rasterLayer.moveBelow(R.view.mainLayer);
        R.view.mainLayer.activate();
        PaperTileRasterizer.__super__.constructor.call(this);
        return;
      }

      PaperTileRasterizer.prototype.onRasterLoad = function() {
        raster.context = raster.canvas.getContext('2d');
        this.rasterLoaded(raster);
      };

      PaperTileRasterizer.prototype.createRaster = function(x, y, zoom) {
        var raster, _ref;
        if (((_ref = this.rasters[x]) != null ? _ref[y] : void 0) != null) {
          return;
        }
        raster = new P.Raster();
        raster.name = 'raster: ' + x + ', ' + y;
        console.log(raster.name);
        raster.position.x = x + 0.5 * R.scale * zoom;
        raster.position.y = y + 0.5 * R.scale * zoom;
        raster.width = R.scale;
        raster.height = R.scale;
        raster.scale(zoom);
        raster.context = raster.canvas.getContext('2d');
        this.rasterLayer.addChild(raster);
        raster.onLoad = this.onRasterLoad;
        PaperTileRasterizer.__super__.createRaster.call(this, x, y, zoom, raster);
      };

      PaperTileRasterizer.prototype.removeRaster = function(raster, x, y) {
        raster.remove();
        PaperTileRasterizer.__super__.removeRaster.call(this, raster, x, y);
      };

      PaperTileRasterizer.prototype.loadImageForRaster = function(raster, url) {
        raster.source = url;
      };

      PaperTileRasterizer.prototype.hideRasters = function() {
        var raster, rasterColumn, x, y, _ref;
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            raster.visible = false;
          }
        }
      };

      PaperTileRasterizer.prototype.showRasters = function() {
        var raster, rasterColumn, x, y, _ref;
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            raster.visible = true;
          }
        }
      };

      return PaperTileRasterizer;

    })(TileRasterizer);
    InstantPaperTileRasterizer = (function(_super) {
      __extends(InstantPaperTileRasterizer, _super);

      InstantPaperTileRasterizer.TYPE = 'light';

      function InstantPaperTileRasterizer() {
        InstantPaperTileRasterizer.__super__.constructor.call(this);
        this.disableDrawing = true;
        this.updateDrawingAfterDelay = true;
        this.itemsToDraw = {};
        return;
      }

      InstantPaperTileRasterizer.prototype.drawItemsAndHideRasters = function() {};

      InstantPaperTileRasterizer.prototype.requestDraw = function(item, simplified, redrawing) {
        var delay, time;
        if (this.disableDrawing) {
          if (this.updateDrawingAfterDelay) {
            time = Date.now();
            delay = 500;
            if ((this.itemsToDraw[item.pk] == null) || time - this.itemsToDraw[item.pk] < delay) {
              this.itemsToDraw[item.pk] = time;
              Utils.deferredExecution(item.draw, 'item.draw:' + item.pk, delay, [simplified, redrawing], item);
            } else {
              delete this.itemsToDraw[item.pk];
              return true;
            }
          }
        }
        return !this.disableDrawing;
      };

      InstantPaperTileRasterizer.prototype.selectItem = function(item) {
        if (!this.rasterizeItems) {
          item.removeDrawing();
        }
        InstantPaperTileRasterizer.__super__.selectItem.call(this, item);
      };

      InstantPaperTileRasterizer.prototype.deselectItem = function(item) {
        InstantPaperTileRasterizer.__super__.deselectItem.call(this, item);
        if (!this.rasterizeItems) {
          item.replaceDrawing();
        }
      };

      InstantPaperTileRasterizer.prototype.rasterizeCallback = function(step) {
        var item, pk, _ref;
        this.disableDrawing = false;
        _ref = R.items;
        for (pk in _ref) {
          item = _ref[pk];
          if ((item.drawn != null) && !item.drawn && item.getDrawingBounds().intersects(this.areaToRasterize)) {
            if (typeof item.draw === "function") {
              item.draw();
            }
            if (this.rasterizeItems) {
              if (typeof item.rasterize === "function") {
                item.rasterize();
              }
            }
          }
        }
        this.disableDrawing = true;
        InstantPaperTileRasterizer.__super__.rasterizeCallback.call(this, step);
      };

      InstantPaperTileRasterizer.prototype.rasterizeAreasToUpdate = function() {
        this.disableDrawing = false;
        InstantPaperTileRasterizer.__super__.rasterizeAreasToUpdate.call(this);
        this.disableDrawing = true;
      };

      return InstantPaperTileRasterizer;

    })(PaperTileRasterizer);
    CanvasTileRasterizer = (function(_super) {
      __extends(CanvasTileRasterizer, _super);

      CanvasTileRasterizer.TYPE = 'canvas tile';

      function CanvasTileRasterizer() {
        CanvasTileRasterizer.__super__.constructor.call(this);
        return;
      }

      CanvasTileRasterizer.prototype.createRaster = function(x, y, zoom) {
        var raster, _ref;
        raster = (_ref = this.rasters[x]) != null ? _ref[y] : void 0;
        if (raster != null) {
          return;
        }
        raster = {};
        raster.canvasJ = $('<canvas hidpi="off" width="' + R.scale + '" height="' + R.scale + '">');
        raster.canvas = raster.canvasJ[0];
        raster.context = raster.canvas.getContext('2d');
        raster.image = new Image();
        raster.image.onload = (function(_this) {
          return function() {
            _this.rasterLoaded(raster);
          };
        })(this);
        $("#rasters").append(raster.canvasJ);
        CanvasTileRasterizer.__super__.createRaster.call(this, x, y, zoom, raster);
      };

      CanvasTileRasterizer.prototype.removeRaster = function(raster, x, y) {
        raster.canvasJ.remove();
        CanvasTileRasterizer.__super__.removeRaster.call(this, raster, x, y);
      };

      CanvasTileRasterizer.prototype.loadImageForRaster = function(raster, url) {
        raster.image.src = url;
      };

      CanvasTileRasterizer.prototype.move = function() {
        var css, raster, rasterColumn, scale, viewPos, x, y, _ref;
        CanvasTileRasterizer.__super__.move.call(this);
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          x = Number(x);
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            y = Number(y);
            viewPos = P.view.projectToView(new P.Point(x, y));
            if (P.view.zoom === 1) {
              raster.canvasJ.css({
                'left': viewPos.x,
                'top': viewPos.y,
                'transform': 'none'
              });
            } else {
              scale = P.view.zoom * raster.zoom;
              css = 'translate(' + viewPos.x + 'px,' + viewPos.y + 'px)';
              css += ' scale(' + scale + ')';
              raster.canvasJ.css({
                'transform': css,
                'top': 0,
                'left': 0,
                'transform-origin': '0 0'
              });
            }
          }
        }
      };

      CanvasTileRasterizer.prototype.hideRasters = function() {
        var raster, rasterColumn, x, y, _ref;
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            raster.canvasJ.hide();
          }
        }
      };

      CanvasTileRasterizer.prototype.showRasters = function() {
        var raster, rasterColumn, x, y, _ref;
        _ref = this.rasters;
        for (x in _ref) {
          rasterColumn = _ref[x];
          for (y in rasterColumn) {
            raster = rasterColumn[y];
            raster.canvasJ.show();
          }
        }
      };

      return CanvasTileRasterizer;

    })(TileRasterizer);
    Rasterizer.Tile = TileRasterizer;
    Rasterizer.CanvasTile = CanvasTileRasterizer;
    Rasterizer.InstantPaperTile = InstantPaperTileRasterizer;
    Rasterizer.PaperTile = PaperTileRasterizer;
    return Rasterizer;
  });

}).call(this);
